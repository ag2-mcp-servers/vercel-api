# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:33:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from ipaddress import IPv4Address, IPv6Address
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    RootModel,
    confloat,
    conint,
    constr,
)


class ACLAction(Enum):
    create = 'create'
    delete = 'delete'
    read = 'read'
    update = 'update'
    list = 'list'
    count = 'count'


class Origin(Enum):
    saml = 'saml'
    github = 'github'
    gitlab = 'gitlab'
    bitbucket = 'bitbucket'
    email = 'email'
    manual = 'manual'


class Type(Enum):
    user = 'user'


class Scopes(BaseModel):
    createdAt: float
    expiresAt: Optional[float] = None
    origin: Origin
    type: Type


class Type1(Enum):
    team = 'team'


class Scopes1(BaseModel):
    createdAt: float
    expiresAt: Optional[float] = None
    origin: Origin
    teamId: str
    type: Type1


class AuthToken(BaseModel):
    activeAt: float = Field(
        ...,
        description='Timestamp (in milliseconds) of when the token was most recently used.',
        examples=[1632816536002],
    )
    createdAt: float = Field(
        ...,
        description='Timestamp (in milliseconds) of when the token was created.',
        examples=[1632816536002],
    )
    expiresAt: Optional[float] = Field(
        None,
        description='Timestamp (in milliseconds) of when the token expires.',
        examples=[1632816536002],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the token.',
        examples=['5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391'],
    )
    name: str = Field(..., description='The human-readable name of the token.')
    origin: Optional[str] = Field(
        None,
        description='The origin of how the token was created.',
        examples=['github'],
    )
    scopes: Optional[List[Union[Scopes, Scopes1]]] = Field(
        None, description='The access scopes granted to the token.'
    )
    type: str = Field(
        ..., description='The type of the token.', examples=['oauth2-token']
    )


class ViewPreference(Enum):
    cards = 'cards'
    list = 'list'


class ActiveDashboardView(BaseModel):
    scopeId: str
    viewPreference: ViewPreference


class Addon(Enum):
    custom_deployment_suffix = 'custom-deployment-suffix'
    live_support = 'live-support'


class Address(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    line1: str
    line2: Optional[str] = None
    postalCode: Optional[str] = None
    state: Optional[str] = None


class Contract(BaseModel):
    end: float
    start: float


class Controls(BaseModel):
    analyticsSampleRateInPercent: Optional[float] = None
    analyticsSpendLimitInDollars: Optional[float] = None


class Currency(Enum):
    usd = 'usd'
    eur = 'eur'


class Interval(Enum):
    month = 'month'


class IntervalCount(Enum):
    number_1 = 1
    number_3 = 3
    number_2 = 2
    number_6 = 6
    number_12 = 12


class Frequency(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class Analytics(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class AnalyticsUsage(BaseModel):
    batch: float
    disabledAt: Optional[float] = None
    hidden: bool
    name: Optional[str] = None
    price: float
    threshold: float


class Artifacts(BaseModel):
    batch: float
    disabledAt: Optional[float] = None
    hidden: bool
    name: Optional[str] = None
    price: float
    threshold: float


class Bandwidth(BaseModel):
    batch: float
    disabledAt: Optional[float] = None
    hidden: bool
    name: Optional[str] = None
    price: float
    threshold: float


class Builds(BaseModel):
    batch: float
    disabledAt: Optional[float] = None
    hidden: bool
    name: Optional[str] = None
    price: float
    threshold: float


class Frequency1(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class ConcurrentBuilds(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency1] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class Frequency2(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class CustomCerts(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency2] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class EdgeFunctionExecutionUnits(BaseModel):
    batch: float
    disabledAt: Optional[float] = None
    hidden: bool
    name: Optional[str] = None
    price: float
    threshold: float


class EdgeMiddlewareInvocations(BaseModel):
    batch: float
    disabledAt: Optional[float] = None
    hidden: bool
    name: Optional[str] = None
    price: float
    threshold: float


class Frequency3(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class Enterprise(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency3] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class Frequency4(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class Monitoring(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency4] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class MonitoringMetric(BaseModel):
    batch: float
    disabledAt: Optional[float] = None
    hidden: bool
    name: Optional[str] = None
    price: float
    threshold: float


class Frequency5(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class PasswordProtection(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency5] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class Frequency6(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class PreviewDeploymentSuffix(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency6] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class Frequency7(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class Pro(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency7] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class Frequency8(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class Saml(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency8] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class ServerlessFunctionExecution(BaseModel):
    batch: float
    disabledAt: Optional[float] = None
    hidden: bool
    name: Optional[str] = None
    price: float
    threshold: float


class SourceImages(BaseModel):
    batch: float
    disabledAt: Optional[float] = None
    hidden: bool
    name: Optional[str] = None
    price: float
    threshold: float


class Frequency9(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class SsoProtection(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency9] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class Frequency10(BaseModel):
    interval: Interval
    intervalCount: IntervalCount


class TeamSeats(BaseModel):
    createdAt: Optional[float] = None
    disabledAt: Optional[float] = None
    frequency: Optional[Frequency10] = None
    hidden: bool
    maxQuantity: Optional[float] = None
    name: Optional[str] = None
    price: float
    quantity: float


class WebAnalyticsDataPoint(BaseModel):
    batch: float
    disabledAt: Optional[float] = None
    hidden: bool
    name: Optional[str] = None
    price: float
    threshold: float


class InvoiceItems(BaseModel):
    analytics: Optional[Analytics] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    analyticsUsage: Optional[AnalyticsUsage] = None
    artifacts: Optional[Artifacts] = None
    bandwidth: Optional[Bandwidth] = None
    builds: Optional[Builds] = None
    concurrentBuilds: Optional[ConcurrentBuilds] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    customCerts: Optional[CustomCerts] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    edgeFunctionExecutionUnits: Optional[EdgeFunctionExecutionUnits] = None
    edgeMiddlewareInvocations: Optional[EdgeMiddlewareInvocations] = None
    enterprise: Optional[Enterprise] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    monitoring: Optional[Monitoring] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    monitoringMetric: Optional[MonitoringMetric] = None
    passwordProtection: Optional[PasswordProtection] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    previewDeploymentSuffix: Optional[PreviewDeploymentSuffix] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    pro: Optional[Pro] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    saml: Optional[Saml] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    serverlessFunctionExecution: Optional[ServerlessFunctionExecution] = None
    sourceImages: Optional[SourceImages] = None
    ssoProtection: Optional[SsoProtection] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    teamSeats: Optional[TeamSeats] = Field(
        None,
        description='Will be used to create an invoice item. The price must be in cents: 2000 for $20.',
    )
    webAnalyticsDataPoint: Optional[WebAnalyticsDataPoint] = None


class InvoiceSettings(BaseModel):
    footer: Optional[str] = None


class Period(BaseModel):
    end: float
    start: float


class Plan(Enum):
    hobby = 'hobby'
    enterprise = 'enterprise'
    pro = 'pro'


class Platform(Enum):
    stripe = 'stripe'
    stripeTestMode = 'stripeTestMode'


class PricingExperiment(Enum):
    august_2022 = 'august-2022'


class ProgramType(Enum):
    startup = 'startup'
    agency = 'agency'


class Status(Enum):
    active = 'active'
    canceled = 'canceled'
    trialing = 'trialing'
    overdue = 'overdue'
    expired = 'expired'


class Duration(Enum):
    forever = 'forever'
    repeating = 'repeating'
    once = 'once'


class Coupon(BaseModel):
    amountOff: Optional[float] = None
    duration: Duration
    durationInMonths: Optional[float] = None
    id: str
    name: Optional[str] = None
    percentageOff: Optional[float] = None


class Discount(BaseModel):
    coupon: Coupon
    id: str


class Interval11(Enum):
    month = 'month'
    day = 'day'
    week = 'week'
    year = 'year'


class Frequency11(BaseModel):
    interval: Interval11
    intervalCount: float


class Item(BaseModel):
    amount: float
    id: str
    priceId: str
    productId: str
    quantity: float


class Trial(BaseModel):
    end: float
    start: float


class Subscription(BaseModel):
    discount: Optional[Discount] = None
    frequency: Frequency11
    id: str
    items: List[Item]
    period: Optional[Period] = None
    trial: Optional[Trial] = None


class Tax(BaseModel):
    id: str
    type: str


class Billing(BaseModel):
    addons: Optional[List[Addon]] = None
    address: Optional[Address] = None
    cancelation: Optional[float] = None
    contract: Optional[Contract] = None
    controls: Optional[Controls] = None
    currency: Optional[Currency] = None
    email: Optional[str] = None
    invoiceItems: Optional[InvoiceItems] = None
    invoiceSettings: Optional[InvoiceSettings] = None
    language: Optional[str] = None
    name: Optional[str] = None
    overdue: Optional[bool] = None
    period: Optional[Period] = None
    plan: Plan
    platform: Optional[Platform] = None
    pricingExperiment: Optional[PricingExperiment] = None
    programType: Optional[ProgramType] = None
    purchaseOrder: Optional[str] = None
    status: Optional[Status] = None
    subscriptions: Optional[List[Subscription]] = None
    tax: Optional[Tax] = None
    trial: Optional[Trial] = None


class Dismissal(BaseModel):
    createdAt: float
    scopeId: str


class DismissedToast(BaseModel):
    dismissals: List[Dismissal]
    name: str


class ImportFlowGitProvider(Enum):
    github = 'github'
    gitlab = 'gitlab'
    bitbucket = 'bitbucket'


class PreferredScopesAndGitNamespace(BaseModel):
    gitNamespaceId: Union[str, float]
    scopeId: str


class RemoteCaching(BaseModel):
    enabled: Optional[bool] = None


class ResourceConfig(BaseModel):
    awsAccountIds: Optional[List[str]] = None
    awsAccountType: Optional[str] = None
    cfZoneName: Optional[str] = None
    concurrentBuilds: Optional[float] = None
    edgeConfigSize: Optional[float] = Field(
        None,
        description='To overwrite the maximum size of an Edge Config per account. Size is in kilobytes, eg 64 leads to 64kB or 64_000 bytes worth of storage',
    )
    edgeConfigs: Optional[float] = Field(
        None,
        description='To overwrite the number of Edge Configs an account can create.',
    )
    nodeType: Optional[str] = None


class Reason(Enum):
    FAIR_USE_LIMITS_EXCEEDED = 'FAIR_USE_LIMITS_EXCEEDED'
    ENTERPRISE_TRIAL_ENDED = 'ENTERPRISE_TRIAL_ENDED'
    BLOCKED_FOR_PLATFORM_ABUSE = 'BLOCKED_FOR_PLATFORM_ABUSE'
    UNPAID_INVOICE = 'UNPAID_INVOICE'
    SUBSCRIPTION_EXPIRED = 'SUBSCRIPTION_EXPIRED'
    SUBSCRIPTION_CANCELED = 'SUBSCRIPTION_CANCELED'


class SoftBlock(BaseModel):
    blockedAt: float
    reason: Reason


class AuthUser(BaseModel):
    activeDashboardViews: Optional[List[ActiveDashboardView]] = Field(
        None,
        description='set of dashboard view preferences (cards or list) per scopeId',
    )
    avatar: Optional[str] = Field(
        ...,
        description='SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.',
        examples=['22cb30c85ff45ac4c72de8981500006b28114aa1'],
    )
    billing: Optional[Billing] = Field(
        ...,
        description='An object containing billing infomation associated with the User account.',
    )
    createdAt: float = Field(
        ...,
        description='UNIX timestamp (in milliseconds) when the User account was created.',
        examples=[1630748523395],
    )
    dismissedToasts: Optional[List[DismissedToast]] = Field(
        None,
        description='A record of when, under a certain scopeId, a toast was dismissed',
    )
    email: str = Field(
        ...,
        description='Email address associated with the User account.',
        examples=['me@example.com'],
    )
    hasTrialAvailable: bool = Field(
        ...,
        description='Whether the user has a trial available for a paid plan subscription.',
    )
    id: str = Field(
        ...,
        description="The User's unique identifier.",
        examples=['AEIIDYVk59zbFF2Sxfyxxmua'],
    )
    importFlowGitNamespace: Optional[Union[str, float]] = None
    importFlowGitNamespaceId: Optional[Union[str, float]] = None
    importFlowGitProvider: Optional[ImportFlowGitProvider] = None
    name: Optional[str] = Field(
        ...,
        description='Name associated with the User account, or `null` if none has been provided.',
        examples=['John Doe'],
    )
    preferredScopesAndGitNamespaces: Optional[List[PreferredScopesAndGitNamespace]] = (
        None
    )
    remoteCaching: Optional[RemoteCaching] = Field(
        None, description='remote caching settings'
    )
    resourceConfig: ResourceConfig = Field(
        ...,
        description='An object containing infomation related to the amount of platform resources may be allocated to the User account.',
    )
    softBlock: Optional[SoftBlock] = Field(
        ...,
        description='When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.',
    )
    stagingPrefix: str = Field(
        ...,
        description='Prefix that will be used in the URL of "Preview" deployments created by the User account.',
    )
    username: str = Field(
        ...,
        description='Unique username associated with the User account.',
        examples=['jdoe'],
    )


class AuthUserLimited(BaseModel):
    avatar: Optional[str] = Field(
        ...,
        description='SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.',
        examples=['22cb30c85ff45ac4c72de8981500006b28114aa1'],
    )
    email: str = Field(
        ...,
        description='Email address associated with the User account.',
        examples=['me@example.com'],
    )
    id: str = Field(
        ...,
        description="The User's unique identifier.",
        examples=['AEIIDYVk59zbFF2Sxfyxxmua'],
    )
    limited: bool = Field(
        ...,
        description='Property indicating that this User data contains only limited information, due to the authentication token missing privileges to read the full User data. Re-login with email, GitHub, GitLab or Bitbucket in order to upgrade the authentication token with the necessary privileges.',
    )
    name: Optional[str] = Field(
        ...,
        description='Name associated with the User account, or `null` if none has been provided.',
        examples=['John Doe'],
    )
    username: str = Field(
        ...,
        description='Unique username associated with the User account.',
        examples=['jdoe'],
    )


class EdgeConfigItemValue(
    RootModel[Union[str, float, bool, Dict[str, Any], List[EdgeConfigItemValue]]]
):
    root: Union[str, float, bool, Dict[str, Any], List[EdgeConfigItemValue]]


class EdgeConfigToken(BaseModel):
    createdAt: float
    edgeConfigId: str
    id: str = Field(
        ...,
        description='This is not the token itself, but rather an id to identify the token by',
    )
    label: str
    token: str


class Type2(Enum):
    directory = 'directory'
    file = 'file'
    symlink = 'symlink'
    lambda_ = 'lambda'
    middleware = 'middleware'
    invalid = 'invalid'


class FileTree(BaseModel):
    children: Optional[List[FileTree]] = Field(
        None,
        description='The list of children files of the directory (only valid for the `directory` type)',
    )
    contentType: Optional[str] = Field(
        None,
        description='The content-type of the file (only valid for the `file` type)',
        examples=['application/json'],
    )
    mode: float = Field(
        ..., description='The file "mode" indicating file type and permissions.'
    )
    name: str = Field(
        ..., description='The name of the file tree entry', examples=['my-file.json']
    )
    symlink: Optional[str] = Field(
        None, description='Not currently used. See `file-list-to-tree.ts`.'
    )
    type: Type2 = Field(
        ...,
        description='String indicating the type of file tree entry.',
        examples=['file'],
    )
    uid: Optional[str] = Field(
        None,
        description='The unique identifier of the file (only valid for the `file` type)',
        examples=['2d4aad419917f15b1146e9e03ddc9bb31747e4d0'],
    )


class Pagination(BaseModel):
    count: float = Field(
        ..., description='Amount of items in the current page.', examples=[20]
    )
    next: Optional[float] = Field(
        ...,
        description='Timestamp that must be used to request the next page.',
        examples=[1540095775951],
    )
    prev: Optional[float] = Field(
        ...,
        description='Timestamp that must be used to request the previous page.',
        examples=[1540095775951],
    )


class Team(BaseModel):
    pass


class Origin2(Enum):
    import_ = 'import'
    saml = 'saml'
    mail = 'mail'
    link = 'link'
    teams = 'teams'
    github = 'github'
    gitlab = 'gitlab'
    bitbucket = 'bitbucket'
    dsync = 'dsync'
    feedback = 'feedback'


class JoinedFrom(BaseModel):
    commitId: Optional[str] = None
    dsyncConnectedAt: Optional[float] = None
    dsyncUserId: Optional[str] = None
    gitUserId: Optional[Union[str, float]] = None
    gitUserLogin: Optional[str] = None
    idpUserId: Optional[str] = None
    origin: Origin2
    repoId: Optional[str] = None
    repoPath: Optional[str] = None
    ssoConnectedAt: Optional[float] = None
    ssoUserId: Optional[str] = None


class Role(Enum):
    MEMBER = 'MEMBER'
    OWNER = 'OWNER'
    VIEWER = 'VIEWER'
    DEVELOPER = 'DEVELOPER'
    BILLING = 'BILLING'


class Membership(BaseModel):
    accessRequestedAt: Optional[float] = None
    confirmed: bool
    confirmedAt: float
    created: float
    createdAt: float
    joinedFrom: Optional[JoinedFrom] = None
    role: Role
    teamId: Optional[str] = None
    uid: str


class JoinedFrom1(BaseModel):
    commitId: Optional[str] = None
    dsyncConnectedAt: Optional[float] = None
    dsyncUserId: Optional[str] = None
    gitUserId: Optional[Union[str, float]] = None
    gitUserLogin: Optional[str] = None
    idpUserId: Optional[str] = None
    origin: Origin2
    repoId: Optional[str] = None
    repoPath: Optional[str] = None
    ssoConnectedAt: Optional[float] = None
    ssoUserId: Optional[str] = None


class Membership1(BaseModel):
    accessRequestedAt: float
    confirmed: bool
    confirmedAt: Optional[float] = None
    created: float
    createdAt: float
    joinedFrom: Optional[JoinedFrom1] = None
    role: Role
    teamId: Optional[str] = None
    uid: str


class RecordType(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'


class Type3(Enum):
    record = 'record'
    record_sys = 'record-sys'


class Connection(BaseModel):
    createdAt: Optional[float] = None
    creator: str
    domain: str
    id: str
    name: str
    recordType: RecordType
    ttl: Optional[float] = None
    type: Type3
    value: str


class Directory(BaseModel):
    createdAt: Optional[float] = None
    creator: str
    domain: str
    id: str
    name: str
    recordType: RecordType
    ttl: Optional[float] = None
    type: Type3
    value: str


class Saml1(BaseModel):
    connection: Optional[Connection] = Field(
        None,
        description='From T, pick a set of properties whose keys are in the union K',
    )
    directory: Optional[Directory] = Field(
        None,
        description='From T, pick a set of properties whose keys are in the union K',
    )
    enforced: bool = Field(
        ...,
        description="When `true`, interactions with the Team **must** be done with an authentication token that has been authenticated with the Team's SAML Single Sign-On provider.",
    )


class TeamLimited(BaseModel):
    avatar: Optional[str] = Field(
        ...,
        description='The ID of the file used as avatar for this Team.',
        examples=['6eb07268bcfadd309905ffb1579354084c24655c'],
    )
    created: str = Field(..., description='Will remain undocumented. Remove in v3 API.')
    createdAt: float = Field(
        ...,
        description='UNIX timestamp (in milliseconds) when the Team was created.',
        examples=[1630748523395],
    )
    id: str = Field(
        ...,
        description="The Team's unique identifier.",
        examples=['team_nllPyCtREAqxxdyFKbbMDlxd'],
    )
    limited: bool = Field(
        ...,
        description="Property indicating that this Team data contains only limited information, due to the authentication token missing privileges to read the full Team data. Re-login with the Team's configured SAML Single Sign-On provider in order to upgrade the authentication token with the necessary privileges.",
    )
    membership: Union[Membership, Membership1]
    name: Optional[str] = Field(
        ...,
        description='Name associated with the Team account, or `null` if none has been provided.',
        examples=['My Team'],
    )
    saml: Optional[Saml1] = Field(
        None,
        description='When "Single Sign-On (SAML)" is configured, this object contains information that allows the client-side to identify whether or not this Team has SAML enforced.',
    )
    slug: str = Field(
        ...,
        description="The Team's slug, which is unique across the Vercel platform.",
        examples=['my-team'],
    )


class Type5(Enum):
    target = 'target'
    author = 'author'
    bitbucket_login = 'bitbucket_login'
    bold = 'bold'
    deployment_host = 'deployment_host'
    dns_record = 'dns_record'
    git_link = 'git_link'
    github_login = 'github_login'
    gitlab_login = 'gitlab_login'
    hook_name = 'hook_name'
    integration = 'integration'
    edge_config = 'edge-config'
    link = 'link'
    project_name = 'project_name'
    scaling_rules = 'scaling_rules'
    env_var_name = 'env_var_name'
    system = 'system'


class Entity(BaseModel):
    end: float = Field(
        ...,
        description='The index of where the entity ends within the `text` (non-inclusive).',
        examples=[3],
    )
    start: float = Field(
        ...,
        description='The index of where the entity begins within the `text` (inclusive).',
        examples=[0],
    )
    type: Type5 = Field(..., description='The type of entity.', examples=['author'])


class User(BaseModel):
    avatar: str
    email: str
    slug: Optional[str] = None
    uid: str
    username: str


class UserEvent(BaseModel):
    createdAt: float = Field(
        ...,
        description='Timestamp (in milliseconds) of when the event was generated.',
        examples=[1632859321020],
    )
    entities: List[Entity] = Field(
        ...,
        description='A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.',
    )
    id: str = Field(
        ...,
        description='The unique identifier of the Event.',
        examples=['uev_bfmMjiMnXfnPbT97dGdpJbCN'],
    )
    text: str = Field(
        ...,
        description='The human-readable text of the Event.',
        examples=['You logged in via GitHub'],
    )
    user: Optional[User] = Field(
        None, description='Metadata for the User who generated the event.'
    )
    userId: str = Field(
        ...,
        description='The unique identifier of the User who generated the event.',
        examples=['zTuNVUXEAvvnNN3IaqinkyMw'],
    )


class Type6(Enum):
    record = 'record'
    record_sys = 'record-sys'


class EdgeConfigGetResponse(BaseModel):
    createdAt: Optional[float] = None
    creator: Optional[str] = None
    domain: Optional[str] = None
    id: Optional[str] = None
    itemCount: float
    name: Optional[str] = None
    recordType: Optional[RecordType] = None
    sizeInBytes: float
    ttl: Optional[float] = None
    type: Optional[Type6] = None
    value: Optional[str] = None


class EdgeConfigPostRequest(BaseModel):
    items: Optional[
        Dict[
            str,
            Union[
                Optional[Union[str, float, bool, Dict[str, Any]]],
                List[Optional[Union[str, float, bool, Dict[str, Any]]]],
            ],
        ]
    ] = None
    slug: constr(pattern=r'^[\\w-]+$', max_length=32)


class Conclusion(Enum):
    canceled = 'canceled'
    failed = 'failed'
    neutral = 'neutral'
    succeeded = 'succeeded'
    skipped = 'skipped'
    stale = 'stale'


class Source(Enum):
    web_vitals = 'web-vitals'


class CLS(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class FCP(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class LCP(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class TBT(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class VirtualExperienceScore(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class Metrics(BaseModel):
    CLS_1: CLS = Field(..., alias='CLS')
    FCP_1: FCP = Field(..., alias='FCP')
    LCP_1: LCP = Field(..., alias='LCP')
    TBT_1: TBT = Field(..., alias='TBT')
    virtualExperienceScore: Optional[VirtualExperienceScore] = None


class Output(BaseModel):
    metrics: Optional[Metrics] = None


class Status1(Enum):
    registered = 'registered'
    running = 'running'
    completed = 'completed'


class EdgeConfigPostResponse(BaseModel):
    blocking: Optional[bool] = None
    completedAt: Optional[float] = None
    conclusion: Optional[Conclusion] = None
    createdAt: Optional[float] = None
    deploymentId: Optional[str] = None
    detailsUrl: Optional[str] = None
    externalId: Optional[str] = None
    id: Optional[str] = None
    integrationId: Optional[str] = None
    itemCount: float
    name: Optional[str] = None
    output: Optional[Output] = None
    path: Optional[str] = None
    rerequestable: Optional[bool] = None
    sizeInBytes: float
    startedAt: Optional[float] = None
    status: Optional[Status1] = None
    updatedAt: Optional[float] = None


class EdgeConfigEdgeConfigIdGetResponse(BaseModel):
    createdAt: Optional[float] = None
    creator: Optional[str] = None
    domain: Optional[str] = None
    id: Optional[str] = None
    itemCount: float
    name: Optional[str] = None
    recordType: Optional[RecordType] = None
    sizeInBytes: float
    ttl: Optional[float] = None
    type: Optional[Type6] = None
    value: Optional[str] = None


class EdgeConfigEdgeConfigIdPutRequest(BaseModel):
    slug: constr(pattern=r'^[\\w-]+$', max_length=32)


class CLS1(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class FCP1(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class LCP1(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class TBT1(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class VirtualExperienceScore1(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class Metrics1(BaseModel):
    CLS: CLS1
    FCP: FCP1
    LCP: LCP1
    TBT: TBT1
    virtualExperienceScore: Optional[VirtualExperienceScore1] = None


class Output1(BaseModel):
    metrics: Optional[Metrics1] = None


class EdgeConfigEdgeConfigIdPutResponse(BaseModel):
    blocking: Optional[bool] = None
    completedAt: Optional[float] = None
    conclusion: Optional[Conclusion] = None
    createdAt: Optional[float] = None
    deploymentId: Optional[str] = None
    detailsUrl: Optional[str] = None
    externalId: Optional[str] = None
    id: Optional[str] = None
    integrationId: Optional[str] = None
    itemCount: float
    name: Optional[str] = None
    output: Optional[Output1] = None
    path: Optional[str] = None
    rerequestable: Optional[bool] = None
    sizeInBytes: float
    startedAt: Optional[float] = None
    status: Optional[Status1] = None
    updatedAt: Optional[float] = None


class Items(BaseModel):
    key: constr(pattern=r'^[\\w-]+$', max_length=256)
    operation: str
    value: Union[
        Optional[Union[str, float, bool, Dict[str, Any]]],
        List[Optional[Union[str, float, bool, Dict[str, Any]]]],
    ]


class Items1(BaseModel):
    key: constr(pattern=r'^[\\w-]+$', max_length=256)
    operation: Literal['delete']


class EdgeConfigEdgeConfigIdItemsPatchRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: List[Union[Items, Items1]]


class EdgeConfigEdgeConfigIdItemsPatchResponse(BaseModel):
    status: str


class EdgeConfigEdgeConfigIdTokenPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: constr(max_length=52)


class EdgeConfigEdgeConfigIdTokenPostResponse(BaseModel):
    id: str
    token: str


class EdgeConfigEdgeConfigIdTokensDeleteRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    tokens: List[str]


class RegistrationPostRequest(BaseModel):
    email: str = Field(..., description='The user email.', examples=['user@mail.com'])
    tokenName: Optional[str] = Field(
        None,
        description='The desired name for the token. It will be displayed on the user account details.',
        examples=['Your Client App Name'],
    )


class RegistrationPostResponse(BaseModel):
    securityCode: str = Field(
        ...,
        description='The code the user is going to receive on the email. **Must** be displayed to the user so they can verify the request is the correct.',
        examples=['Practical Saola'],
    )
    token: str = Field(
        ...,
        description='The token used to verify the user accepted the login request',
        examples=['T1dmvPu36nmyYisXAs7IRzcR'],
    )


class RegistrationVerifyGetResponse(BaseModel):
    email: str = Field(
        ...,
        description='Email address of the authenticated user.',
        examples=['amy@example.com'],
    )
    teamId: Optional[str] = Field(
        None,
        description='When completing SAML Single Sign-On authentication, this will be the ID of the Team that was authenticated for.',
        examples=['team_LLHUOMOoDlqOp8wPE4kFo9pE'],
    )
    token: str = Field(
        ...,
        description='The user authentication token that can be used to perform API requests.',
        examples=['1ioXyz9Ue4xdCYGROet1dlKd'],
    )


class CLS2(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class FCP2(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class LCP2(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class TBT2(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class VirtualExperienceScore2(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class Metrics2(BaseModel):
    CLS: CLS2
    FCP: FCP2
    LCP: LCP2
    TBT: TBT2
    virtualExperienceScore: Optional[VirtualExperienceScore2] = None


class Output2(BaseModel):
    metrics: Optional[Metrics2] = None


class Check(BaseModel):
    completedAt: Optional[float] = None
    conclusion: Optional[Conclusion] = None
    createdAt: float
    detailsUrl: Optional[str] = None
    id: str
    integrationId: str
    name: str
    output: Optional[Output2] = None
    path: Optional[str] = None
    rerequestable: bool
    startedAt: Optional[float] = None
    status: Status1
    updatedAt: float


class V1DeploymentsDeploymentIdChecksGetResponse(BaseModel):
    checks: List[Check]


class V1DeploymentsDeploymentIdChecksPostRequest(BaseModel):
    blocking: bool = Field(
        ...,
        description='Whether the check should block a deployment from succeeding',
        examples=[True],
    )
    detailsUrl: Optional[str] = Field(
        None,
        description='URL to display for further details',
        examples=['http://example.com'],
    )
    externalId: Optional[str] = Field(
        None,
        description='An identifier that can be used as an external reference',
        examples=['1234abc'],
    )
    name: constr(max_length=100) = Field(
        ...,
        description='The name of the check being created',
        examples=['Performance Check'],
    )
    path: Optional[constr(max_length=255)] = Field(
        None, description='Path of the page that is being checked', examples=['/']
    )
    rerequestable: Optional[bool] = Field(
        None,
        description='Whether a user should be able to request for the check to be rerun if it fails',
        examples=[True],
    )


class CLS3(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class FCP3(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class LCP3(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class TBT3(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class VirtualExperienceScore3(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class Metrics3(BaseModel):
    CLS: CLS3
    FCP: FCP3
    LCP: LCP3
    TBT: TBT3
    virtualExperienceScore: Optional[VirtualExperienceScore3] = None


class Output3(BaseModel):
    metrics: Optional[Metrics3] = None


class V1DeploymentsDeploymentIdChecksPostResponse(BaseModel):
    blocking: bool
    completedAt: Optional[float] = None
    conclusion: Optional[Conclusion] = None
    createdAt: float
    deploymentId: str
    detailsUrl: Optional[str] = None
    externalId: Optional[str] = None
    id: str
    integrationId: str
    name: str
    output: Optional[Output3] = None
    path: Optional[str] = None
    rerequestable: Optional[bool] = None
    startedAt: Optional[float] = None
    status: Status1
    updatedAt: float


class V1DeploymentsDeploymentIdChecksCheckIdGetResponse(BaseModel):
    createdAt: Optional[float] = None
    creator: str
    domain: str
    id: str
    name: str
    recordType: RecordType
    ttl: Optional[float] = None
    type: Type6
    value: str


class Conclusion4(Enum):
    canceled = 'canceled'
    failed = 'failed'
    neutral = 'neutral'
    succeeded = 'succeeded'
    skipped = 'skipped'


class CLS4(BaseModel):
    previousValue: Optional[float] = Field(
        None,
        description='Previous Cumulative Layout Shift value to display a delta',
        examples=[2],
    )
    source: Source
    value: Optional[float] = Field(
        ..., description='Cumulative Layout Shift value', examples=[4]
    )


class FCP4(BaseModel):
    previousValue: Optional[float] = Field(
        None,
        description='Previous First Contentful Paint value to display a delta',
        examples=[900],
    )
    source: Source
    value: Optional[float] = Field(
        ..., description='First Contentful Paint value', examples=[1200]
    )


class LCP4(BaseModel):
    previousValue: Optional[float] = Field(
        None,
        description='Previous Largest Contentful Paint value to display a delta',
        examples=[1000],
    )
    source: Source
    value: Optional[float] = Field(
        ..., description='Largest Contentful Paint value', examples=[1200]
    )


class TBT4(BaseModel):
    previousValue: Optional[float] = Field(
        None,
        description='Previous Total Blocking Time value to display a delta',
        examples=[3500],
    )
    source: Source
    value: Optional[float] = Field(
        ..., description='Total Blocking Time value', examples=[3000]
    )


class VirtualExperienceScore4(BaseModel):
    previousValue: Optional[conint(ge=0, le=100)] = Field(
        None,
        description='A previous Virtual Experience Score value to display a delta, between 0 and 100',
        examples=[35],
    )
    source: Source
    value: Optional[conint(ge=0, le=100)] = Field(
        ...,
        description='The calculated Virtual Experience Score value, between 0 and 100',
        examples=[30],
    )


class Metrics4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    CLS: CLS4
    FCP: FCP4
    LCP: LCP4
    TBT: TBT4
    virtualExperienceScore: Optional[VirtualExperienceScore4] = None


class Output4(BaseModel):
    metrics: Optional[Metrics4] = Field(None, description='Metrics about the page')


class Status5(Enum):
    running = 'running'
    completed = 'completed'


class V1DeploymentsDeploymentIdChecksCheckIdPatchRequest(BaseModel):
    conclusion: Optional[Conclusion4] = Field(
        None, description='The result of the check being run'
    )
    detailsUrl: Optional[str] = Field(
        None,
        description='A URL a user may visit to see more information about the check',
        examples=['https://example.com/check/run/1234abc'],
    )
    externalId: Optional[str] = Field(
        None,
        description='An identifier that can be used as an external reference',
        examples=['1234abc'],
    )
    name: Optional[constr(max_length=100)] = Field(
        None,
        description='The name of the check being created',
        examples=['Performance Check'],
    )
    output: Optional[Output4] = Field(None, description='The results of the check Run')
    path: Optional[constr(max_length=255)] = Field(
        None, description='Path of the page that is being checked', examples=['/']
    )
    status: Optional[Status5] = Field(
        None, description='The current status of the check'
    )


class Conclusion5(Enum):
    canceled = 'canceled'
    failed = 'failed'
    neutral = 'neutral'
    succeeded = 'succeeded'
    skipped = 'skipped'
    stale = 'stale'


class CLS5(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class FCP5(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class LCP5(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class TBT5(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class VirtualExperienceScore5(BaseModel):
    previousValue: Optional[float] = None
    source: Source
    value: Optional[float] = None


class Metrics5(BaseModel):
    CLS: CLS5
    FCP: FCP5
    LCP: LCP5
    TBT: TBT5
    virtualExperienceScore: Optional[VirtualExperienceScore5] = None


class Output5(BaseModel):
    metrics: Optional[Metrics5] = None


class Status6(Enum):
    registered = 'registered'
    running = 'running'
    completed = 'completed'


class V1DeploymentsDeploymentIdChecksCheckIdPatchResponse(BaseModel):
    blocking: bool
    completedAt: Optional[float] = None
    conclusion: Optional[Conclusion5] = None
    createdAt: float
    deploymentId: str
    detailsUrl: Optional[str] = None
    externalId: Optional[str] = None
    id: str
    integrationId: str
    name: str
    output: Optional[Output5] = None
    path: Optional[str] = None
    rerequestable: Optional[bool] = None
    startedAt: Optional[float] = None
    status: Status6
    updatedAt: float


class V1DeploymentsDeploymentIdChecksCheckIdRerequestPostResponse(BaseModel):
    pass


class Srv(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    port: Optional[int] = Field(..., description='')
    priority: Optional[int] = Field(..., description='')
    target: Optional[constr(max_length=255)] = Field(
        ..., description='', examples=['example2.com.']
    )
    weight: Optional[int] = Field(..., description='')


class Type9(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'


class V1DomainsRecordsRecordIdPatchRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mxPriority: Optional[int] = Field(
        None, description='The MX priority value of the DNS record'
    )
    name: Optional[str] = Field(
        None, description='The name of the DNS record', examples=['example-1']
    )
    srv: Optional[Srv] = None
    ttl: Optional[conint(ge=60, le=2147483647)] = Field(
        None,
        description='The Time to live (TTL) value of the DNS record',
        examples=['60'],
    )
    type: Optional[Type9] = Field(
        None, description='The type of the DNS record', examples=['A']
    )
    value: Optional[str] = Field(
        None, description='The value of the DNS record', examples=['google.com']
    )


class Type10(Enum):
    record = 'record'
    record_sys = 'record-sys'


class V1DomainsRecordsRecordIdPatchResponse(BaseModel):
    createdAt: Optional[float] = None
    creator: str
    domain: str
    id: str
    name: str
    recordType: RecordType
    ttl: Optional[float] = None
    type: Type10
    value: str


class AddedEnum(Enum):
    read_integration_configuration = 'read:integration-configuration'
    read_write_integration_configuration = 'read-write:integration-configuration'
    read_deployment = 'read:deployment'
    read_write_deployment = 'read-write:deployment'
    read_write_deployment_check = 'read-write:deployment-check'
    read_project = 'read:project'
    read_write_project = 'read-write:project'
    read_write_project_env_vars = 'read-write:project-env-vars'
    read_write_global_project_env_vars = 'read-write:global-project-env-vars'
    read_team = 'read:team'
    read_user = 'read:user'
    read_write_log_drain = 'read-write:log-drain'
    read_domain = 'read:domain'
    read_write_domain = 'read-write:domain'
    read_write_edge_config = 'read-write:edge-config'
    read_write_otel_endpoint = 'read-write:otel-endpoint'
    read_monitoring = 'read:monitoring'


class UpgradedEnum(Enum):
    read_integration_configuration = 'read:integration-configuration'
    read_write_integration_configuration = 'read-write:integration-configuration'
    read_deployment = 'read:deployment'
    read_write_deployment = 'read-write:deployment'
    read_write_deployment_check = 'read-write:deployment-check'
    read_project = 'read:project'
    read_write_project = 'read-write:project'
    read_write_project_env_vars = 'read-write:project-env-vars'
    read_write_global_project_env_vars = 'read-write:global-project-env-vars'
    read_team = 'read:team'
    read_user = 'read:user'
    read_write_log_drain = 'read-write:log-drain'
    read_domain = 'read:domain'
    read_write_domain = 'read-write:domain'
    read_write_edge_config = 'read-write:edge-config'
    read_write_otel_endpoint = 'read-write:otel-endpoint'
    read_monitoring = 'read:monitoring'


class Scopes2(BaseModel):
    added: List[AddedEnum]
    upgraded: List[UpgradedEnum]


class ScopesQueueItem(BaseModel):
    confirmedAt: Optional[float] = None
    note: str
    requestedAt: float
    scopes: Scopes2


class Source30(Enum):
    marketplace = 'marketplace'
    deploy_button = 'deploy-button'
    oauth = 'oauth'
    external = 'external'


class Type11(Enum):
    integration_configuration = 'integration-configuration'


class V1IntegrationsConfigurationIdGetResponse1(BaseModel):
    completedAt: Optional[float] = Field(
        None,
        description='A timestamp that tells you when the configuration was installed successfully',
        examples=[1558531915505],
    )
    createdAt: float = Field(
        ...,
        description='A timestamp that tells you when the configuration was created',
        examples=[1558531915505],
    )
    deletedAt: Optional[float] = Field(
        None,
        description='A timestamp that tells you when the configuration was updated.',
        examples=[1558531915505],
    )
    disabledAt: Optional[float] = Field(
        None,
        description="A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.",
        examples=[1558531915505],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the configuration',
        examples=['icfg_3bwCLgxL8qt5kjRLcv2Dit7F'],
    )
    integrationId: str = Field(
        ...,
        description='The unique identifier of the app the configuration was created for',
        examples=['oac_xzpVzcUOgcB1nrVlirtKhbWV'],
    )
    oauthConfiguration: Optional[bool] = Field(
        None,
        description='Will be truthy in those cases where the configuration was created to authorize a client through the OAuth2 flow.',
        examples=[False],
    )
    ownerId: str = Field(
        ...,
        description='The user or team ID that owns the configuration',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )
    projects: Optional[List[str]] = Field(
        None,
        description='When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.',
        examples=[['prj_xQxbutw1HpL6HLYPAzt5h75m8NjO']],
    )
    removedLogDrainsAt: Optional[float] = None
    removedProjectEnvsAt: Optional[float] = None
    removedTokensAt: Optional[float] = None
    removedWebhooksAt: Optional[float] = None
    scopes: List[str] = Field(
        ...,
        description='The resources that are allowed to be accessed by the configuration.',
        examples=[['read:project', 'read-write:log-drain']],
    )
    scopesQueue: Optional[List[ScopesQueueItem]] = None
    slug: str = Field(
        ...,
        description='The slug of the integration the configuration is created for.',
        examples=['slack'],
    )
    source: Optional[Source30] = Field(
        None,
        description='Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.',
        examples=['marketplace'],
    )
    teamId: Optional[str] = Field(
        None,
        description='When the configuration was created for a team, this will show the ID of the team.',
        examples=['team_nLlpyC6RE1qxydlFKbrxDlud'],
    )
    type: Type11
    updatedAt: float = Field(
        ...,
        description='A timestamp that tells you when the configuration was updated.',
        examples=[1558531915505],
    )
    userId: str = Field(
        ...,
        description='The ID of the user that created the configuration.',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )


class ProjectSelection(Enum):
    selected = 'selected'
    all = 'all'


class V1IntegrationsConfigurationIdGetResponse2(BaseModel):
    canConfigureOpenTelemetry: Optional[bool] = None
    completedAt: Optional[float] = Field(
        None,
        description='A timestamp that tells you when the configuration was installed successfully',
        examples=[1558531915505],
    )
    createdAt: float = Field(
        ...,
        description='A timestamp that tells you when the configuration was created',
        examples=[1558531915505],
    )
    disabledAt: Optional[float] = Field(
        None,
        description="A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.",
        examples=[1558531915505],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the configuration',
        examples=['icfg_3bwCLgxL8qt5kjRLcv2Dit7F'],
    )
    integrationId: str = Field(
        ...,
        description='The unique identifier of the app the configuration was created for',
        examples=['oac_xzpVzcUOgcB1nrVlirtKhbWV'],
    )
    oauthConfiguration: Optional[bool] = Field(
        None,
        description='Will be truthy in those cases where the configuration was created to authorize a client through the OAuth2 flow.',
        examples=[False],
    )
    ownerId: str = Field(
        ...,
        description='The user or team ID that owns the configuration',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )
    projectSelection: ProjectSelection = Field(
        ...,
        description='A string representing the permission for projects. Possible values are `all` or `selected`.',
        examples=['all'],
    )
    projects: Optional[List[str]] = Field(
        None,
        description='When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.',
        examples=[['prj_xQxbutw1HpL6HLYPAzt5h75m8NjO']],
    )
    scopes: List[str] = Field(
        ...,
        description='The resources that are allowed to be accessed by the configuration.',
        examples=[['read:project', 'read-write:log-drain']],
    )
    slug: str = Field(
        ...,
        description='The slug of the integration the configuration is created for.',
        examples=['slack'],
    )
    source: Optional[Source30] = Field(
        None,
        description='Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.',
        examples=['marketplace'],
    )
    teamId: Optional[str] = Field(
        None,
        description='When the configuration was created for a team, this will show the ID of the team.',
        examples=['team_nLlpyC6RE1qxydlFKbrxDlud'],
    )
    updatedAt: float = Field(
        ...,
        description='A timestamp that tells you when the configuration was updated.',
        examples=[1558531915505],
    )
    userId: str = Field(
        ...,
        description='The ID of the user that created the configuration.',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )


class V1IntegrationsConfigurationIdGetResponse(
    RootModel[
        Union[
            V1IntegrationsConfigurationIdGetResponse1,
            V1IntegrationsConfigurationIdGetResponse2,
        ]
    ]
):
    root: Union[
        V1IntegrationsConfigurationIdGetResponse1,
        V1IntegrationsConfigurationIdGetResponse2,
    ]


class View(Enum):
    account = 'account'
    project = 'project'


class Scopes3(BaseModel):
    added: List[AddedEnum]
    upgraded: List[UpgradedEnum]


class ScopesQueueItem1(BaseModel):
    confirmedAt: Optional[float] = None
    note: str
    requestedAt: float
    scopes: Scopes3


class V1IntegrationsConfigurationsGetResponseItem(BaseModel):
    completedAt: Optional[float] = Field(
        None,
        description='A timestamp that tells you when the configuration was installed successfully',
        examples=[1558531915505],
    )
    createdAt: float = Field(
        ...,
        description='A timestamp that tells you when the configuration was created',
        examples=[1558531915505],
    )
    deletedAt: Optional[float] = Field(
        None,
        description='A timestamp that tells you when the configuration was updated.',
        examples=[1558531915505],
    )
    disabledAt: Optional[float] = Field(
        None,
        description="A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.",
        examples=[1558531915505],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the configuration',
        examples=['icfg_3bwCLgxL8qt5kjRLcv2Dit7F'],
    )
    integrationId: str = Field(
        ...,
        description='The unique identifier of the app the configuration was created for',
        examples=['oac_xzpVzcUOgcB1nrVlirtKhbWV'],
    )
    oauthConfiguration: Optional[bool] = Field(
        None,
        description='Will be truthy in those cases where the configuration was created to authorize a client through the OAuth2 flow.',
        examples=[False],
    )
    ownerId: str = Field(
        ...,
        description='The user or team ID that owns the configuration',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )
    projects: Optional[List[str]] = Field(
        None,
        description='When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.',
        examples=[['prj_xQxbutw1HpL6HLYPAzt5h75m8NjO']],
    )
    removedLogDrainsAt: Optional[float] = None
    removedProjectEnvsAt: Optional[float] = None
    removedTokensAt: Optional[float] = None
    removedWebhooksAt: Optional[float] = None
    scopes: List[str] = Field(
        ...,
        description='The resources that are allowed to be accessed by the configuration.',
        examples=[['read:project', 'read-write:log-drain']],
    )
    scopesQueue: Optional[List[ScopesQueueItem1]] = None
    slug: str = Field(
        ...,
        description='The slug of the integration the configuration is created for.',
        examples=['slack'],
    )
    source: Optional[Source30] = Field(
        None,
        description='Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.',
        examples=['marketplace'],
    )
    teamId: Optional[str] = Field(
        None,
        description='When the configuration was created for a team, this will show the ID of the team.',
        examples=['team_nLlpyC6RE1qxydlFKbrxDlud'],
    )
    type: Type11
    updatedAt: float = Field(
        ...,
        description='A timestamp that tells you when the configuration was updated.',
        examples=[1558531915505],
    )
    userId: str = Field(
        ...,
        description='The ID of the user that created the configuration.',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )


class Integration(BaseModel):
    assignedBetaLabelAt: Optional[float] = None
    category: str
    flags: Optional[List[str]] = None
    icon: str
    isLegacy: bool
    name: str


class Scopes4(BaseModel):
    added: List[AddedEnum]
    upgraded: List[UpgradedEnum]


class ScopesQueueItem2(BaseModel):
    confirmedAt: Optional[float] = None
    note: str
    requestedAt: float
    scopes: Scopes4


class V1IntegrationsConfigurationsGetResponseItem1(BaseModel):
    completedAt: Optional[float] = Field(
        None,
        description='A timestamp that tells you when the configuration was installed successfully',
        examples=[1558531915505],
    )
    createdAt: float = Field(
        ...,
        description='A timestamp that tells you when the configuration was created',
        examples=[1558531915505],
    )
    deletedAt: Optional[float] = Field(
        None,
        description='A timestamp that tells you when the configuration was updated.',
        examples=[1558531915505],
    )
    disabledAt: Optional[float] = Field(
        None,
        description="A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.",
        examples=[1558531915505],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the configuration',
        examples=['icfg_3bwCLgxL8qt5kjRLcv2Dit7F'],
    )
    integration: Integration
    integrationId: str = Field(
        ...,
        description='The unique identifier of the app the configuration was created for',
        examples=['oac_xzpVzcUOgcB1nrVlirtKhbWV'],
    )
    oauthConfiguration: Optional[bool] = Field(
        None,
        description='Will be truthy in those cases where the configuration was created to authorize a client through the OAuth2 flow.',
        examples=[False],
    )
    ownerId: str = Field(
        ...,
        description='The user or team ID that owns the configuration',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )
    projects: Optional[List[str]] = Field(
        None,
        description='When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.',
        examples=[['prj_xQxbutw1HpL6HLYPAzt5h75m8NjO']],
    )
    removedLogDrainsAt: Optional[float] = None
    removedProjectEnvsAt: Optional[float] = None
    removedTokensAt: Optional[float] = None
    removedWebhooksAt: Optional[float] = None
    scopes: List[str] = Field(
        ...,
        description='The resources that are allowed to be accessed by the configuration.',
        examples=[['read:project', 'read-write:log-drain']],
    )
    scopesQueue: Optional[List[ScopesQueueItem2]] = None
    slug: str = Field(
        ...,
        description='The slug of the integration the configuration is created for.',
        examples=['slack'],
    )
    source: Optional[Source30] = Field(
        None,
        description='Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.',
        examples=['marketplace'],
    )
    teamId: Optional[str] = Field(
        None,
        description='When the configuration was created for a team, this will show the ID of the team.',
        examples=['team_nLlpyC6RE1qxydlFKbrxDlud'],
    )
    type: Type11
    updatedAt: float = Field(
        ...,
        description='A timestamp that tells you when the configuration was updated.',
        examples=[1558531915505],
    )
    userId: str = Field(
        ...,
        description='The ID of the user that created the configuration.',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )


class V1IntegrationsConfigurationsGetResponse(
    RootModel[
        Union[
            List[V1IntegrationsConfigurationsGetResponseItem],
            List[V1IntegrationsConfigurationsGetResponseItem1],
        ]
    ]
):
    root: Union[
        List[V1IntegrationsConfigurationsGetResponseItem],
        List[V1IntegrationsConfigurationsGetResponseItem1],
    ]


class Provider(Enum):
    github = 'github'
    gitlab = 'gitlab'
    bitbucket = 'bitbucket'


class V1IntegrationsGitNamespacesGetResponseItem(BaseModel):
    id: Union[str, float]
    name: Optional[str] = None
    ownerType: str
    provider: str
    slug: str


class V1IntegrationsGitNamespacesGetResponse(
    RootModel[List[V1IntegrationsGitNamespacesGetResponseItem]]
):
    root: List[V1IntegrationsGitNamespacesGetResponseItem]


class GitAccount(BaseModel):
    namespaceId: Union[str, float]
    provider: Provider


class OwnerType(Enum):
    team = 'team'
    user = 'user'


class Repo(BaseModel):
    defaultBranch: str
    id: Union[str, float]
    name: str
    namespace: str
    ownerType: OwnerType
    private: bool
    slug: str
    updatedAt: float
    url: str


class V1IntegrationsSearchRepoGetResponse(BaseModel):
    gitAccount: GitAccount
    repos: List[Repo]


class DeliveryFormat(Enum):
    json = 'json'
    ndjson = 'ndjson'
    syslog = 'syslog'


class Environment(Enum):
    preview = 'preview'
    production = 'production'


class Source34(Enum):
    static = 'static'
    lambda_ = 'lambda'
    build = 'build'
    edge = 'edge'
    external = 'external'


class Type14(Enum):
    json = 'json'
    ndjson = 'ndjson'
    syslog = 'syslog'


class V1LogDrainsGetResponseItem(BaseModel):
    branch: Optional[str] = Field(
        None, description='The branch to filter logs by', examples=['main']
    )
    configurationId: Optional[str] = Field(
        None, description='The ID of the related integration configuration'
    )
    createdAt: float = Field(
        ...,
        description='A number containing the date when the log-drain was created in in milliseconds',
        examples=[1567024758130],
    )
    deliveryFormat: DeliveryFormat = Field(
        ...,
        description='The log-drain defined delivery format',
        examples=[['lambda', 'build']],
    )
    environment: Optional[Environment] = Field(
        None, description='The environment to filter logs by', examples=['production']
    )
    headers: Optional[Dict[str, str]] = Field(
        None,
        description='Construct a type with a set of properties K of type T',
        examples=[{'foo': 'bar'}],
    )
    id: str = Field(
        ..., description='The log-drain id', examples=['ld_GflD6EYyo7F4ViYS']
    )
    ownerId: str = Field(
        ...,
        description='The unique ID of the team the deployment belongs to',
        examples=['team_ZspSRT4ljIEEmMHgoDwKWDei'],
    )
    projectIds: Optional[List[str]] = Field(
        None,
        description='The ID of the projects the deployment is associated with',
        examples=[['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB']],
    )
    sources: Optional[List[Source34]] = Field(
        None,
        description='The log-drain defined sources',
        examples=[['lambda', 'build']],
    )
    type: Type14 = Field(
        ...,
        description='The log-drain defined delivery format',
        examples=[['lambda', 'build']],
    )
    url: str = Field(
        ...,
        description='A string with the URL of the log-drain',
        examples=['https://my-log-drain.com'],
    )


class V1LogDrainsGetResponse(RootModel[List[V1LogDrainsGetResponseItem]]):
    root: List[V1LogDrainsGetResponseItem]


class DeliveryFormat1(Enum):
    json = 'json'
    ndjson = 'ndjson'


class ProjectId(RootModel[constr(pattern=r'^[a-zA-z0-9_]+$')]):
    root: constr(pattern=r'^[a-zA-z0-9_]+$')


class V1LogDrainsPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    branch: Optional[str] = Field(
        None, description='The branch regexp of log drain', examples=['feature/*']
    )
    deliveryFormat: DeliveryFormat1 = Field(
        ..., description='The delivery log format', examples=['json']
    )
    environment: Optional[Environment] = Field(
        None, description='The environment of log drain', examples=['production']
    )
    headers: Optional[Dict[str, str]] = Field(
        None, description='Headers to be sent together with the request'
    )
    projectIds: Optional[List[ProjectId]] = Field(None, max_length=50, min_length=1)
    sources: List[Source34] = Field(..., min_length=1)
    url: AnyUrl = Field(..., description='The log drain url')


class DeliveryFormat2(Enum):
    json = 'json'
    ndjson = 'ndjson'
    syslog = 'syslog'


class V1LogDrainsPostResponse(BaseModel):
    branch: Optional[str] = Field(
        None, description='The branch to filter logs by', examples=['main']
    )
    configurationId: Optional[str] = Field(
        None, description='The ID of the related integration configuration'
    )
    createdAt: float = Field(
        ...,
        description='A number containing the date when the log-drain was created in in milliseconds',
        examples=[1567024758130],
    )
    deliveryFormat: DeliveryFormat2 = Field(
        ...,
        description='The log-drain defined delivery format',
        examples=[['lambda', 'build']],
    )
    environment: Optional[Environment] = Field(
        None, description='The environment to filter logs by', examples=['production']
    )
    headers: Optional[Dict[str, str]] = Field(
        None,
        description='The key/value pairs that will be sent as headers to the log-drain',
        examples=[{'foo': 'bar'}],
    )
    id: str = Field(
        ..., description='The log-drain id', examples=['ld_GflD6EYyo7F4ViYS']
    )
    ownerId: str = Field(
        ...,
        description='The unique ID of the team the deployment belongs to',
        examples=['team_ZspSRT4ljIEEmMHgoDwKWDei'],
    )
    projectIds: Optional[List[str]] = Field(
        None,
        description='The ID of the projects the deployment is associated with',
        examples=[['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB']],
    )
    secret: Optional[str] = Field(
        None, description='The secret to validate the log-drain payload'
    )
    sources: Optional[List[Source34]] = Field(
        None,
        description='The log-drain defined sources',
        examples=[['lambda', 'build']],
    )
    type: Type14 = Field(
        ...,
        description='The log-drain defined delivery format',
        examples=[['lambda', 'build']],
    )
    url: str = Field(
        ...,
        description='A string with the URL of the log-drain',
        examples=['https://my-log-drain.com'],
    )


class V1LogDrainsIdGetResponse(BaseModel):
    branch: Optional[str] = Field(
        None, description='The branch to filter logs by', examples=['main']
    )
    configurationId: Optional[str] = Field(
        None, description='The ID of the related integration configuration'
    )
    createdAt: float = Field(
        ...,
        description='A number containing the date when the log-drain was created in in milliseconds',
        examples=[1567024758130],
    )
    deliveryFormat: DeliveryFormat2 = Field(
        ...,
        description='The log-drain defined delivery format',
        examples=[['lambda', 'build']],
    )
    environment: Optional[Environment] = Field(
        None, description='The environment to filter logs by', examples=['production']
    )
    headers: Optional[Dict[str, str]] = Field(
        None,
        description='Construct a type with a set of properties K of type T',
        examples=[{'foo': 'bar'}],
    )
    id: str = Field(
        ..., description='The log-drain id', examples=['ld_GflD6EYyo7F4ViYS']
    )
    ownerId: str = Field(
        ...,
        description='The unique ID of the team the deployment belongs to',
        examples=['team_ZspSRT4ljIEEmMHgoDwKWDei'],
    )
    projectIds: Optional[List[str]] = Field(
        None,
        description='The ID of the projects the deployment is associated with',
        examples=[['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB']],
    )
    sources: Optional[List[Source34]] = Field(
        None,
        description='The log-drain defined sources',
        examples=[['lambda', 'build']],
    )
    type: Type14 = Field(
        ...,
        description='The log-drain defined delivery format',
        examples=[['lambda', 'build']],
    )
    url: str = Field(
        ...,
        description='A string with the URL of the log-drain',
        examples=['https://my-log-drain.com'],
    )


class TargetEnum(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'


class Target(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'


class Type17(Enum):
    secret = 'secret'
    system = 'system'
    encrypted = 'encrypted'
    plain = 'plain'
    sensitive = 'sensitive'


class V1ProjectsIdOrNameEnvIdGetResponse(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: str
    target: Optional[Union[List[TargetEnum], Target]] = None
    type: Type17
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: str


class V1TeamsPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[constr(max_length=256)] = Field(
        None,
        description='The desired name for the Team. It will be generated from the provided slug if nothing is provided',
        examples=['A Random Team'],
    )
    slug: constr(max_length=48) = Field(
        ..., description='The desired slug for the Team', examples=['a-random-team']
    )


class V1TeamsPostResponse(BaseModel):
    id: str = Field(
        ...,
        description='Id of the created team',
        examples=['team_nLlpyC6RE1qxqglFKbrMxlud'],
    )


class Reason1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: str = Field(
        ..., description='Description of the reason why the team is being deleted.'
    )
    slug: str = Field(
        ..., description='Idenitifier slug of the reason why the team is being deleted.'
    )


class V1TeamsTeamIdDeleteRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    reasons: Optional[List[Reason1]] = Field(
        None,
        description='Optional array of objects that describe the reason why the team is being deleted.',
    )


class V1TeamsTeamIdDeleteResponse(BaseModel):
    id: str = Field(
        ...,
        description='The ID of the deleted Team',
        examples=['team_LLHUOMOoDlqOp8wPE4kFo9pE'],
    )


class V1TeamsTeamIdInvitesInviteIdDeleteResponse(BaseModel):
    id: str = Field(..., description='ID of the team.')


class V1TeamsTeamIdMembersPostRequest(BaseModel):
    email: Optional[EmailStr] = Field(
        None,
        description='The email address of the user to invite',
        examples=['john@example.com'],
    )
    role: Optional[Any] = None
    uid: Optional[str] = Field(
        None,
        description='The id of the user to invite',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )


class V1TeamsTeamIdMembersPostResponse(BaseModel):
    email: str = Field(
        ..., description='The email of the invited user', examples=['john@user.co']
    )
    role: str = Field(
        ..., description='The role used for the invitation', examples=['MEMBER']
    )
    uid: str = Field(
        ...,
        description='The ID of the invited user',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )
    username: str = Field(
        ..., description='The username of the invited user', examples=['john-doe']
    )


class V1TeamsTeamIdMembersTeamsJoinPostRequest(BaseModel):
    inviteCode: Optional[str] = Field(
        None,
        description='The invite code to join the team.',
        examples=['fisdh38aejkeivn34nslfore9vjtn4ls'],
    )
    teamId: Optional[str] = Field(
        None, description='The team ID.', examples=['team_3oNwMKqLHqEBh02CTPsrbNbe']
    )


class V1TeamsTeamIdMembersTeamsJoinPostResponse(BaseModel):
    from_: str = Field(
        ...,
        alias='from',
        description='The origin of how the user joined.',
        examples=['email'],
    )
    name: str = Field(
        ..., description='The name of the team the user joined.', examples=['My Team']
    )
    slug: str = Field(
        ..., description='The slug of the team the user joined.', examples=['my-team']
    )
    teamId: str = Field(
        ...,
        description='The ID of the team the user joined.',
        examples=['team_LLHUOMOoDlqOp8wPE4kFo9pE'],
    )


class V1TeamsTeamIdMembersUidDeleteResponse(BaseModel):
    id: str = Field(..., description='ID of the team.')


class Confirmed(Enum):
    boolean_True = True


class JoinedFrom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ssoUserId: None = None


class V1TeamsTeamIdMembersUidPatchRequest(BaseModel):
    confirmed: Optional[Confirmed] = Field(
        None,
        description='Accept a user who requested access to the team.',
        examples=[True],
    )
    joinedFrom: Optional[JoinedFrom2] = None
    role: Optional[str] = Field(
        ['MEMBER', 'VIEWER'],
        description='The role in the team of the member.',
        examples=[['MEMBER', 'VIEWER']],
    )


class V1TeamsTeamIdMembersUidPatchResponse(BaseModel):
    id: str = Field(..., description='ID of the team.')


class Origin4(Enum):
    import_ = 'import'
    teams = 'teams'
    github = 'github'
    gitlab = 'gitlab'
    bitbucket = 'bitbucket'
    feedback = 'feedback'


class JoinedFrom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    commitId: Optional[str] = Field(
        None,
        description='The commit sha if the origin is a git provider.',
        examples=['f498d25d8bd654b578716203be73084b31130cd7'],
    )
    gitUserId: Optional[Union[str, float]] = Field(
        None,
        description='The ID of the Git account of the user who requests access.',
        examples=[103053343],
    )
    gitUserLogin: Optional[str] = Field(
        None,
        description='The login name for the Git account of the user who requests access.',
        examples=['jane-doe'],
    )
    origin: Origin4 = Field(
        ..., description='The origin of the request.', examples=['github']
    )
    repoId: Optional[str] = Field(
        None,
        description='The ID of the repository for the given Git provider.',
        examples=['67753070'],
    )
    repoPath: Optional[str] = Field(
        None,
        description='The path to the repository for the given Git provider.',
        examples=['jane-doe/example'],
    )


class V1TeamsTeamIdRequestPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    joinedFrom: JoinedFrom3


class Bitbucket(BaseModel):
    login: Optional[str] = None


class Github(BaseModel):
    login: Optional[str] = None


class Gitlab(BaseModel):
    login: Optional[str] = None


class Origin5(Enum):
    import_ = 'import'
    teams = 'teams'
    github = 'github'
    gitlab = 'gitlab'
    bitbucket = 'bitbucket'
    feedback = 'feedback'
    mail = 'mail'
    link = 'link'
    saml = 'saml'
    dsync = 'dsync'


class JoinedFrom4(BaseModel):
    commitId: Optional[str] = None
    dsyncConnectedAt: Optional[float] = None
    dsyncUserId: Optional[str] = None
    gitUserId: Optional[Union[str, float]] = None
    gitUserLogin: Optional[str] = None
    idpUserId: Optional[str] = None
    origin: Origin5
    repoId: Optional[str] = None
    repoPath: Optional[str] = None
    ssoConnectedAt: Optional[float] = None
    ssoUserId: Optional[str] = None


class V1TeamsTeamIdRequestPostResponse(BaseModel):
    accessRequestedAt: Optional[float] = None
    bitbucket: Optional[Bitbucket] = None
    confirmed: Optional[bool] = None
    github: Optional[Github] = None
    gitlab: Optional[Gitlab] = None
    joinedFrom: Optional[JoinedFrom4] = None
    teamName: str
    teamSlug: str


class Origin6(Enum):
    import_ = 'import'
    mail = 'mail'
    link = 'link'
    teams = 'teams'
    github = 'github'
    gitlab = 'gitlab'
    bitbucket = 'bitbucket'
    saml = 'saml'
    dsync = 'dsync'
    feedback = 'feedback'


class JoinedFrom5(BaseModel):
    commitId: Optional[str] = None
    dsyncConnectedAt: Optional[float] = None
    dsyncUserId: Optional[str] = None
    gitUserId: Optional[Union[str, float]] = None
    gitUserLogin: Optional[str] = None
    idpUserId: Optional[str] = None
    origin: Origin6
    repoId: Optional[str] = None
    repoPath: Optional[str] = None
    ssoConnectedAt: Optional[float] = None
    ssoUserId: Optional[str] = None


class V1TeamsTeamIdRequestUserIdGetResponse(BaseModel):
    accessRequestedAt: float = Field(
        ...,
        description='Timestamp in milliseconds when the user requested access to the team.',
        examples=[1588720733602],
    )
    bitbucket: Optional[Bitbucket] = Field(
        ..., description='Map of the connected Bitbucket account.'
    )
    confirmed: bool = Field(
        ...,
        description="Current status of the membership. Will be `true` if confirmed, if pending it'll be `false`.",
        examples=[False],
    )
    github: Optional[Github] = Field(
        ..., description='Map of the connected GitHub account.'
    )
    gitlab: Optional[Gitlab] = Field(
        ..., description='Map of the connected GitLab account.'
    )
    joinedFrom: JoinedFrom5 = Field(
        ..., description='A map that describes the origin from where the user joined.'
    )
    teamName: str = Field(
        ..., description='The name of the team.', examples=['My Team']
    )
    teamSlug: str = Field(
        ..., description='The slug of the team.', examples=['my-team']
    )


class Reason2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: str = Field(
        ...,
        description='Description of the reason why the User account is being deleted.',
    )
    slug: str = Field(
        ...,
        description='Idenitifier slug of the reason why the User account is being deleted.',
    )


class V1UserDeleteRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    reasons: Optional[List[Reason2]] = Field(
        None,
        description='Optional array of objects that describe the reason why the User account is being deleted.',
    )


class V1UserDeleteResponse(BaseModel):
    email: str = Field(
        ..., description='Email address of the User who has initiated deletion.'
    )
    id: str = Field(
        ..., description='Unique identifier of the User who has initiated deletion.'
    )
    message: str = Field(
        ...,
        description='User deletion progress status.',
        examples=['Verification email sent'],
    )


class Event(Enum):
    domain_created = 'domain.created'
    deployment_created = 'deployment.created'
    deployment_error = 'deployment.error'
    deployment_canceled = 'deployment.canceled'
    deployment_succeeded = 'deployment.succeeded'
    deployment_ready = 'deployment.ready'
    deployment_check_rerequested = 'deployment.check-rerequested'
    integration_configuration_permission_upgraded = (
        'integration-configuration.permission-upgraded'
    )
    integration_configuration_removed = 'integration-configuration.removed'
    integration_configuration_scope_change_confirmed = (
        'integration-configuration.scope-change-confirmed'
    )
    project_created = 'project.created'
    project_removed = 'project.removed'
    deployment_checks_completed = 'deployment-checks-completed'
    deployment_ready_1 = 'deployment-ready'
    deployment_prepared = 'deployment-prepared'
    deployment_error_1 = 'deployment-error'
    deployment_check_rerequested_1 = 'deployment-check-rerequested'
    deployment_canceled_1 = 'deployment-canceled'
    project_created_1 = 'project-created'
    project_removed_1 = 'project-removed'
    domain_created_1 = 'domain-created'
    deployment = 'deployment'
    integration_configuration_permission_updated = (
        'integration-configuration-permission-updated'
    )
    integration_configuration_removed_1 = 'integration-configuration-removed'
    integration_configuration_scope_change_confirmed_1 = (
        'integration-configuration-scope-change-confirmed'
    )


class Framework(Enum):
    blitzjs = 'blitzjs'
    nextjs = 'nextjs'
    gatsby = 'gatsby'
    remix = 'remix'
    astro = 'astro'
    hexo = 'hexo'
    eleventy = 'eleventy'
    docusaurus_2 = 'docusaurus-2'
    docusaurus = 'docusaurus'
    preact = 'preact'
    solidstart = 'solidstart'
    dojo = 'dojo'
    ember = 'ember'
    vue = 'vue'
    scully = 'scully'
    ionic_angular = 'ionic-angular'
    angular = 'angular'
    polymer = 'polymer'
    svelte = 'svelte'
    sveltekit = 'sveltekit'
    sveltekit_1 = 'sveltekit-1'
    ionic_react = 'ionic-react'
    create_react_app = 'create-react-app'
    gridsome = 'gridsome'
    umijs = 'umijs'
    sapper = 'sapper'
    saber = 'saber'
    stencil = 'stencil'
    nuxtjs = 'nuxtjs'
    redwoodjs = 'redwoodjs'
    hugo = 'hugo'
    jekyll = 'jekyll'
    brunch = 'brunch'
    middleman = 'middleman'
    zola = 'zola'
    hydrogen = 'hydrogen'
    vite = 'vite'
    vitepress = 'vitepress'
    vuepress = 'vuepress'
    parcel = 'parcel'
    sanity = 'sanity'


class ProjectsMetadatum(BaseModel):
    framework: Optional[Framework] = None
    id: str
    latestDeployment: Optional[str] = None
    name: str


class V1WebhooksGetResponseItem(BaseModel):
    createdAt: float = Field(
        ...,
        description='A number containing the date when the webhook was created in in milliseconds',
        examples=[1567024758130],
    )
    events: List[Event] = Field(
        ..., description='The webhooks events', examples=['deployment.created']
    )
    id: str = Field(
        ..., description='The webhook id', examples=['account_hook_GflD6EYyo7F4ViYS']
    )
    ownerId: str = Field(
        ...,
        description='The unique ID of the team the webhook belongs to',
        examples=['ZspSRT4ljIEEmMHgoDwKWDei'],
    )
    projectIds: Optional[List[str]] = Field(
        None,
        description='The ID of the projects the webhook is associated with',
        examples=[['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB']],
    )
    projectsMetadata: Optional[List[ProjectsMetadatum]]
    updatedAt: float = Field(
        ...,
        description='A number containing the date when the webhook was updated in in milliseconds',
        examples=[1567024758130],
    )
    url: str = Field(
        ...,
        description='A string with the URL of the webhook',
        examples=['https://my-webhook.com'],
    )


class V1WebhooksGetResponseItem1(BaseModel):
    createdAt: float = Field(
        ...,
        description='A number containing the date when the webhook was created in in milliseconds',
        examples=[1567024758130],
    )
    events: List[Event] = Field(
        ..., description='The webhooks events', examples=['deployment.created']
    )
    id: str = Field(
        ..., description='The webhook id', examples=['account_hook_GflD6EYyo7F4ViYS']
    )
    ownerId: str = Field(
        ...,
        description='The unique ID of the team the webhook belongs to',
        examples=['ZspSRT4ljIEEmMHgoDwKWDei'],
    )
    projectIds: Optional[List[str]] = Field(
        None,
        description='The ID of the projects the webhook is associated with',
        examples=[['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB']],
    )
    updatedAt: float = Field(
        ...,
        description='A number containing the date when the webhook was updated in in milliseconds',
        examples=[1567024758130],
    )
    url: str = Field(
        ...,
        description='A string with the URL of the webhook',
        examples=['https://my-webhook.com'],
    )


class V1WebhooksGetResponse(
    RootModel[Union[List[V1WebhooksGetResponseItem], List[V1WebhooksGetResponseItem1]]]
):
    root: Union[List[V1WebhooksGetResponseItem], List[V1WebhooksGetResponseItem1]]


class Event2(Enum):
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_DomainCreate = (
        'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.DomainCreate'
    )
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_DeploymentCreate = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.DeploymentCreate'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_DeploymentErro = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.DeploymentErro'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_DeploymentCancele = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.DeploymentCancele'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_DeploymentSucceede = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.DeploymentSucceede'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_DeploymentRead = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.DeploymentRead'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_DeploymentCheckRerequeste = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.DeploymentCheckRerequeste'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_IntegrationConfigurationPermissionUpgrade = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.IntegrationConfigurationPermissionUpgrade'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_IntegrationConfigurationRemove = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.IntegrationConfigurationRemove'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_IntegrationConfigurationScopeChangeConfirme = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.IntegrationConfigurationScopeChangeConfirme'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_ProjectCreate = (
        'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.ProjectCreate'
    )
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_ProjectRemove = (
        'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.ProjectRemove'
    )
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyDeploymentChecksComplete = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyDeploymentChecksComplete'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyDeploymentRead = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyDeploymentRead'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyDeploymentPrepare = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyDeploymentPrepare'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyDeploymentErro = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyDeploymentErro'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyDeploymentCheckRerequeste = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyDeploymentCheckRerequeste'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyDeploymentCancele = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyDeploymentCancele'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyProjectCreate = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyProjectCreate'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyProjectRemove = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyProjectRemove'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyDomainCreate = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyDomainCreate'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyDeploymen = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyDeploymen'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyIntegrationConfigurationPermissionUpdate = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyIntegrationConfigurationPermissionUpdate'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyIntegrationConfigurationRemove = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyIntegrationConfigurationRemove'
    mport___vercel_path0_utils_webhooks_webhooks_types___WebhookName_LegacyIntegrationConfigurationScopeChangeConfirme = 'mport("/vercel/path0/utils/webhooks/webhooks/types").WebhookName.LegacyIntegrationConfigurationScopeChangeConfirme'


class V1WebhooksPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    events: List[Event2] = Field(..., min_length=1)
    projectIds: Optional[List[ProjectId]] = Field(None, max_length=50, min_length=1)
    url: AnyUrl


class Event3(Enum):
    domain_created = 'domain.created'
    deployment_created = 'deployment.created'
    deployment_error = 'deployment.error'
    deployment_canceled = 'deployment.canceled'
    deployment_succeeded = 'deployment.succeeded'
    deployment_ready = 'deployment.ready'
    deployment_check_rerequested = 'deployment.check-rerequested'
    integration_configuration_permission_upgraded = (
        'integration-configuration.permission-upgraded'
    )
    integration_configuration_removed = 'integration-configuration.removed'
    integration_configuration_scope_change_confirmed = (
        'integration-configuration.scope-change-confirmed'
    )
    project_created = 'project.created'
    project_removed = 'project.removed'
    deployment_checks_completed = 'deployment-checks-completed'
    deployment_ready_1 = 'deployment-ready'
    deployment_prepared = 'deployment-prepared'
    deployment_error_1 = 'deployment-error'
    deployment_check_rerequested_1 = 'deployment-check-rerequested'
    deployment_canceled_1 = 'deployment-canceled'
    project_created_1 = 'project-created'
    project_removed_1 = 'project-removed'
    domain_created_1 = 'domain-created'
    deployment = 'deployment'
    integration_configuration_permission_updated = (
        'integration-configuration-permission-updated'
    )
    integration_configuration_removed_1 = 'integration-configuration-removed'
    integration_configuration_scope_change_confirmed_1 = (
        'integration-configuration-scope-change-confirmed'
    )


class V1WebhooksPostResponse(BaseModel):
    createdAt: float = Field(
        ...,
        description='A number containing the date when the webhook was created in in milliseconds',
        examples=[1567024758130],
    )
    events: List[Event3] = Field(
        ..., description='The webhooks events', examples=['deployment.created']
    )
    id: str = Field(
        ..., description='The webhook id', examples=['account_hook_GflD6EYyo7F4ViYS']
    )
    ownerId: str = Field(
        ...,
        description='The unique ID of the team the webhook belongs to',
        examples=['ZspSRT4ljIEEmMHgoDwKWDei'],
    )
    projectIds: Optional[List[str]] = Field(
        None,
        description='The ID of the projects the webhook is associated with',
        examples=[['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB']],
    )
    secret: str = Field(..., description='The webhook secret used to sign the payload')
    updatedAt: float = Field(
        ...,
        description='A number containing the date when the webhook was updated in in milliseconds',
        examples=[1567024758130],
    )
    url: str = Field(
        ...,
        description='A string with the URL of the webhook',
        examples=['https://my-webhook.com'],
    )


class V1WebhooksIdGetResponse(BaseModel):
    createdAt: float = Field(
        ...,
        description='A number containing the date when the webhook was created in in milliseconds',
        examples=[1567024758130],
    )
    events: List[Event3] = Field(
        ..., description='The webhooks events', examples=['deployment.created']
    )
    id: str = Field(
        ..., description='The webhook id', examples=['account_hook_GflD6EYyo7F4ViYS']
    )
    ownerId: str = Field(
        ...,
        description='The unique ID of the team the webhook belongs to',
        examples=['ZspSRT4ljIEEmMHgoDwKWDei'],
    )
    projectIds: Optional[List[str]] = Field(
        None,
        description='The ID of the projects the webhook is associated with',
        examples=[['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB']],
    )
    updatedAt: float = Field(
        ...,
        description='A number containing the date when the webhook was updated in in milliseconds',
        examples=[1567024758130],
    )
    url: str = Field(
        ...,
        description='A string with the URL of the webhook',
        examples=['https://my-webhook.com'],
    )


class TargetEnum1(Enum):
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Productio = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Productio'
    )
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Previe = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Previe'
    )
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Developmen = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Developmen'
    )


class Type18(Enum):
    system = 'system'
    secret = 'secret'
    encrypted = 'encrypted'
    plain = 'plain'
    sensitive = 'sensitive'


class V10ProjectsIdOrNameEnvPostRequest1(BaseModel):
    gitBranch: Optional[constr(max_length=250)] = Field(
        None,
        description='The git branch of the environment variable',
        examples=['feature-1'],
    )
    key: str = Field(
        ..., description='The name of the environment variable', examples=['API_URL']
    )
    target: List[TargetEnum1] = Field(
        ...,
        description='The target environment of the environment variable',
        examples=[['production', 'preview']],
    )
    type: Type18 = Field(
        ..., description='The type of environment variable', examples=['plain']
    )
    value: str = Field(
        ...,
        description='The value of the environment variable',
        examples=['https://api.vercel.com'],
    )


class V10ProjectsIdOrNameEnvPostRequestItem(BaseModel):
    gitBranch: Optional[constr(max_length=250)] = Field(
        None,
        description='The git branch of the environment variable',
        examples=['feature-1'],
    )
    key: str = Field(
        ..., description='The name of the environment variable', examples=['API_URL']
    )
    target: List[TargetEnum1] = Field(
        ...,
        description='The target environment of the environment variable',
        examples=[['production', 'preview']],
    )
    type: Type18 = Field(
        ..., description='The type of environment variable', examples=['plain']
    )
    value: str = Field(
        ...,
        description='The value of the environment variable',
        examples=['https://api.vercel.com'],
    )


class V10ProjectsIdOrNameEnvPostRequest(
    RootModel[
        Union[
            V10ProjectsIdOrNameEnvPostRequest1,
            List[V10ProjectsIdOrNameEnvPostRequestItem],
        ]
    ]
):
    root: Union[
        V10ProjectsIdOrNameEnvPostRequest1, List[V10ProjectsIdOrNameEnvPostRequestItem]
    ]


class TargetEnum3(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'
    preview_2 = 'preview'
    development_2 = 'development'


class Target1(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'
    preview_2 = 'preview'
    development_2 = 'development'


class Type20(Enum):
    secret = 'secret'
    system = 'system'
    encrypted = 'encrypted'
    plain = 'plain'
    sensitive = 'sensitive'


class V10ProjectsIdOrNameEnvPostResponseItem(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: str
    target: Optional[Union[List[TargetEnum3], Target1]] = None
    type: Type20
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: str


class V10ProjectsIdOrNameEnvPostResponse1(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: Optional[str] = None
    system: Optional[bool] = None
    target: Optional[Union[List[TargetEnum3], Target1]] = None
    type: Optional[Type20] = None
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: Optional[str] = None


class V10ProjectsIdOrNameEnvPostResponse(
    RootModel[
        Union[
            List[V10ProjectsIdOrNameEnvPostResponseItem],
            V10ProjectsIdOrNameEnvPostResponse1,
        ]
    ]
):
    root: Union[
        List[V10ProjectsIdOrNameEnvPostResponseItem],
        V10ProjectsIdOrNameEnvPostResponse1,
    ]


class Created(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: Optional[str] = None
    system: Optional[bool] = None
    target: Optional[Union[List[TargetEnum3], Target1]] = None
    type: Optional[Type20] = None
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: Optional[str] = None


class CreatedItem(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: Optional[str] = None
    system: Optional[bool] = None
    target: Optional[Union[List[TargetEnum3], Target1]] = None
    type: Optional[Type20] = None
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: Optional[str] = None


class ValueEnum(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'
    preview_2 = 'preview'
    development_2 = 'development'


class Error(BaseModel):
    action: Optional[str] = None
    code: str
    envVarId: Optional[str] = None
    envVarKey: Optional[str] = None
    gitBranch: Optional[str] = None
    key: Optional[str] = None
    link: Optional[str] = None
    message: str
    project: Optional[str] = None
    target: Optional[Union[List[TargetEnum3], Target1]] = None
    value: Optional[Union[str, List[ValueEnum]]] = None


class FailedItem(BaseModel):
    error: Error


class V10ProjectsIdOrNameEnvPostResponse2(BaseModel):
    created: Union[Created, List[CreatedItem]]
    failed: List[FailedItem]


class Config(BaseModel):
    distDir: Optional[str] = None
    forceBuildIn: Optional[str] = None
    reuseWorkPathFrom: Optional[str] = None
    zeroConfig: Optional[bool] = None


class Edge(BaseModel):
    regions: Optional[List[str]] = Field(
        ...,
        description='The regions where the edge function will be invoked. Only exists if the edge function as a regional edge function, see: https://vercel.com/docs/concepts/edge-network/regions#setting-edge-function-regions',
    )


class Lambda(BaseModel):
    deployedTo: List[str]
    functionName: str
    layers: Optional[List[str]] = None
    memorySize: Optional[float] = None
    timeout: Optional[float] = None


class Type24(Enum):
    lambda_ = 'lambda'
    file = 'file'
    edge = 'edge'


class OutputItem(BaseModel):
    digest: str = Field(..., description='The SHA1 of the file')
    edge: Optional[Edge] = Field(
        None, description='Exists if the output is an edge function.'
    )
    lambda_: Optional[Lambda] = Field(
        None,
        alias='lambda',
        description='If the output is a Serverless Function, an object containing the name, location and memory size of the function',
    )
    mode: float = Field(..., description='The POSIX file permissions')
    path: str = Field(
        ..., description='The absolute path of the file or Serverless Function'
    )
    size: Optional[float] = Field(None, description='The size of the file in bytes')
    type: Optional[Type24] = Field(None, description='The type of the output')


class ReadyState(Enum):
    BUILDING = 'BUILDING'
    ERROR = 'ERROR'
    INITIALIZING = 'INITIALIZING'
    QUEUED = 'QUEUED'
    READY = 'READY'
    CANCELED = 'CANCELED'
    UPLOADING = 'UPLOADING'
    DEPLOYING = 'DEPLOYING'
    ARCHIVED = 'ARCHIVED'


class Build(BaseModel):
    config: Optional[Config] = Field(
        None,
        description="An object that contains the Build's configuration",
        examples=[{'zeroConfig': True}],
    )
    copiedFrom: Optional[str] = None
    createdAt: Optional[float] = Field(
        None,
        description='The time at which the Build was created',
        examples=[1567071524208],
    )
    createdIn: Optional[str] = Field(
        None,
        description='The region where the Build was first created',
        examples=['sfo1'],
    )
    deployedAt: Optional[float] = Field(
        None,
        description='The time at which the Build was deployed',
        examples=[1567071598563],
    )
    deploymentId: str = Field(
        ...,
        description='The unique identifier of the deployment',
        examples=['dpl_BRGyoU2Jzzwx7myBnqv3xjRDD2GnHTwUWyFybnrUvjDD'],
    )
    entrypoint: str = Field(
        ..., description='The entrypoint of the deployment', examples=['api/index.js']
    )
    fingerprint: Optional[str] = Field(
        None,
        description='If the Build uses the `@vercel/static` Runtime, it contains a hashed string of all outputs',
        examples=[None],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the Build',
        examples=['bld_q5fj68jh7eewfe8'],
    )
    output: List[OutputItem] = Field(
        ...,
        description='A list of outputs for the Build that can be either Serverless Functions or static files',
    )
    readyState: ReadyState = Field(
        ...,
        description='The state of the deployment depending on the process of deploying, or if it is ready or in an error state',
        examples=['READY'],
    )
    readyStateAt: Optional[float] = Field(
        None,
        description='The time at which the Build state was last modified',
        examples=[1567024758130],
    )
    scheduledAt: Optional[float] = Field(
        None,
        description='The time at which the Build was scheduled to be built',
        examples=[1567024756543],
    )
    use: Optional[str] = Field(
        None,
        description='The Runtime the Build used to generate the output',
        examples=['@vercel/node'],
    )


class V11DeploymentsDeploymentIdBuildsGetResponse(BaseModel):
    builds: List[Build]


class AliasError(BaseModel):
    code: str
    message: str


class AliasWarning(BaseModel):
    action: Optional[str] = None
    code: str
    link: Optional[str] = None
    message: str


class Build1(BaseModel):
    env: List[str] = Field(
        ...,
        description='The keys of the environment variables that were assigned during the build phase.',
        examples=[['MY_ENV_VAR']],
    )


class Build2(BaseModel):
    config: Optional[Dict[str, str]] = Field(
        None,
        description="An object containing the deployment's metadata",
        examples=[{'foo': 'bar'}],
    )
    src: Optional[str] = None
    use: str


class ChecksConclusion(Enum):
    succeeded = 'succeeded'
    failed = 'failed'
    skipped = 'skipped'
    canceled = 'canceled'


class ChecksState(Enum):
    registered = 'registered'
    running = 'running'
    completed = 'completed'


class Creator(BaseModel):
    uid: str = Field(
        ...,
        description='The ID of the user that created the deployment',
        examples=['96SnxkFiMyVKsK3pnoHfx3Hz'],
    )
    username: Optional[str] = Field(
        None,
        description='The username of the user that created the deployment',
        examples=['john-doe'],
    )


class OwnerType1(Enum):
    user = 'user'
    team = 'team'


class Type25(Enum):
    gitlab = 'gitlab'


class GitRepo(BaseModel):
    defaultBranch: str
    name: str
    namespace: str
    ownerType: OwnerType1
    path: str
    private: bool
    projectId: float
    type: Type25
    url: str


class Type26(Enum):
    github = 'github'


class GitRepo1(BaseModel):
    defaultBranch: str
    name: str
    org: str
    ownerType: OwnerType1
    path: str
    private: bool
    repo: str
    repoId: float
    repoOwnerId: str
    type: Type26


class Type27(Enum):
    bitbucket = 'bitbucket'


class GitRepo2(BaseModel):
    defaultBranch: str
    name: str
    owner: str
    ownerType: OwnerType1
    path: str
    private: bool
    repoUuid: str
    slug: str
    type: Type27
    workspaceUuid: str


class Type28(Enum):
    github = 'github'


class GitSource(BaseModel):
    prId: Optional[float] = None
    ref: Optional[str] = None
    repoId: Union[str, float]
    sha: Optional[str] = None
    type: Type28


class GitSource1(BaseModel):
    org: str
    prId: Optional[float] = None
    ref: Optional[str] = None
    repo: str
    sha: Optional[str] = None
    type: Type28


class Type30(Enum):
    gitlab = 'gitlab'


class GitSource2(BaseModel):
    prId: Optional[float] = None
    projectId: Union[str, float]
    ref: Optional[str] = None
    sha: Optional[str] = None
    type: Type30


class Type31(Enum):
    bitbucket = 'bitbucket'


class GitSource3(BaseModel):
    prId: Optional[float] = None
    ref: Optional[str] = None
    repoUuid: str
    sha: Optional[str] = None
    type: Type31
    workspaceUuid: Optional[str] = None


class GitSource4(BaseModel):
    owner: str
    prId: Optional[float] = None
    ref: Optional[str] = None
    sha: Optional[str] = None
    slug: str
    type: Type31


class Type33(Enum):
    custom = 'custom'


class GitSource5(BaseModel):
    gitUrl: str
    ref: str
    sha: str
    type: Type33


class Type34(Enum):
    github = 'github'


class GitSource6(BaseModel):
    org: Optional[str] = None
    ref: str
    repo: Optional[str] = None
    repoId: float
    sha: str
    type: Type34


class Type35(Enum):
    gitlab = 'gitlab'


class GitSource7(BaseModel):
    projectId: float
    ref: str
    sha: str
    type: Type35


class Type36(Enum):
    bitbucket = 'bitbucket'


class GitSource8(BaseModel):
    owner: Optional[str] = None
    ref: str
    repoUuid: str
    sha: str
    slug: Optional[str] = None
    type: Type36
    workspaceUuid: str


class OutputItem1(BaseModel):
    functionName: str
    path: str


class ReadyState1(Enum):
    INITIALIZING = 'INITIALIZING'
    BUILDING = 'BUILDING'
    READY = 'READY'
    ERROR = 'ERROR'


class Lambda1(BaseModel):
    createdAt: Optional[float] = None
    entrypoint: Optional[str] = None
    id: str
    output: List[OutputItem1]
    readyState: Optional[ReadyState1] = None
    readyStateAt: Optional[float] = None


class Plan1(Enum):
    hobby = 'hobby'
    enterprise = 'enterprise'
    pro = 'pro'
    oss = 'oss'


class ReadyState2(Enum):
    INITIALIZING = 'INITIALIZING'
    BUILDING = 'BUILDING'
    READY = 'READY'
    ERROR = 'ERROR'
    QUEUED = 'QUEUED'
    CANCELED = 'CANCELED'


class Type37(Enum):
    host = 'host'


class Has(BaseModel):
    type: Type37
    value: str


class Type38(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Has1(BaseModel):
    key: str
    type: Type38
    value: Optional[str] = None


class Locale(BaseModel):
    cookie: Optional[str] = None
    redirect: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )


class Type39(Enum):
    host = 'host'


class Missing(BaseModel):
    type: Type39
    value: str


class Type40(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Missing1(BaseModel):
    key: str
    type: Type40
    value: Optional[str] = None


class Routes(BaseModel):
    caseSensitive: Optional[bool] = None
    check: Optional[bool] = None
    continue_: Optional[bool] = Field(None, alias='continue')
    dest: Optional[str] = None
    has: Optional[List[Union[Has, Has1]]] = None
    headers: Optional[Dict[str, str]] = None
    important: Optional[bool] = None
    locale: Optional[Locale] = None
    methods: Optional[List[str]] = None
    middleware: Optional[float] = Field(
        None,
        description='A middleware index in the `middleware` key under the build result',
    )
    middlewarePath: Optional[str] = Field(
        None,
        description='A middleware key within the `output` key under the build result. Overrides a `middleware` definition.',
    )
    middlewareRawSrc: Optional[List[str]] = Field(
        None, description='The original middleware matchers.'
    )
    missing: Optional[List[Union[Missing, Missing1]]] = None
    override: Optional[bool] = None
    src: str
    status: Optional[float] = None


class Handle(Enum):
    filesystem = 'filesystem'
    hit = 'hit'
    miss = 'miss'
    rewrite = 'rewrite'
    error = 'error'
    resource = 'resource'


class Routes1(BaseModel):
    dest: Optional[str] = None
    handle: Handle
    src: Optional[str] = None
    status: Optional[float] = None


class Middleware(Enum):
    number_0 = 0


class Routes2(BaseModel):
    continue_: bool = Field(..., alias='continue')
    middleware: Middleware
    src: str


class Source38(Enum):
    cli = 'cli'
    git = 'git'
    import_ = 'import'
    import_repo = 'import/repo'
    clone_repo = 'clone/repo'


class Target6(Enum):
    staging = 'staging'
    production = 'production'


class Team1(BaseModel):
    id: str = Field(
        ...,
        description='The ID of the team owner',
        examples=['team_LLHUOMOoDlqOp8wPE4kFo9pE'],
    )
    name: str = Field(
        ..., description='The name of the team owner', examples=['FSociety']
    )
    slug: str = Field(
        ..., description='The slug of the team owner', examples=['fsociety']
    )


class Type41(Enum):
    LAMBDAS = 'LAMBDAS'


class Version(Enum):
    number_2 = 2


class V12DeploymentsIdCancelPatchResponse(BaseModel):
    alias: List[str] = Field(
        ...,
        description='A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation',
        examples=[[]],
    )
    aliasAssigned: bool = Field(
        ...,
        description='A boolean that will be true when the aliases from the alias property were assigned successfully',
        examples=[True],
    )
    aliasAssignedAt: Optional[Union[float, bool]] = None
    aliasError: Optional[AliasError] = Field(
        None,
        description='An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`',
        examples=[None],
    )
    aliasFinal: Optional[str] = None
    aliasWarning: Optional[AliasWarning] = None
    automaticAliases: Optional[List[str]] = None
    bootedAt: float
    build: Build1
    buildErrorAt: Optional[float] = None
    buildingAt: float
    builds: Optional[List[Build2]] = None
    canceledAt: Optional[float] = None
    checksConclusion: Optional[ChecksConclusion] = None
    checksState: Optional[ChecksState] = None
    createdAt: float = Field(
        ...,
        description='A number containing the date when the deployment was created in milliseconds',
        examples=[1540257589405],
    )
    createdIn: str = Field(
        ...,
        description='The region where the deployment was first created',
        examples=['sfo1'],
    )
    creator: Creator = Field(
        ..., description='Information about the deployment creator'
    )
    env: List[str] = Field(
        ...,
        description='The keys of the environment variables that were assigned during runtime',
        examples=[['MY_SECRET']],
    )
    errorCode: Optional[str] = None
    errorLink: Optional[str] = None
    errorMessage: Optional[str] = None
    errorStep: Optional[str] = None
    functions: Optional[Dict[str, Any]] = Field(
        None,
        description='An object used to configure your Serverless Functions',
        examples=[{'api/test.js': {'memory': 3008}}],
    )
    gitRepo: Optional[Union[GitRepo, GitRepo1, GitRepo2]] = None
    gitSource: Optional[
        Union[
            GitSource,
            GitSource1,
            GitSource2,
            GitSource3,
            GitSource4,
            GitSource5,
            GitSource6,
            GitSource7,
            GitSource8,
        ]
    ] = None
    id: str = Field(
        ...,
        description='A string holding the unique ID of the deployment',
        examples=['dpl_89qyp1cskzkLrVicDaZoDbjyHuDJ'],
    )
    inspectorUrl: Optional[str] = Field(
        ...,
        description='Vercel URL to inspect the deployment.',
        examples=['https://vercel.com/acme/nextjs/J1hXN00qjUeoYfpEEf7dnDtpSiVq'],
    )
    isInConcurrentBuildsQueue: bool = Field(
        ...,
        description='Is the deployment currently queued waiting for a Concurrent Build Slot to be available',
        examples=[False],
    )
    lambdas: Optional[List[Lambda1]] = None
    meta: Dict[str, str] = Field(
        ...,
        description="An object containing the deployment's metadata",
        examples=[{'foo': 'bar'}],
    )
    monorepoManager: Optional[str] = Field(
        None,
        description='An monorepo manager that was used for the deployment',
        examples=['turbo'],
    )
    name: str = Field(
        ...,
        description='The name of the project associated with the deployment at the time that the deployment was created',
        examples=['my-project'],
    )
    ownerId: str = Field(
        ...,
        description='The unique ID of the user or team the deployment belongs to',
        examples=['ZspSRT4ljIEEmMHgoDwKWDei'],
    )
    plan: Plan1 = Field(
        ...,
        description='The pricing plan the deployment was made under',
        examples=['pro'],
    )
    previewCommentsEnabled: Optional[bool] = Field(
        None,
        description='Whether or not preview comments are enabled for the deployment',
        examples=[False],
    )
    projectId: str = Field(
        ...,
        description='The ID of the project the deployment is associated with',
        examples=['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB'],
    )
    public: bool = Field(
        ...,
        description='A boolean representing if the deployment is public or not. By default this is `false`',
        examples=[False],
    )
    readyState: ReadyState2 = Field(
        ...,
        description='The state of the deployment depending on the process of deploying, or if it is ready or in an error state',
        examples=['READY'],
    )
    regions: List[str] = Field(
        ..., description='The regions the deployment exists in', examples=[['sfo1']]
    )
    routes: Optional[List[Union[Routes, Routes1, Routes2]]] = Field(
        ...,
        description='A list of routes objects used to rewrite paths to point towards other internal or external paths',
        examples=[[{'dest': 'https://docs.example.com', 'src': '/docs'}]],
    )
    source: Optional[Source38] = Field(
        None, description='Where was the deployment created from', examples=['cli']
    )
    target: Optional[Target6] = Field(
        None,
        description='If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned',
        examples=[None],
    )
    team: Optional[Team1] = Field(
        None, description='The team that owns the deployment if any'
    )
    type: Type41
    url: str = Field(
        ...,
        description='A string with the unique URL of the deployment',
        examples=['my-instant-deployment-3ij3cxz9qr.now.sh'],
    )
    userAliases: Optional[List[str]] = Field(
        None,
        description='An array of domains that were provided by the user when creating the Deployment.',
        examples=[['sub1.example.com', 'sub2.example.com']],
    )
    version: Version = Field(
        ...,
        description='The platform version that was used to create the deployment.',
        examples=[2],
    )


class ForceNew(Enum):
    field_0 = '0'
    field_1 = '1'


class SkipAutoDetectionConfirmation(Enum):
    field_0 = '0'
    field_1 = '1'


class Alia(RootModel[constr(max_length=253)]):
    root: constr(max_length=253)


class Build3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    env: Optional[Dict[str, constr(max_length=65536)]] = Field(
        None,
        description="An object containing the deployment's environment variable names and values to be passed to Builds. Secrets can be referenced by prefixing the value with `@`",
        examples=[{'A_SECRET': '@a-secret'}],
    )


class Build4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    config: Optional[Dict[str, Any]] = Field(
        None,
        description='Optionally, an object including arbitrary metadata to be passed to the Builder',
    )
    src: Optional[constr(max_length=4096)] = Field(
        None,
        description='A glob expression or pathname. If more than one file is resolved, one build will be created per matched file. It can include `*` and `**`',
    )
    use: constr(max_length=256) = Field(
        ...,
        description='An npm module to be installed by the build process. It can include a semver compatible version (e.g.: `@org/proj@1`)',
    )


class Cron(BaseModel):
    path: constr(pattern=r'^/.*', max_length=512)
    schedule: constr(max_length=256)


class Encoding(Enum):
    base64 = 'base64'
    utf_8 = 'utf-8'


class Files(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: str = Field(
        ...,
        description='The file content, it could be either a `base64` (useful for images, etc.) of the files or the plain content for source code',
    )
    encoding: Optional[Encoding] = Field(
        None,
        description='The file content encoding, it could be either a base64 (useful for images, etc.) of the files or the plain text for source code.',
    )
    file: str = Field(
        ...,
        description='The file name including the whole path',
        examples=['folder/file.js'],
    )


class Files1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: str = Field(
        ...,
        description='The file path relative to the project root',
        examples=['folder/file.js'],
    )
    sha: Optional[str] = Field(
        None,
        description='The file contents hashed with SHA1, used to check the integrity',
    )
    size: Optional[int] = Field(None, description='The file size in bytes')


class Framework1(Enum):
    NoneType_None = None
    blitzjs = 'blitzjs'
    nextjs = 'nextjs'
    gatsby = 'gatsby'
    remix = 'remix'
    astro = 'astro'
    hexo = 'hexo'
    eleventy = 'eleventy'
    docusaurus_2 = 'docusaurus-2'
    docusaurus = 'docusaurus'
    preact = 'preact'
    solidstart = 'solidstart'
    dojo = 'dojo'
    ember = 'ember'
    vue = 'vue'
    scully = 'scully'
    ionic_angular = 'ionic-angular'
    angular = 'angular'
    polymer = 'polymer'
    svelte = 'svelte'
    sveltekit = 'sveltekit'
    sveltekit_1 = 'sveltekit-1'
    ionic_react = 'ionic-react'
    create_react_app = 'create-react-app'
    gridsome = 'gridsome'
    umijs = 'umijs'
    sapper = 'sapper'
    saber = 'saber'
    stencil = 'stencil'
    nuxtjs = 'nuxtjs'
    redwoodjs = 'redwoodjs'
    hugo = 'hugo'
    jekyll = 'jekyll'
    brunch = 'brunch'
    middleman = 'middleman'
    zola = 'zola'
    hydrogen = 'hydrogen'
    vite = 'vite'
    vitepress = 'vitepress'
    vuepress = 'vuepress'
    parcel = 'parcel'
    sanity = 'sanity'


class Functions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    excludeFiles: Optional[constr(max_length=256)] = Field(
        None,
        description='A glob pattern to match files that should be excluded from your Serverless Function. If you’re using a Community Runtime, the behavior might vary.',
    )
    includeFiles: Optional[constr(max_length=256)] = Field(
        None,
        description='A glob pattern to match files that should be included in your Serverless Function. If you’re using a Community Runtime, the behavior might vary.',
    )
    maxDuration: Optional[confloat(ge=1.0, le=900.0)] = Field(
        None,
        description='An integer defining how long your Serverless Function should be allowed to run on every request in seconds (between 1 and the maximum limit of your plan).',
    )
    memory: Optional[confloat(ge=128.0, le=3008.0)] = Field(
        None,
        description='An integer defining the memory your Serverless Function should be provided with (between 128 and 3008).',
    )
    runtime: Optional[constr(max_length=256)] = Field(
        None, description='The npm package name of a Runtime, including its version'
    )


class Git(BaseModel):
    deploymentEnabled: Optional[Union[bool, Dict[str, bool]]] = Field(
        None,
        description='Specifies the branches that will not trigger an auto-deployment when committing to them. Any non specified branch is `true` by default.',
        examples=[{'main': False}],
    )


class GitMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    commitAuthorName: Optional[str] = Field(
        None, description='The name of the author of the commit', examples=['kyliau']
    )
    commitMessage: Optional[str] = Field(
        None,
        description='The commit message',
        examples=['add method to measure Interaction to Next Paint (INP) (#36490)'],
    )
    commitRef: Optional[str] = Field(
        None, description='The branch on which the commit was made', examples=['main']
    )
    commitSha: Optional[str] = Field(
        None,
        description='The hash of the commit',
        examples=['dc36199b2234c6586ebe05ec94078a895c707e29'],
    )
    dirty: Optional[bool] = Field(
        None,
        description='Whether or not there have been modifications to the working tree since the latest commit',
        examples=[True],
    )
    remoteUrl: str = Field(
        ...,
        description="The git repository's remote origin url",
        examples=['https://github.com/vercel/next.js'],
    )


class Type42(Enum):
    github = 'github'


class GitSource9(BaseModel):
    ref: str
    repoId: Union[float, str]
    sha: Optional[str] = None
    type: Type42


class GitSource10(BaseModel):
    org: str
    ref: str
    repo: str
    sha: Optional[str] = None
    type: Type42


class Type44(Enum):
    gitlab = 'gitlab'


class GitSource11(BaseModel):
    projectId: Union[float, str]
    ref: str
    sha: Optional[str] = None
    type: Type44


class Type45(Enum):
    bitbucket = 'bitbucket'


class GitSource12(BaseModel):
    ref: str
    repoUuid: str
    sha: Optional[str] = None
    type: Type45
    workspaceUuid: Optional[str] = None


class GitSource13(BaseModel):
    owner: str
    ref: str
    sha: Optional[str] = None
    slug: str
    type: Type45


class Type47(Enum):
    host = 'host'


class Has2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type47 = Field(..., description='The type of request element to check')
    value: constr(max_length=4096) = Field(
        ...,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Type48(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Has3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: constr(max_length=4096) = Field(
        ..., description='The name of the element contained in the particular type'
    )
    type: Type48 = Field(..., description='The type of request element to check')
    value: Optional[constr(max_length=4096)] = Field(
        None,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Header1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: constr(max_length=4096)
    value: constr(max_length=4096)


class Type49(Enum):
    host = 'host'


class Missing2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type49 = Field(..., description='The type of request element to check')
    value: constr(max_length=4096) = Field(
        ...,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Type50(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Missing3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: constr(max_length=4096) = Field(
        ..., description='The name of the element contained in the particular type'
    )
    type: Type50 = Field(..., description='The type of request element to check')
    value: Optional[constr(max_length=4096)] = Field(
        None,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Header(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    has: Optional[List[Union[Has2, Has3]]] = Field(
        None,
        description='An array of requirements that are needed to match',
        max_length=16,
    )
    headers: List[Header1] = Field(
        ...,
        description='An array of key/value pairs representing each response header.',
        max_length=1024,
    )
    missing: Optional[List[Union[Missing2, Missing3]]] = Field(
        None,
        description='An array of requirements that are needed to match',
        max_length=16,
    )
    source: constr(max_length=4096) = Field(
        ...,
        description='A pattern that matches each incoming pathname (excluding querystring)',
    )


class ProjectSettings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    buildCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The build command for this project. When `null` is used this value will be automatically detected',
    )
    commandForIgnoringBuildStep: Optional[constr(max_length=256)] = None
    devCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The dev command for this project. When `null` is used this value will be automatically detected',
    )
    framework: Optional[Framework1] = Field(
        None,
        description='The framework that is being used for this project. When `null` is used no framework is selected',
    )
    installCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The install command for this project. When `null` is used this value will be automatically detected',
    )
    outputDirectory: Optional[constr(max_length=256)] = Field(
        None,
        description='The output directory of the project. When `null` is used this value will be automatically detected',
    )
    rootDirectory: Optional[constr(max_length=256)] = Field(
        None,
        description='The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root',
    )
    serverlessFunctionRegion: Optional[constr(max_length=4)] = Field(
        None, description='The region to deploy Serverless Functions in this project'
    )
    skipGitConnectDuringLink: Optional[bool] = Field(
        None,
        description='Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.',
    )
    sourceFilesOutsideRootDirectory: Optional[bool] = Field(
        None,
        description='Indicates if there are source files outside of the root directory, typically used for monorepos',
    )


class Type51(Enum):
    host = 'host'


class Has4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type51 = Field(..., description='The type of request element to check')
    value: constr(max_length=4096) = Field(
        ...,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Type52(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Has5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: constr(max_length=4096) = Field(
        ..., description='The name of the element contained in the particular type'
    )
    type: Type52 = Field(..., description='The type of request element to check')
    value: Optional[constr(max_length=4096)] = Field(
        None,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Type53(Enum):
    host = 'host'


class Missing4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type53 = Field(..., description='The type of request element to check')
    value: constr(max_length=4096) = Field(
        ...,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Type54(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Missing5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: constr(max_length=4096) = Field(
        ..., description='The name of the element contained in the particular type'
    )
    type: Type54 = Field(..., description='The type of request element to check')
    value: Optional[constr(max_length=4096)] = Field(
        None,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Redirect(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    destination: constr(max_length=4096) = Field(
        ...,
        description='A location destination defined as an absolute pathname or external URL.',
    )
    has: Optional[List[Union[Has4, Has5]]] = Field(
        None,
        description='An array of requirements that are needed to match',
        max_length=16,
    )
    missing: Optional[List[Union[Missing4, Missing5]]] = Field(
        None,
        description='An array of requirements that are needed to match',
        max_length=16,
    )
    permanent: Optional[bool] = Field(
        None,
        description='A boolean to toggle between permanent and temporary redirect. When `true`, the status code is `308`. When `false` the status code is `307`.',
    )
    source: constr(max_length=4096) = Field(
        ...,
        description='A pattern that matches each incoming pathname (excluding querystring).',
    )


class Region(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class Type55(Enum):
    host = 'host'


class Has6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type55 = Field(..., description='The type of request element to check')
    value: constr(max_length=4096) = Field(
        ...,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Type56(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Has7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: constr(max_length=4096) = Field(
        ..., description='The name of the element contained in the particular type'
    )
    type: Type56 = Field(..., description='The type of request element to check')
    value: Optional[constr(max_length=4096)] = Field(
        None,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Type57(Enum):
    host = 'host'


class Missing6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type57 = Field(..., description='The type of request element to check')
    value: constr(max_length=4096) = Field(
        ...,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Type58(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Missing7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: constr(max_length=4096) = Field(
        ..., description='The name of the element contained in the particular type'
    )
    type: Type58 = Field(..., description='The type of request element to check')
    value: Optional[constr(max_length=4096)] = Field(
        None,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Rewrite(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    destination: constr(max_length=4096) = Field(
        ...,
        description='An absolute pathname to an existing resource or an external URL.',
    )
    has: Optional[List[Union[Has6, Has7]]] = Field(
        None,
        description='An array of requirements that are needed to match',
        max_length=16,
    )
    missing: Optional[List[Union[Missing6, Missing7]]] = Field(
        None,
        description='An array of requirements that are needed to match',
        max_length=16,
    )
    source: constr(max_length=4096) = Field(
        ...,
        description='A pattern that matches each incoming pathname (excluding querystring).',
    )


class Type59(Enum):
    host = 'host'


class Has8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type59 = Field(..., description='The type of request element to check')
    value: constr(max_length=4096) = Field(
        ...,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Type60(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Has9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: constr(max_length=4096) = Field(
        ..., description='The name of the element contained in the particular type'
    )
    type: Type60 = Field(..., description='The type of request element to check')
    value: Optional[constr(max_length=4096)] = Field(
        None,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Locale1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cookie: Optional[constr(max_length=4096)] = None
    default: Optional[constr(max_length=4096)] = None
    path: Optional[constr(max_length=4096)] = None
    redirect: Optional[Dict[str, constr(max_length=4096)]] = None
    value: Optional[constr(max_length=4096)] = None


class Method(RootModel[constr(max_length=32)]):
    root: constr(max_length=32)


class Type61(Enum):
    host = 'host'


class Missing8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type61 = Field(..., description='The type of request element to check')
    value: constr(max_length=4096) = Field(
        ...,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Type62(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Missing9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: constr(max_length=4096) = Field(
        ..., description='The name of the element contained in the particular type'
    )
    type: Type62 = Field(..., description='The type of request element to check')
    value: Optional[constr(max_length=4096)] = Field(
        None,
        description='A regular expression used to match the value. Named groups can be used in the destination',
    )


class Routes3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    caseSensitive: Optional[bool] = None
    check: Optional[bool] = None
    continue_: Optional[bool] = Field(None, alias='continue')
    dest: Optional[constr(max_length=4096)] = None
    has: Optional[List[Union[Has8, Has9]]] = Field(
        None,
        description='An array of requirements that are needed to match',
        max_length=16,
    )
    headers: Optional[Dict[str, constr(max_length=4096)]] = None
    important: Optional[bool] = None
    locale: Optional[Locale1] = None
    methods: Optional[List[Method]] = Field(None, max_length=10)
    middleware: Optional[float] = None
    middlewarePath: Optional[str] = None
    middlewareRawSrc: Optional[List[str]] = None
    missing: Optional[List[Union[Missing8, Missing9]]] = Field(
        None,
        description='An array of requirements that are needed to match',
        max_length=16,
    )
    override: Optional[bool] = None
    src: constr(max_length=4096)
    status: Optional[conint(ge=100, le=999)] = None
    user: Optional[bool] = None


class Handle1(Enum):
    error = 'error'
    filesystem = 'filesystem'
    hit = 'hit'
    miss = 'miss'
    resource = 'resource'
    rewrite = 'rewrite'


class Routes4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    handle: Handle1


class V13DeploymentsPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_schema: Optional[str] = Field(
        None,
        alias='$schema',
        description='Ignored. Can be set to get completions, validations and documentation in some editors.',
        examples=[['https://openapi.vercel.sh/vercel.json']],
    )
    alias: Optional[List[Alia]] = Field(
        None,
        description='Aliases that will get assigned when the deployment is `READY` and the target is `production`. The client needs to make a `GET` request to its API to ensure the assignment',
        examples=[['example.vercel.app']],
        max_length=50,
    )
    build: Optional[Build3] = Field(
        None,
        description='An object containing another object with information to be passed to the Build Process',
    )
    buildCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The build command for this project. When `null` is used this value will be automatically detected',
    )
    builds: Optional[List[Build4]] = Field(
        None,
        description='A list of build descriptions whose src references valid source files.',
        max_length=128,
        min_length=0,
    )
    cleanUrls: Optional[bool] = Field(
        None,
        description='When set to `true`, all HTML files and Serverless Functions will have their extension removed. When visiting a path that ends with the extension, a 308 response will redirect the client to the extensionless path.',
    )
    crons: Optional[List[Cron]] = Field(
        None,
        description='An array of cron jobs that should be created for production Deployments.',
        max_length=20,
    )
    deploymentId: Optional[str] = Field(
        None, description='An deployment id for an existing deployment to redeploy'
    )
    devCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The dev command for this project. When `null` is used this value will be automatically detected',
    )
    env: Optional[Dict[str, constr(max_length=65536)]] = Field(
        None,
        description="An object containing the deployment's environment variable names and values. Secrets can be referenced by prefixing the value with `@`",
        examples=[{'A_SECRET': '@a-secret'}],
    )
    files: Optional[List[Union[Files, Files1]]] = Field(
        None, description='A list of objects with the files to be deployed'
    )
    framework: Optional[Framework1] = Field(
        None,
        description='The framework that is being used for this project. When `null` is used no framework is selected',
    )
    functions: Optional[Dict[str, Functions]] = Field(
        None,
        description='An object describing custom options for your Serverless Functions. Each key must be glob pattern that matches the paths of the Serverless Functions you would like to customize (like `api/*.js` or `api/test.js`).',
        examples=[{'src/pages/**': {'maxDuration': 6, 'memory': 1024}}],
    )
    git: Optional[Git] = None
    gitMetadata: Optional[GitMetadata] = Field(
        None, description='Populates initial git metadata for different git providers.'
    )
    gitSource: Optional[
        Union[GitSource9, GitSource10, GitSource11, GitSource12, GitSource13]
    ] = Field(
        None,
        description='Defines the Git Repository source to be deployed. This property can not be used in combination with `files`.',
    )
    headers: Optional[List[Header]] = Field(
        None, description='A list of header definitions.', max_length=1024
    )
    ignoreCommand: Optional[constr(max_length=256)] = None
    installCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The install command for this project. When `null` is used this value will be automatically detected',
    )
    meta: Optional[Dict[str, constr(max_length=65536)]] = Field(
        None,
        description="An object containing the deployment's metadata. Multiple key-value pairs can be attached to a deployment",
        examples=[{'foo': 'bar'}],
    )
    monorepoManager: Optional[str] = Field(
        None,
        description='The monorepo manager that is being used for this deployment. When `null` is used no monorepo manager is selected',
    )
    name: str = Field(
        ...,
        description='A string with the project name used in the deployment URL',
        examples=['my-instant-deployment'],
    )
    outputDirectory: Optional[constr(max_length=256)] = Field(
        None,
        description='The output directory of the project. When `null` is used this value will be automatically detected',
    )
    project: Optional[str] = Field(
        None,
        description='The target project identifier in which the deployment will be created. When defined, this parameter overrides name',
        examples=['my-deployment-project'],
    )
    projectSettings: Optional[ProjectSettings] = Field(
        None,
        description='Project settings that will be applied to the deployment. It is required for the first deployment of a project and will be saved for any following deployments',
    )
    public: Optional[bool] = Field(
        None,
        description="Whether a deployment's source and logs are available publicly",
    )
    redirects: Optional[List[Redirect]] = Field(
        None,
        description='A list of redirect definitions.',
        max_length=1024,
        title='Redirects',
    )
    regions: Optional[List[Region]] = Field(
        None,
        description="An array of the regions the deployment's Serverless Functions should be deployed to",
        examples=[['sfo', 'bru']],
        max_length=1000,
        min_length=1,
    )
    rewrites: Optional[List[Rewrite]] = Field(
        None, description='A list of rewrite definitions.', max_length=1024
    )
    routes: Optional[List[Union[Routes3, Routes4]]] = Field(
        None,
        description='A list of routes objects used to rewrite paths to point towards other internal or external paths',
        examples=[[{'dest': 'https://docs.example.com', 'src': '/docs'}]],
        max_length=1024,
    )
    target: Optional[Target6] = Field(
        None,
        description='Either not defined, `staging`, or `production`. If `staging`, a staging alias in the format `<project>.<team>.now.sh` will be assigned. If `production`, any aliases defined in `alias` will be assigned',
    )
    trailingSlash: Optional[bool] = Field(
        None,
        description='When `false`, visiting a path that ends with a forward slash will respond with a `308` status code and redirect to the path without the trailing slash.',
    )
    withLatestCommit: Optional[bool] = Field(
        None,
        description="When `true` and `deploymentId` is passed in, the sha from the previous deployment's `gitSource` is removed forcing the latest commit to be used.",
    )


class Build5(BaseModel):
    env: List[str] = Field(
        ...,
        description='The keys of the environment variables that were assigned during the build phase.',
        examples=[['MY_ENV_VAR']],
    )


class OwnerType4(Enum):
    team = 'team'
    user = 'user'


class Type63(Enum):
    gitlab = 'gitlab'


class GitRepo3(BaseModel):
    defaultBranch: str
    name: str
    namespace: str
    ownerType: OwnerType4
    path: str
    private: bool
    projectId: float
    type: Type63
    url: str


class Type64(Enum):
    github = 'github'


class GitRepo4(BaseModel):
    defaultBranch: str
    name: str
    org: str
    ownerType: OwnerType4
    path: str
    private: bool
    repo: str
    repoId: float
    repoOwnerId: str
    type: Type64


class Type65(Enum):
    bitbucket = 'bitbucket'


class GitRepo5(BaseModel):
    defaultBranch: str
    name: str
    owner: str
    ownerType: OwnerType4
    path: str
    private: bool
    repoUuid: str
    slug: str
    type: Type65
    workspaceUuid: str


class Type66(Enum):
    github = 'github'


class GitSource14(BaseModel):
    prId: Optional[float] = None
    ref: Optional[str] = None
    repoId: Union[str, float]
    sha: Optional[str] = None
    type: Type66


class GitSource15(BaseModel):
    org: str
    prId: Optional[float] = None
    ref: Optional[str] = None
    repo: str
    sha: Optional[str] = None
    type: Type66


class Type68(Enum):
    gitlab = 'gitlab'


class GitSource16(BaseModel):
    prId: Optional[float] = None
    projectId: Union[str, float]
    ref: Optional[str] = None
    sha: Optional[str] = None
    type: Type68


class Type69(Enum):
    bitbucket = 'bitbucket'


class GitSource17(BaseModel):
    prId: Optional[float] = None
    ref: Optional[str] = None
    repoUuid: str
    sha: Optional[str] = None
    type: Type69
    workspaceUuid: Optional[str] = None


class GitSource18(BaseModel):
    owner: str
    prId: Optional[float] = None
    ref: Optional[str] = None
    sha: Optional[str] = None
    slug: str
    type: Type69


class Type71(Enum):
    custom = 'custom'


class GitSource19(BaseModel):
    gitUrl: str
    ref: str
    sha: str
    type: Type71


class Type72(Enum):
    github = 'github'


class GitSource20(BaseModel):
    org: Optional[str] = None
    ref: str
    repo: Optional[str] = None
    repoId: float
    sha: str
    type: Type72


class Type73(Enum):
    gitlab = 'gitlab'


class GitSource21(BaseModel):
    projectId: float
    ref: str
    sha: str
    type: Type73


class Type74(Enum):
    bitbucket = 'bitbucket'


class GitSource22(BaseModel):
    owner: Optional[str] = None
    ref: str
    repoUuid: str
    sha: str
    slug: Optional[str] = None
    type: Type74
    workspaceUuid: str


class ReadyState3(Enum):
    BUILDING = 'BUILDING'
    ERROR = 'ERROR'
    INITIALIZING = 'INITIALIZING'
    READY = 'READY'


class Lambda2(BaseModel):
    createdAt: Optional[float] = None
    entrypoint: Optional[str] = None
    id: str
    output: List[OutputItem1]
    readyState: Optional[ReadyState3] = None
    readyStateAt: Optional[float] = None


class ReadyState4(Enum):
    QUEUED = 'QUEUED'
    BUILDING = 'BUILDING'
    ERROR = 'ERROR'
    INITIALIZING = 'INITIALIZING'
    READY = 'READY'
    CANCELED = 'CANCELED'


class Type75(Enum):
    host = 'host'


class Has10(BaseModel):
    type: Type75
    value: str


class Type76(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Has11(BaseModel):
    key: str
    type: Type76
    value: Optional[str] = None


class Locale2(BaseModel):
    cookie: Optional[str] = None
    redirect: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )


class Type77(Enum):
    host = 'host'


class Missing10(BaseModel):
    type: Type77
    value: str


class Type78(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Missing11(BaseModel):
    key: str
    type: Type78
    value: Optional[str] = None


class Routes5(BaseModel):
    caseSensitive: Optional[bool] = None
    check: Optional[bool] = None
    continue_: Optional[bool] = Field(None, alias='continue')
    dest: Optional[str] = None
    has: Optional[List[Union[Has10, Has11]]] = None
    headers: Optional[Dict[str, str]] = None
    important: Optional[bool] = None
    locale: Optional[Locale2] = None
    methods: Optional[List[str]] = None
    middleware: Optional[float] = Field(
        None,
        description='A middleware index in the `middleware` key under the build result',
    )
    middlewarePath: Optional[str] = Field(
        None,
        description='A middleware key within the `output` key under the build result. Overrides a `middleware` definition.',
    )
    middlewareRawSrc: Optional[List[str]] = Field(
        None, description='The original middleware matchers.'
    )
    missing: Optional[List[Union[Missing10, Missing11]]] = None
    override: Optional[bool] = None
    src: str
    status: Optional[float] = None


class Handle2(Enum):
    filesystem = 'filesystem'
    hit = 'hit'
    miss = 'miss'
    rewrite = 'rewrite'
    error = 'error'
    resource = 'resource'


class Routes6(BaseModel):
    dest: Optional[str] = None
    handle: Handle2
    src: Optional[str] = None
    status: Optional[float] = None


class Routes7(BaseModel):
    continue_: bool = Field(..., alias='continue')
    middleware: Middleware
    src: str


class Target8(Enum):
    production = 'production'
    staging = 'staging'


class Type79(Enum):
    LAMBDAS = 'LAMBDAS'


class V13DeploymentsPostResponse(BaseModel):
    alias: List[str] = Field(
        ...,
        description='A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation',
        examples=[[]],
    )
    aliasAssigned: bool = Field(
        ...,
        description='A boolean that will be true when the aliases from the alias property were assigned successfully',
        examples=[True],
    )
    aliasAssignedAt: Optional[Union[float, bool]] = None
    aliasError: Optional[AliasError] = Field(
        None,
        description='An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`',
        examples=[None],
    )
    aliasFinal: Optional[str] = None
    aliasWarning: Optional[AliasWarning] = None
    automaticAliases: Optional[List[str]] = None
    bootedAt: float
    build: Build5
    buildErrorAt: Optional[float] = None
    buildingAt: float
    builds: Optional[List[Dict[str, Any]]] = None
    canceledAt: Optional[float] = None
    checksConclusion: Optional[ChecksConclusion] = None
    checksState: Optional[ChecksState] = None
    createdAt: float = Field(
        ...,
        description='A number containing the date when the deployment was created in milliseconds',
        examples=[1540257589405],
    )
    createdIn: str = Field(
        ...,
        description='The region where the deployment was first created',
        examples=['sfo1'],
    )
    creator: Creator = Field(
        ..., description='Information about the deployment creator'
    )
    env: List[str] = Field(
        ...,
        description='The keys of the environment variables that were assigned during runtime',
        examples=[['MY_SECRET']],
    )
    errorCode: Optional[str] = None
    errorLink: Optional[str] = None
    errorMessage: Optional[str] = None
    errorStep: Optional[str] = None
    functions: Optional[Dict[str, Any]] = Field(
        None,
        description='An object used to configure your Serverless Functions',
        examples=[{'api/test.js': {'memory': 3008}}],
    )
    gitRepo: Optional[Union[GitRepo3, GitRepo4, GitRepo5]] = None
    gitSource: Optional[
        Union[
            GitSource14,
            GitSource15,
            GitSource16,
            GitSource17,
            GitSource18,
            GitSource19,
            GitSource20,
            GitSource21,
            GitSource22,
        ]
    ] = None
    id: str = Field(
        ...,
        description='A string holding the unique ID of the deployment',
        examples=['dpl_89qyp1cskzkLrVicDaZoDbjyHuDJ'],
    )
    inspectorUrl: Optional[str] = Field(
        ...,
        description='Vercel URL to inspect the deployment.',
        examples=['https://vercel.com/acme/nextjs/J1hXN00qjUeoYfpEEf7dnDtpSiVq'],
    )
    isInConcurrentBuildsQueue: bool = Field(
        ...,
        description='Is the deployment currently queued waiting for a Concurrent Build Slot to be available',
        examples=[False],
    )
    lambdas: Optional[List[Lambda2]] = None
    meta: Dict[str, str] = Field(
        ...,
        description="An object containing the deployment's metadata",
        examples=[{'foo': 'bar'}],
    )
    monorepoManager: Optional[str] = Field(
        None,
        description='An monorepo manager that was used for the deployment',
        examples=['turbo'],
    )
    name: str = Field(
        ...,
        description='The name of the project associated with the deployment at the time that the deployment was created',
        examples=['my-project'],
    )
    ownerId: str = Field(
        ...,
        description='The unique ID of the user or team the deployment belongs to',
        examples=['ZspSRT4ljIEEmMHgoDwKWDei'],
    )
    plan: Plan1 = Field(
        ...,
        description='The pricing plan the deployment was made under',
        examples=['pro'],
    )
    previewCommentsEnabled: Optional[bool] = Field(
        None,
        description='Whether or not preview comments are enabled for the deployment',
        examples=[False],
    )
    projectId: str = Field(
        ...,
        description='The ID of the project the deployment is associated with',
        examples=['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB'],
    )
    public: bool = Field(
        ...,
        description='A boolean representing if the deployment is public or not. By default this is `false`',
        examples=[False],
    )
    readyState: ReadyState4 = Field(
        ...,
        description='The state of the deployment depending on the process of deploying, or if it is ready or in an error state',
        examples=['READY'],
    )
    regions: List[str] = Field(
        ..., description='The regions the deployment exists in', examples=[['sfo1']]
    )
    routes: Optional[List[Union[Routes5, Routes6, Routes7]]] = Field(
        ...,
        description='A list of routes objects used to rewrite paths to point towards other internal or external paths',
        examples=[[{'dest': 'https://docs.example.com', 'src': '/docs'}]],
    )
    source: Optional[Source38] = Field(
        None, description='Where was the deployment created from', examples=['cli']
    )
    target: Optional[Target8] = Field(
        None,
        description='If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned',
        examples=[None],
    )
    team: Optional[Team1] = Field(
        None, description='The team that owns the deployment if any'
    )
    type: Type79
    url: str = Field(
        ...,
        description='A string with the unique URL of the deployment',
        examples=['my-instant-deployment-3ij3cxz9qr.now.sh'],
    )
    userAliases: Optional[List[str]] = Field(
        None,
        description='An array of domains that were provided by the user when creating the Deployment.',
        examples=[['sub1.example.com', 'sub2.example.com']],
    )
    version: Version = Field(
        ...,
        description='The platform version that was used to create the deployment.',
        examples=[2],
    )


class Type80(Enum):
    gitlab = 'gitlab'


class GitRepo6(BaseModel):
    defaultBranch: str
    name: str
    namespace: str
    ownerType: OwnerType4
    path: str
    private: bool
    projectId: float
    type: Type80
    url: str


class Type81(Enum):
    github = 'github'


class GitRepo7(BaseModel):
    defaultBranch: str
    name: str
    org: str
    ownerType: OwnerType4
    path: str
    private: bool
    repo: str
    repoId: float
    repoOwnerId: str
    type: Type81


class Type82(Enum):
    bitbucket = 'bitbucket'


class GitRepo8(BaseModel):
    defaultBranch: str
    name: str
    owner: str
    ownerType: OwnerType4
    path: str
    private: bool
    repoUuid: str
    slug: str
    type: Type82
    workspaceUuid: str


class Type83(Enum):
    github = 'github'


class GitSource23(BaseModel):
    prId: Optional[float] = None
    ref: Optional[str] = None
    repoId: Union[str, float]
    sha: Optional[str] = None
    type: Type83


class GitSource24(BaseModel):
    org: str
    prId: Optional[float] = None
    ref: Optional[str] = None
    repo: str
    sha: Optional[str] = None
    type: Type83


class Type85(Enum):
    gitlab = 'gitlab'


class GitSource25(BaseModel):
    prId: Optional[float] = None
    projectId: Union[str, float]
    ref: Optional[str] = None
    sha: Optional[str] = None
    type: Type85


class Type86(Enum):
    bitbucket = 'bitbucket'


class GitSource26(BaseModel):
    prId: Optional[float] = None
    ref: Optional[str] = None
    repoUuid: str
    sha: Optional[str] = None
    type: Type86
    workspaceUuid: Optional[str] = None


class GitSource27(BaseModel):
    owner: str
    prId: Optional[float] = None
    ref: Optional[str] = None
    sha: Optional[str] = None
    slug: str
    type: Type86


class Type88(Enum):
    custom = 'custom'


class GitSource28(BaseModel):
    gitUrl: str
    ref: str
    sha: str
    type: Type88


class Type89(Enum):
    github = 'github'


class GitSource29(BaseModel):
    org: Optional[str] = None
    ref: str
    repo: Optional[str] = None
    repoId: float
    sha: str
    type: Type89


class Type90(Enum):
    gitlab = 'gitlab'


class GitSource30(BaseModel):
    projectId: float
    ref: str
    sha: str
    type: Type90


class Type91(Enum):
    bitbucket = 'bitbucket'


class GitSource31(BaseModel):
    owner: Optional[str] = None
    ref: str
    repoUuid: str
    sha: str
    slug: Optional[str] = None
    type: Type91
    workspaceUuid: str


class ReadyState5(Enum):
    BUILDING = 'BUILDING'
    ERROR = 'ERROR'
    INITIALIZING = 'INITIALIZING'
    READY = 'READY'


class Lambda3(BaseModel):
    createdAt: Optional[float] = None
    entrypoint: Optional[str] = None
    id: str
    output: List[OutputItem1]
    readyState: Optional[ReadyState5] = None
    readyStateAt: Optional[float] = None


class ReadyState6(Enum):
    QUEUED = 'QUEUED'
    BUILDING = 'BUILDING'
    ERROR = 'ERROR'
    INITIALIZING = 'INITIALIZING'
    READY = 'READY'
    CANCELED = 'CANCELED'


class Type92(Enum):
    host = 'host'


class Has12(BaseModel):
    type: Type92
    value: str


class Type93(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Has13(BaseModel):
    key: str
    type: Type93
    value: Optional[str] = None


class Type94(Enum):
    host = 'host'


class Missing12(BaseModel):
    type: Type94
    value: str


class Type95(Enum):
    header = 'header'
    cookie = 'cookie'
    query = 'query'


class Missing13(BaseModel):
    key: str
    type: Type95
    value: Optional[str] = None


class Routes8(BaseModel):
    caseSensitive: Optional[bool] = None
    check: Optional[bool] = None
    continue_: Optional[bool] = Field(None, alias='continue')
    dest: Optional[str] = None
    has: Optional[List[Union[Has12, Has13]]] = None
    headers: Optional[Dict[str, str]] = None
    important: Optional[bool] = None
    locale: Optional[Locale2] = None
    methods: Optional[List[str]] = None
    middleware: Optional[float] = Field(
        None,
        description='A middleware index in the `middleware` key under the build result',
    )
    middlewarePath: Optional[str] = Field(
        None,
        description='A middleware key within the `output` key under the build result. Overrides a `middleware` definition.',
    )
    middlewareRawSrc: Optional[List[str]] = Field(
        None, description='The original middleware matchers.'
    )
    missing: Optional[List[Union[Missing12, Missing13]]] = None
    override: Optional[bool] = None
    src: str
    status: Optional[float] = None


class Routes9(BaseModel):
    dest: Optional[str] = None
    handle: Handle2
    src: Optional[str] = None
    status: Optional[float] = None


class Routes10(BaseModel):
    continue_: bool = Field(..., alias='continue')
    middleware: Middleware
    src: str


class Type96(Enum):
    LAMBDAS = 'LAMBDAS'


class V13DeploymentsIdOrUrlGetResponse1(BaseModel):
    alias: List[str] = Field(
        ...,
        description='A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation',
        examples=[[]],
    )
    aliasAssigned: bool = Field(
        ...,
        description='A boolean that will be true when the aliases from the alias property were assigned successfully',
        examples=[True],
    )
    aliasAssignedAt: Optional[Union[float, bool]] = None
    aliasError: Optional[AliasError] = Field(
        None,
        description='An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`',
        examples=[None],
    )
    aliasFinal: Optional[str] = None
    aliasWarning: Optional[AliasWarning] = None
    automaticAliases: Optional[List[str]] = None
    bootedAt: float
    build: Build5
    buildErrorAt: Optional[float] = None
    buildingAt: float
    builds: Optional[List[Dict[str, Any]]] = None
    canceledAt: Optional[float] = None
    checksConclusion: Optional[ChecksConclusion] = None
    checksState: Optional[ChecksState] = None
    createdAt: float = Field(
        ...,
        description='A number containing the date when the deployment was created in milliseconds',
        examples=[1540257589405],
    )
    createdIn: str = Field(
        ...,
        description='The region where the deployment was first created',
        examples=['sfo1'],
    )
    creator: Creator = Field(
        ..., description='Information about the deployment creator'
    )
    env: List[str] = Field(
        ...,
        description='The keys of the environment variables that were assigned during runtime',
        examples=[['MY_SECRET']],
    )
    errorCode: Optional[str] = None
    errorLink: Optional[str] = None
    errorMessage: Optional[str] = None
    errorStep: Optional[str] = None
    functions: Optional[Dict[str, Any]] = Field(
        None,
        description='An object used to configure your Serverless Functions',
        examples=[{'api/test.js': {'memory': 3008}}],
    )
    gitRepo: Optional[Union[GitRepo6, GitRepo7, GitRepo8]] = None
    gitSource: Optional[
        Union[
            GitSource23,
            GitSource24,
            GitSource25,
            GitSource26,
            GitSource27,
            GitSource28,
            GitSource29,
            GitSource30,
            GitSource31,
        ]
    ] = None
    id: str = Field(
        ...,
        description='A string holding the unique ID of the deployment',
        examples=['dpl_89qyp1cskzkLrVicDaZoDbjyHuDJ'],
    )
    inspectorUrl: Optional[str] = Field(
        ...,
        description='Vercel URL to inspect the deployment.',
        examples=['https://vercel.com/acme/nextjs/J1hXN00qjUeoYfpEEf7dnDtpSiVq'],
    )
    isInConcurrentBuildsQueue: bool = Field(
        ...,
        description='Is the deployment currently queued waiting for a Concurrent Build Slot to be available',
        examples=[False],
    )
    lambdas: Optional[List[Lambda3]] = None
    meta: Dict[str, str] = Field(
        ...,
        description="An object containing the deployment's metadata",
        examples=[{'foo': 'bar'}],
    )
    monorepoManager: Optional[str] = Field(
        None,
        description='An monorepo manager that was used for the deployment',
        examples=['turbo'],
    )
    name: str = Field(
        ...,
        description='The name of the project associated with the deployment at the time that the deployment was created',
        examples=['my-project'],
    )
    ownerId: str = Field(
        ...,
        description='The unique ID of the user or team the deployment belongs to',
        examples=['ZspSRT4ljIEEmMHgoDwKWDei'],
    )
    plan: Plan1 = Field(
        ...,
        description='The pricing plan the deployment was made under',
        examples=['pro'],
    )
    previewCommentsEnabled: Optional[bool] = Field(
        None,
        description='Whether or not preview comments are enabled for the deployment',
        examples=[False],
    )
    projectId: str = Field(
        ...,
        description='The ID of the project the deployment is associated with',
        examples=['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB'],
    )
    public: bool = Field(
        ...,
        description='A boolean representing if the deployment is public or not. By default this is `false`',
        examples=[False],
    )
    readyState: ReadyState6 = Field(
        ...,
        description='The state of the deployment depending on the process of deploying, or if it is ready or in an error state',
        examples=['READY'],
    )
    regions: List[str] = Field(
        ..., description='The regions the deployment exists in', examples=[['sfo1']]
    )
    routes: Optional[List[Union[Routes8, Routes9, Routes10]]] = Field(
        ...,
        description='A list of routes objects used to rewrite paths to point towards other internal or external paths',
        examples=[[{'dest': 'https://docs.example.com', 'src': '/docs'}]],
    )
    source: Optional[Source38] = Field(
        None, description='Where was the deployment created from', examples=['cli']
    )
    target: Optional[Target8] = Field(
        None,
        description='If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned',
        examples=[None],
    )
    team: Optional[Team1] = Field(
        None, description='The team that owns the deployment if any'
    )
    type: Type96
    url: str = Field(
        ...,
        description='A string with the unique URL of the deployment',
        examples=['my-instant-deployment-3ij3cxz9qr.now.sh'],
    )
    userAliases: Optional[List[str]] = Field(
        None,
        description='An array of domains that were provided by the user when creating the Deployment.',
        examples=[['sub1.example.com', 'sub2.example.com']],
    )
    version: Version = Field(
        ...,
        description='The platform version that was used to create the deployment.',
        examples=[2],
    )


class Type97(Enum):
    github = 'github'


class GitSource32(BaseModel):
    prId: Optional[float] = None
    ref: Optional[str] = None
    repoId: Union[str, float]
    sha: Optional[str] = None
    type: Type97


class GitSource33(BaseModel):
    org: str
    prId: Optional[float] = None
    ref: Optional[str] = None
    repo: str
    sha: Optional[str] = None
    type: Type97


class Type99(Enum):
    gitlab = 'gitlab'


class GitSource34(BaseModel):
    prId: Optional[float] = None
    projectId: Union[str, float]
    ref: Optional[str] = None
    sha: Optional[str] = None
    type: Type99


class Type100(Enum):
    bitbucket = 'bitbucket'


class GitSource35(BaseModel):
    prId: Optional[float] = None
    ref: Optional[str] = None
    repoUuid: str
    sha: Optional[str] = None
    type: Type100
    workspaceUuid: Optional[str] = None


class GitSource36(BaseModel):
    owner: str
    prId: Optional[float] = None
    ref: Optional[str] = None
    sha: Optional[str] = None
    slug: str
    type: Type100


class Type102(Enum):
    custom = 'custom'


class GitSource37(BaseModel):
    gitUrl: str
    ref: str
    sha: str
    type: Type102


class Type103(Enum):
    github = 'github'


class GitSource38(BaseModel):
    org: Optional[str] = None
    ref: str
    repo: Optional[str] = None
    repoId: float
    sha: str
    type: Type103


class Type104(Enum):
    gitlab = 'gitlab'


class GitSource39(BaseModel):
    projectId: float
    ref: str
    sha: str
    type: Type104


class Type105(Enum):
    bitbucket = 'bitbucket'


class GitSource40(BaseModel):
    owner: Optional[str] = None
    ref: str
    repoUuid: str
    sha: str
    slug: Optional[str] = None
    type: Type105
    workspaceUuid: str


class ReadyState7(Enum):
    BUILDING = 'BUILDING'
    ERROR = 'ERROR'
    INITIALIZING = 'INITIALIZING'
    READY = 'READY'


class Lambda4(BaseModel):
    createdAt: Optional[float] = None
    entrypoint: Optional[str] = None
    id: str
    output: List[OutputItem1]
    readyState: Optional[ReadyState7] = None
    readyStateAt: Optional[float] = None


class ReadyState8(Enum):
    QUEUED = 'QUEUED'
    BUILDING = 'BUILDING'
    ERROR = 'ERROR'
    INITIALIZING = 'INITIALIZING'
    READY = 'READY'
    CANCELED = 'CANCELED'


class Type106(Enum):
    LAMBDAS = 'LAMBDAS'


class V13DeploymentsIdOrUrlGetResponse2(BaseModel):
    alias: List[str] = Field(
        ...,
        description='A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation',
        examples=[[]],
    )
    aliasAssigned: bool = Field(
        ...,
        description='A boolean that will be true when the aliases from the alias property were assigned successfully',
        examples=[True],
    )
    aliasError: Optional[AliasError] = Field(
        None,
        description='An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`',
        examples=[None],
    )
    aliasFinal: Optional[str] = None
    aliasWarning: Optional[AliasWarning] = None
    automaticAliases: Optional[List[str]] = None
    bootedAt: float
    buildErrorAt: Optional[float] = None
    buildingAt: float
    canceledAt: Optional[float] = None
    checksConclusion: Optional[ChecksConclusion] = None
    checksState: Optional[ChecksState] = None
    createdAt: float = Field(
        ...,
        description='A number containing the date when the deployment was created in milliseconds',
        examples=[1540257589405],
    )
    creator: Creator = Field(
        ..., description='Information about the deployment creator'
    )
    errorCode: Optional[str] = None
    errorLink: Optional[str] = None
    errorMessage: Optional[str] = None
    errorStep: Optional[str] = None
    gitSource: Optional[
        Union[
            GitSource32,
            GitSource33,
            GitSource34,
            GitSource35,
            GitSource36,
            GitSource37,
            GitSource38,
            GitSource39,
            GitSource40,
        ]
    ] = None
    id: str = Field(
        ...,
        description='A string holding the unique ID of the deployment',
        examples=['dpl_89qyp1cskzkLrVicDaZoDbjyHuDJ'],
    )
    lambdas: Optional[List[Lambda4]] = None
    meta: Dict[str, str] = Field(
        ...,
        description="An object containing the deployment's metadata",
        examples=[{'foo': 'bar'}],
    )
    name: str = Field(
        ...,
        description='The name of the project associated with the deployment at the time that the deployment was created',
        examples=['my-project'],
    )
    previewCommentsEnabled: Optional[bool] = Field(
        None,
        description='Whether or not preview comments are enabled for the deployment',
        examples=[False],
    )
    public: bool = Field(
        ...,
        description='A boolean representing if the deployment is public or not. By default this is `false`',
        examples=[False],
    )
    readyState: ReadyState8 = Field(
        ...,
        description='The state of the deployment depending on the process of deploying, or if it is ready or in an error state',
        examples=['READY'],
    )
    regions: List[str] = Field(
        ..., description='The regions the deployment exists in', examples=[['sfo1']]
    )
    source: Optional[Source38] = Field(
        None, description='Where was the deployment created from', examples=['cli']
    )
    target: Optional[Target8] = Field(
        None,
        description='If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned',
        examples=[None],
    )
    team: Optional[Team1] = Field(
        None, description='The team that owns the deployment if any'
    )
    type: Type106
    url: str = Field(
        ...,
        description='A string with the unique URL of the deployment',
        examples=['my-instant-deployment-3ij3cxz9qr.now.sh'],
    )
    userAliases: Optional[List[str]] = Field(
        None,
        description='An array of domains that were provided by the user when creating the Deployment.',
        examples=[['sub1.example.com', 'sub2.example.com']],
    )
    version: Version = Field(
        ...,
        description='The platform version that was used to create the deployment.',
        examples=[2],
    )


class V13DeploymentsIdOrUrlGetResponse(
    RootModel[
        Union[V13DeploymentsIdOrUrlGetResponse1, V13DeploymentsIdOrUrlGetResponse2]
    ]
):
    root: Union[V13DeploymentsIdOrUrlGetResponse1, V13DeploymentsIdOrUrlGetResponse2]


class State(Enum):
    DELETED = 'DELETED'


class V13DeploymentsIdDeleteResponse(BaseModel):
    state: State = Field(
        ..., description='A constant with the final state of the deployment.'
    )
    uid: str = Field(
        ...,
        description='The removed deployment ID.',
        examples=['dpl_5WJWYSyB7BpgTj3EuwF37WMRBXBtPQ2iTMJHJBJyRfd'],
    )


class Status7(Enum):
    SUCCESS = 'SUCCESS'


class V2AliasesAliasIdDeleteResponse(BaseModel):
    status: Status7


class AliasId(RootModel[str]):
    root: str = Field(
        ...,
        description='The ID or alias that will be removed',
        examples=['2WjyKQmM8ZnGcJsPWMrHRHrE'],
    )


class Direction(Enum):
    backward = 'backward'
    forward = 'forward'


class Follow(Enum):
    number_0 = 0
    number_1 = 1


class Delimiter(Enum):
    number_0 = 0
    number_1 = 1


class Builds1(Enum):
    number_0 = 0
    number_1 = 1


class Payload(BaseModel):
    date: float
    deploymentId: str
    id: str
    serial: str
    text: Optional[str] = None


class Type107(Enum):
    command = 'command'


class V2DeploymentsIdOrUrlEventsGetResponse1(BaseModel):
    created: float
    payload: Payload
    type: Type107


class Info(BaseModel):
    entrypoint: Optional[str] = None
    name: str
    path: Optional[str] = None
    step: Optional[str] = None
    type: str


class Payload1(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    serial: str


class Type108(Enum):
    deployment_state = 'deployment-state'


class V2DeploymentsIdOrUrlEventsGetResponse2(BaseModel):
    created: float
    payload: Payload1
    type: Type108


class Payload2(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    serial: str


class Type109(Enum):
    delimiter = 'delimiter'


class V2DeploymentsIdOrUrlEventsGetResponse3(BaseModel):
    created: float
    payload: Payload2
    type: Type109


class Payload3(BaseModel):
    created: float
    date: float
    deploymentId: str
    id: str
    serial: str
    text: Optional[str] = None


class Type110(Enum):
    exit = 'exit'


class V2DeploymentsIdOrUrlEventsGetResponse4(BaseModel):
    created: float
    payload: Payload3
    type: Type110


class Payload4(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    requestId: Optional[str] = None
    serial: str
    text: Optional[str] = None


class Type111(Enum):
    middleware = 'middleware'


class V2DeploymentsIdOrUrlEventsGetResponse5(BaseModel):
    created: float
    payload: Payload4
    type: Type111


class Payload5(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    requestId: Optional[str] = None
    serial: str
    statusCode: Optional[float] = None
    text: Optional[str] = None


class Type112(Enum):
    delimiter = 'delimiter'
    command = 'command'
    stdout = 'stdout'
    stderr = 'stderr'
    exit = 'exit'
    deployment_state = 'deployment-state'
    middleware = 'middleware'
    middleware_invocation = 'middleware-invocation'
    edge_function_invocation = 'edge-function-invocation'
    fatal = 'fatal'


class V2DeploymentsIdOrUrlEventsGetResponse6(BaseModel):
    created: float
    payload: Payload5
    type: Type112


class V2DeploymentsIdOrUrlEventsGetResponse(
    RootModel[
        List[
            Union[
                V2DeploymentsIdOrUrlEventsGetResponse1,
                V2DeploymentsIdOrUrlEventsGetResponse2,
                V2DeploymentsIdOrUrlEventsGetResponse3,
                V2DeploymentsIdOrUrlEventsGetResponse4,
                V2DeploymentsIdOrUrlEventsGetResponse5,
                V2DeploymentsIdOrUrlEventsGetResponse6,
            ]
        ]
    ]
):
    root: List[
        Union[
            V2DeploymentsIdOrUrlEventsGetResponse1,
            V2DeploymentsIdOrUrlEventsGetResponse2,
            V2DeploymentsIdOrUrlEventsGetResponse3,
            V2DeploymentsIdOrUrlEventsGetResponse4,
            V2DeploymentsIdOrUrlEventsGetResponse5,
            V2DeploymentsIdOrUrlEventsGetResponse6,
        ]
    ]


class Payload6(BaseModel):
    date: float
    deploymentId: str
    id: str
    serial: str
    text: Optional[str] = None


class Type113(Enum):
    command = 'command'


class V2DeploymentsIdOrUrlEventsGetResponse8(BaseModel):
    created: float
    payload: Payload6
    type: Type113


class Payload7(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    serial: str


class Type114(Enum):
    deployment_state = 'deployment-state'


class V2DeploymentsIdOrUrlEventsGetResponse9(BaseModel):
    created: float
    payload: Payload7
    type: Type114


class Payload8(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    serial: str


class Type115(Enum):
    delimiter = 'delimiter'


class V2DeploymentsIdOrUrlEventsGetResponse10(BaseModel):
    created: float
    payload: Payload8
    type: Type115


class Payload9(BaseModel):
    created: float
    date: float
    deploymentId: str
    id: str
    serial: str
    text: Optional[str] = None


class Type116(Enum):
    exit = 'exit'


class V2DeploymentsIdOrUrlEventsGetResponse11(BaseModel):
    created: float
    payload: Payload9
    type: Type116


class Payload10(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    requestId: Optional[str] = None
    serial: str
    text: Optional[str] = None


class Type117(Enum):
    middleware = 'middleware'


class V2DeploymentsIdOrUrlEventsGetResponse12(BaseModel):
    created: float
    payload: Payload10
    type: Type117


class Payload11(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    requestId: Optional[str] = None
    serial: str
    statusCode: Optional[float] = None
    text: Optional[str] = None


class Type118(Enum):
    delimiter = 'delimiter'
    command = 'command'
    stdout = 'stdout'
    stderr = 'stderr'
    exit = 'exit'
    deployment_state = 'deployment-state'
    middleware = 'middleware'
    middleware_invocation = 'middleware-invocation'
    edge_function_invocation = 'edge-function-invocation'
    fatal = 'fatal'


class V2DeploymentsIdOrUrlEventsGetResponse13(BaseModel):
    created: float
    payload: Payload11
    type: Type118


class Payload12(BaseModel):
    date: float
    deploymentId: str
    id: str
    serial: str
    text: Optional[str] = None


class Type119(Enum):
    command = 'command'


class V2DeploymentsIdOrUrlEventsGetResponse14(BaseModel):
    created: float
    payload: Payload12
    type: Type119


class Payload13(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    serial: str


class Type120(Enum):
    deployment_state = 'deployment-state'


class V2DeploymentsIdOrUrlEventsGetResponse15(BaseModel):
    created: float
    payload: Payload13
    type: Type120


class Payload14(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    serial: str


class Type121(Enum):
    delimiter = 'delimiter'


class V2DeploymentsIdOrUrlEventsGetResponse16(BaseModel):
    created: float
    payload: Payload14
    type: Type121


class Payload15(BaseModel):
    created: float
    date: float
    deploymentId: str
    id: str
    serial: str
    text: Optional[str] = None


class Type122(Enum):
    exit = 'exit'


class V2DeploymentsIdOrUrlEventsGetResponse17(BaseModel):
    created: float
    payload: Payload15
    type: Type122


class Payload16(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    requestId: Optional[str] = None
    serial: str
    text: Optional[str] = None


class Type123(Enum):
    middleware = 'middleware'


class V2DeploymentsIdOrUrlEventsGetResponse18(BaseModel):
    created: float
    payload: Payload16
    type: Type123


class Payload17(BaseModel):
    date: float
    deploymentId: str
    id: str
    info: Info
    requestId: Optional[str] = None
    serial: str
    statusCode: Optional[float] = None
    text: Optional[str] = None


class Type124(Enum):
    delimiter = 'delimiter'
    command = 'command'
    stdout = 'stdout'
    stderr = 'stderr'
    exit = 'exit'
    deployment_state = 'deployment-state'
    middleware = 'middleware'
    middleware_invocation = 'middleware-invocation'
    edge_function_invocation = 'edge-function-invocation'
    fatal = 'fatal'


class V2DeploymentsIdOrUrlEventsGetResponse19(BaseModel):
    created: float
    payload: Payload17
    type: Type124


class V2DeploymentsIdOrUrlEventsGetResponse7(
    RootModel[
        Union[
            V2DeploymentsIdOrUrlEventsGetResponse8,
            V2DeploymentsIdOrUrlEventsGetResponse9,
            V2DeploymentsIdOrUrlEventsGetResponse10,
            V2DeploymentsIdOrUrlEventsGetResponse11,
            V2DeploymentsIdOrUrlEventsGetResponse12,
            V2DeploymentsIdOrUrlEventsGetResponse13,
            Union[
                Dict[str, Any],
                V2DeploymentsIdOrUrlEventsGetResponse14,
                V2DeploymentsIdOrUrlEventsGetResponse15,
                V2DeploymentsIdOrUrlEventsGetResponse16,
                V2DeploymentsIdOrUrlEventsGetResponse17,
                V2DeploymentsIdOrUrlEventsGetResponse18,
                V2DeploymentsIdOrUrlEventsGetResponse19,
            ],
        ]
    ]
):
    root: Union[
        V2DeploymentsIdOrUrlEventsGetResponse8,
        V2DeploymentsIdOrUrlEventsGetResponse9,
        V2DeploymentsIdOrUrlEventsGetResponse10,
        V2DeploymentsIdOrUrlEventsGetResponse11,
        V2DeploymentsIdOrUrlEventsGetResponse12,
        V2DeploymentsIdOrUrlEventsGetResponse13,
        Union[
            Dict[str, Any],
            V2DeploymentsIdOrUrlEventsGetResponse14,
            V2DeploymentsIdOrUrlEventsGetResponse15,
            V2DeploymentsIdOrUrlEventsGetResponse16,
            V2DeploymentsIdOrUrlEventsGetResponse17,
            V2DeploymentsIdOrUrlEventsGetResponse18,
            V2DeploymentsIdOrUrlEventsGetResponse19,
        ],
    ]


class StatusCode(RootModel[Union[float, str]]):
    root: Union[float, str] = Field(
        ..., description='HTTP status code range to filter events by.', examples=['5xx']
    )


class Alias(BaseModel):
    alias: str = Field(
        ...,
        description='The alias name, it could be a `.vercel.app` subdomain or a custom domain',
        examples=['my-alias.vercel.app'],
    )
    created: datetime = Field(
        ...,
        description='The date when the alias was created',
        examples=['2017-04-26T23:00:34.232Z'],
    )
    protectionBypass: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    redirect: Optional[str] = Field(
        None,
        description='Target destination domain for redirect when the alias is a redirect',
    )
    uid: str = Field(
        ...,
        description='The unique identifier of the alias',
        examples=['2WjyKQmM8ZnGcJsPWMrHRHrE'],
    )


class V2DeploymentsIdAliasesGetResponse(BaseModel):
    aliases: List[Alias] = Field(
        ..., description='A list of the aliases assigned to the deployment'
    )


class V2DeploymentsIdAliasesPostRequest(BaseModel):
    alias: Optional[str] = Field(
        None,
        description='The alias we want to assign to the deployment defined in the URL',
        examples=['my-alias.vercel.app'],
    )
    redirect: Optional[str] = Field(
        None,
        description='The redirect property will take precedence over the deployment id from the URL and consists of a hostname (like test.com) to which the alias should redirect using status code 307',
        examples=[None],
    )


class V2DeploymentsIdAliasesPostResponse(BaseModel):
    alias: str = Field(
        ..., description='The assigned alias name', examples=['my-alias.vercel.app']
    )
    created: datetime = Field(
        ...,
        description='The date when the alias was created',
        examples=['2017-04-26T23:00:34.232Z'],
    )
    oldDeploymentId: Optional[str] = Field(
        None,
        description='The unique identifier of the previously aliased deployment, only received when the alias was used before',
        examples=['dpl_FjvFJncQHQcZMznrUm9EoB8sFuPa'],
    )
    uid: str = Field(
        ...,
        description='The unique identifier of the alias',
        examples=['2WjyKQmM8ZnGcJsPWMrHRHrE'],
    )


class Id(RootModel[str]):
    root: str = Field(
        ...,
        description='The ID of the deployment the aliases should be listed for',
        examples=['dpl_FjvFJncQHQcZMznrUm9EoB8sFuPa'],
    )


class Type125(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'
    A_1 = 'A'


class V2DomainsDomainRecordsPostRequest1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type125 = Field(..., description='Must be of type `A`.')
    name: str = Field(
        ...,
        description='A subdomain name or an empty string for the root domain.',
        examples=['subdomain'],
    )
    ttl: Optional[confloat(ge=60.0, le=2147483647.0)] = Field(
        None,
        description='The TTL value. Must be a number between 60 and 2147483647. Default value is 60.',
        examples=[60],
    )
    value: IPv4Address = Field(
        ...,
        description='The record value must be a valid IPv4 address.',
        examples=['192.0.2.42'],
    )


class Type126(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'
    A_1 = 'A'
    AAAA_1 = 'AAAA'


class V2DomainsDomainRecordsPostRequest2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type126 = Field(..., description='Must be of type `AAAA`.')
    name: str = Field(
        ...,
        description='A subdomain name or an empty string for the root domain.',
        examples=['subdomain'],
    )
    ttl: Optional[confloat(ge=60.0, le=2147483647.0)] = Field(
        None,
        description='The TTL value. Must be a number between 60 and 2147483647. Default value is 60.',
        examples=[60],
    )
    value: IPv6Address = Field(
        ...,
        description='An AAAA record pointing to an IPv6 address.',
        examples=['2001:DB8::42'],
    )


class Type127(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'
    A_1 = 'A'
    AAAA_1 = 'AAAA'
    ALIAS_1 = 'ALIAS'


class V2DomainsDomainRecordsPostRequest3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type127 = Field(..., description='Must be of type `ALIAS`.')
    name: str = Field(
        ...,
        description='A subdomain name or an empty string for the root domain.',
        examples=['subdomain'],
    )
    ttl: Optional[confloat(ge=60.0, le=2147483647.0)] = Field(
        None,
        description='The TTL value. Must be a number between 60 and 2147483647. Default value is 60.',
        examples=[60],
    )
    value: str = Field(
        ...,
        description='An ALIAS virtual record pointing to a hostname resolved to an A record on server side.',
        examples=['cname.vercel-dns.com'],
    )


class Type128(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'
    A_1 = 'A'
    AAAA_1 = 'AAAA'
    ALIAS_1 = 'ALIAS'
    CAA_1 = 'CAA'


class V2DomainsDomainRecordsPostRequest4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type128 = Field(..., description='Must be of type `CAA`.')
    name: str = Field(
        ...,
        description='A subdomain name or an empty string for the root domain.',
        examples=['subdomain'],
    )
    ttl: Optional[confloat(ge=60.0, le=2147483647.0)] = Field(
        None,
        description='The TTL value. Must be a number between 60 and 2147483647. Default value is 60.',
        examples=[60],
    )
    value: str = Field(
        ...,
        description='A CAA record to specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.',
        examples=['0 issue \\"letsencrypt.org\\"'],
    )


class Type129(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'
    A_1 = 'A'
    AAAA_1 = 'AAAA'
    ALIAS_1 = 'ALIAS'
    CAA_1 = 'CAA'
    CNAME_1 = 'CNAME'


class V2DomainsDomainRecordsPostRequest5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type129 = Field(..., description='Must be of type `CNAME`.')
    name: str = Field(
        ...,
        description='A subdomain name or an empty string for the root domain.',
        examples=['subdomain'],
    )
    ttl: Optional[confloat(ge=60.0, le=2147483647.0)] = Field(
        None,
        description='The TTL value. Must be a number between 60 and 2147483647. Default value is 60.',
        examples=[60],
    )
    value: str = Field(
        ...,
        description='A CNAME record mapping to another domain name.',
        examples=['cname.vercel-dns.com'],
    )


class Type130(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'
    A_1 = 'A'
    AAAA_1 = 'AAAA'
    ALIAS_1 = 'ALIAS'
    CAA_1 = 'CAA'
    CNAME_1 = 'CNAME'
    MX_1 = 'MX'


class V2DomainsDomainRecordsPostRequest6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type130 = Field(..., description='Must be of type `MX`.')
    mxPriority: confloat(ge=0.0, le=65535.0) = Field(..., examples=[10])
    name: str = Field(
        ...,
        description='A subdomain name or an empty string for the root domain.',
        examples=['subdomain'],
    )
    ttl: Optional[confloat(ge=60.0, le=2147483647.0)] = Field(
        None,
        description='The TTL value. Must be a number between 60 and 2147483647. Default value is 60.',
        examples=[60],
    )
    value: str = Field(
        ...,
        description='An MX record specifying the mail server responsible for accepting messages on behalf of the domain name.',
        examples=['10 mail.example.com.'],
    )


class Type131(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'
    A_1 = 'A'
    AAAA_1 = 'AAAA'
    ALIAS_1 = 'ALIAS'
    CAA_1 = 'CAA'
    CNAME_1 = 'CNAME'
    MX_1 = 'MX'
    SRV_1 = 'SRV'


class Srv1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    port: Optional[confloat(ge=0.0, le=65535.0)] = None
    priority: Optional[confloat(ge=0.0, le=65535.0)] = None
    target: Optional[str] = Field(None, examples=['host.example.com'])
    weight: Optional[confloat(ge=0.0, le=65535.0)] = None


class V2DomainsDomainRecordsPostRequest7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type131 = Field(..., description='Must be of type `SRV`.')
    name: str = Field(
        ..., description='A subdomain name or an empty string for the root domain.'
    )
    srv: Srv1
    ttl: Optional[confloat(ge=60.0, le=2147483647.0)] = Field(
        None,
        description='The TTL value. Must be a number between 60 and 2147483647. Default value is 60.',
        examples=[60],
    )


class Type132(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'
    A_1 = 'A'
    AAAA_1 = 'AAAA'
    ALIAS_1 = 'ALIAS'
    CAA_1 = 'CAA'
    CNAME_1 = 'CNAME'
    MX_1 = 'MX'
    SRV_1 = 'SRV'
    TXT_1 = 'TXT'


class V2DomainsDomainRecordsPostRequest8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type132 = Field(..., description='Must be of type `TXT`.')
    name: str = Field(
        ..., description='A subdomain name or an empty string for the root domain.'
    )
    ttl: Optional[confloat(ge=60.0, le=2147483647.0)] = Field(
        None,
        description='The TTL value. Must be a number between 60 and 2147483647. Default value is 60.',
        examples=[60],
    )
    value: str = Field(
        ..., description='A TXT record containing arbitrary text.', examples=['hello']
    )


class Type133(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'
    A_1 = 'A'
    AAAA_1 = 'AAAA'
    ALIAS_1 = 'ALIAS'
    CAA_1 = 'CAA'
    CNAME_1 = 'CNAME'
    MX_1 = 'MX'
    SRV_1 = 'SRV'
    TXT_1 = 'TXT'
    NS_1 = 'NS'


class V2DomainsDomainRecordsPostRequest9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type133 = Field(..., description='Must be of type `NS`.')
    name: str = Field(..., description='A subdomain name.', examples=['subdomain'])
    ttl: Optional[confloat(ge=60.0, le=2147483647.0)] = Field(
        None,
        description='The TTL value. Must be a number between 60 and 2147483647. Default value is 60.',
        examples=[60],
    )
    value: str = Field(
        ..., description='An NS domain value.', examples=['ns1.example.com']
    )


class V2DomainsDomainRecordsPostRequest(
    RootModel[
        Union[
            V2DomainsDomainRecordsPostRequest1,
            V2DomainsDomainRecordsPostRequest2,
            V2DomainsDomainRecordsPostRequest3,
            V2DomainsDomainRecordsPostRequest4,
            V2DomainsDomainRecordsPostRequest5,
            V2DomainsDomainRecordsPostRequest6,
            V2DomainsDomainRecordsPostRequest7,
            V2DomainsDomainRecordsPostRequest8,
            V2DomainsDomainRecordsPostRequest9,
        ]
    ]
):
    root: Union[
        V2DomainsDomainRecordsPostRequest1,
        V2DomainsDomainRecordsPostRequest2,
        V2DomainsDomainRecordsPostRequest3,
        V2DomainsDomainRecordsPostRequest4,
        V2DomainsDomainRecordsPostRequest5,
        V2DomainsDomainRecordsPostRequest6,
        V2DomainsDomainRecordsPostRequest7,
        V2DomainsDomainRecordsPostRequest8,
        V2DomainsDomainRecordsPostRequest9,
    ]


class V2DomainsDomainRecordsPostResponse1(BaseModel):
    uid: str
    updated: float


class V2DomainsDomainRecordsPostResponse2(BaseModel):
    uid: str = Field(
        ...,
        description='The id of the newly created DNS record',
        examples=['rec_V0fra8eEgQwEpFhYG2vTzC3K'],
    )


class V2DomainsDomainRecordsPostResponse(
    RootModel[
        Union[V2DomainsDomainRecordsPostResponse1, V2DomainsDomainRecordsPostResponse2]
    ]
):
    root: Union[
        V2DomainsDomainRecordsPostResponse1, V2DomainsDomainRecordsPostResponse2
    ]


class V2DomainsDomainRecordsRecordIdDeleteResponse(BaseModel):
    pass


class V2FilesPostResponse1(BaseModel):
    urls: List[str] = Field(
        ...,
        description='Array of URLs where the file was updated',
        examples=[['example-upload.aws.com']],
    )


class V2FilesPostResponse(RootModel[Union[V2FilesPostResponse1, Dict[str, Any]]]):
    root: Union[V2FilesPostResponse1, Dict[str, Any]]


class CreatedFrom(Enum):
    self_served = 'self-served'
    integration = 'integration'


class Environment4(Enum):
    production = 'production'
    preview = 'preview'


class Source42(Enum):
    static = 'static'
    lambda_ = 'lambda'
    build = 'build'
    edge = 'edge'
    external = 'external'


class Type134(Enum):
    json = 'json'
    ndjson = 'ndjson'
    syslog = 'syslog'


class V2IntegrationsLogDrainsGetResponseItem(BaseModel):
    branch: Optional[str] = Field(
        None, description='The branch regexp of log drain', examples=['feature/*']
    )
    clientId: Optional[str] = Field(
        None,
        description='The oauth2 client application id that created this log drain',
        examples=['oac_xRhY4LAB7yLhUADD69EvV7ct'],
    )
    configurationId: Optional[str] = Field(
        None,
        description='The client configuration this log drain was created with',
        examples=['icfg_cuwj0AdCdH3BwWT4LPijCC7t'],
    )
    createdAt: float = Field(
        ...,
        description='A timestamp that tells you when the log drain was created',
        examples=[1558531915505],
    )
    createdFrom: Optional[CreatedFrom] = Field(
        None,
        description='Whether the log drain was created by an integration or by a user',
        examples=['integration'],
    )
    deliveryFormat: Optional[DeliveryFormat2] = Field(
        None, description='The delivery log format', examples=['json']
    )
    environment: Optional[Environment4] = Field(
        None, description='The environment of log drain', examples=['production']
    )
    headers: Optional[Dict[str, str]] = Field(
        None,
        description='Construct a type with a set of properties K of type T',
        examples=['{"Authorization": "Bearer 123"}'],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the log drain. Always prefixed with `ld_`',
        examples=['ld_nBuA7zCID8g4QZ8g'],
    )
    name: str = Field(
        ..., description='The name of the log drain', examples=['My first log drain']
    )
    ownerId: str = Field(
        ...,
        description='The identifier of the team or user whose events will trigger the log drain',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )
    projectId: Optional[str] = Field(
        None, examples=['AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb']
    )
    projectIds: Optional[List[str]] = Field(
        None,
        description='The identifier of the projects this log drain is associated with',
        examples=['AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb'],
    )
    sources: Optional[List[Source42]] = Field(
        None,
        description='The sources from which logs are currently being delivered to this log drain.',
        examples=[['build', 'edge']],
    )
    type: Type134 = Field(..., description='The type of log format', examples=['json'])
    url: str = Field(
        ...,
        description='The URL to call when logs are generated',
        examples=['https://example.com/log-drain'],
    )


class V2IntegrationsLogDrainsGetResponse(
    RootModel[List[V2IntegrationsLogDrainsGetResponseItem]]
):
    root: List[V2IntegrationsLogDrainsGetResponseItem]


class Environment5(Enum):
    preview = 'preview'
    production = 'production'


class V2IntegrationsLogDrainsPostRequest(BaseModel):
    branch: Optional[str] = Field(
        None, description='The branch regexp of log drain', examples=['feature/*']
    )
    deliveryFormat: Optional[DeliveryFormat2] = Field(
        None, description='The delivery log format', examples=['json']
    )
    environment: Optional[Environment5] = Field(
        None, description='The environment of log drain', examples=['production']
    )
    headers: Optional[Dict[str, str]] = Field(
        None, description='Headers to be sent together with the request'
    )
    name: constr(pattern=r'^[A-z0-9_ -]+$', max_length=100) = Field(
        ..., description='The name of the log drain', examples=['My first log drain']
    )
    projectIds: Optional[List[ProjectId]] = Field(None, max_length=50, min_length=1)
    secret: Optional[constr(pattern=r'^[A-z0-9_ -]+$', max_length=100)] = Field(
        None,
        description='A secret to sign log drain notification headers so a consumer can verify their authenticity',
        examples=['a1Xsfd325fXcs'],
    )
    sources: Optional[List[Source42]] = Field(None, min_length=1)
    url: AnyUrl = Field(
        ...,
        description='The url where you will receive logs. The protocol must be `https://` or `http://` when type is `json` and `ndjson`, and `syslog+tls:` or `syslog:` when the type is `syslog`.',
        examples=['https://example.com/log-drain'],
    )


class V2IntegrationsLogDrainsPostResponse(BaseModel):
    branch: Optional[str] = Field(
        None, description='The branch regexp of log drain', examples=['feature/*']
    )
    clientId: Optional[str] = Field(
        None,
        description='The oauth2 client application id that created this log drain',
        examples=['oac_xRhY4LAB7yLhUADD69EvV7ct'],
    )
    configurationId: Optional[str] = Field(
        None,
        description='The client configuration this log drain was created with',
        examples=['icfg_cuwj0AdCdH3BwWT4LPijCC7t'],
    )
    createdAt: float = Field(
        ...,
        description='A timestamp that tells you when the log drain was created',
        examples=[1558531915505],
    )
    createdFrom: Optional[CreatedFrom] = Field(
        None,
        description='Whether the log drain was created by an integration or by a user',
        examples=['integration'],
    )
    deliveryFormat: Optional[DeliveryFormat2] = Field(
        None, description='The delivery log format', examples=['json']
    )
    environment: Optional[Environment5] = Field(
        None, description='The environment of log drain', examples=['production']
    )
    headers: Optional[Dict[str, str]] = Field(
        None,
        description='Construct a type with a set of properties K of type T',
        examples=['{"Authorization": "Bearer 123"}'],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the log drain. Always prefixed with `ld_`',
        examples=['ld_nBuA7zCID8g4QZ8g'],
    )
    name: str = Field(
        ..., description='The name of the log drain', examples=['My first log drain']
    )
    ownerId: str = Field(
        ...,
        description='The identifier of the team or user whose events will trigger the log drain',
        examples=['kr1PsOIzqEL5Xg6M4VZcZosf'],
    )
    projectId: Optional[str] = Field(
        None, examples=['AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb']
    )
    projectIds: Optional[List[str]] = Field(
        None,
        description='The identifier of the projects this log drain is associated with',
        examples=['AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb'],
    )
    sources: Optional[List[Source42]] = Field(
        None,
        description='The sources from which logs are currently being delivered to this log drain.',
        examples=[['build', 'edge']],
    )
    type: Type134 = Field(..., description='The type of log format', examples=['json'])
    url: str = Field(
        ...,
        description='The URL to call when logs are generated',
        examples=['https://example.com/log-drain'],
    )


class V2SecretsIdOrNameDeleteResponse(BaseModel):
    created: float = Field(
        ...,
        description='The date when the secret was created.',
        examples=['2021-02-10T13:11:49.180Z'],
    )
    name: str = Field(
        ..., description='The name of the deleted secret.', examples=['my-api-key']
    )
    uid: str = Field(
        ...,
        description='The unique identifier of the deleted secret.',
        examples=['sec_XCG7t7AIHuO2SBA8667zNUiM'],
    )


class V2SecretsNamePatchRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ..., description='The name of the new secret.', examples=['my-api-key']
    )


class V2SecretsNamePatchResponse(BaseModel):
    created: datetime = Field(
        ..., description='Enables basic storage and retrieval of dates and times.'
    )
    name: str
    oldName: str
    uid: str


class V2SecretsNamePostRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    decryptable: Optional[bool] = Field(
        None,
        description='Whether the secret value can be decrypted after it has been created.',
        examples=[True],
    )
    name: str = Field(
        ...,
        description='The name of the secret (max 100 characters).',
        examples=['my-api-key'],
    )
    projectId: Optional[str] = Field(
        None,
        description='Associate a secret to a project.',
        examples=['prj_2WjyKQmM8ZnGcJsPWMrHRHrE'],
    )
    value: str = Field(
        ..., description='The value of the new secret.', examples=['some secret value']
    )


class Type136(Enum):
    Buffer = 'Buffer'


class Value(BaseModel):
    data: Optional[List[float]] = None
    type: Optional[Type136] = None


class V2SecretsNamePostResponse(BaseModel):
    created: datetime = Field(
        ...,
        description='The date when the secret was created.',
        examples=['2021-02-10T13:11:49.180Z'],
    )
    createdAt: Optional[float] = Field(
        None,
        description='Timestamp for when the secret was created.',
        examples=[1609492210000],
    )
    decryptable: Optional[bool] = Field(
        None,
        description='Indicates whether the secret value can be decrypted after it has been created.',
        examples=[True],
    )
    name: str = Field(
        ..., description='The name of the secret.', examples=['my-api-key']
    )
    projectId: Optional[str] = Field(
        None,
        description='The unique identifier of the project which the secret belongs to.',
        examples=['prj_2WjyKQmM8ZnGcJsPWMrHRHrE'],
    )
    teamId: Optional[str] = Field(
        None,
        description='The unique identifier of the team the secret was created for.',
        examples=['team_LLHUOMOoDlqOp8wPE4kFo9pE'],
    )
    uid: str = Field(
        ...,
        description='The unique identifier of the secret.',
        examples=['sec_XCG7t7AIHuO2SBA8667zNUiM'],
    )
    userId: Optional[str] = Field(
        None,
        description='The unique identifier of the user who created the secret.',
        examples=['2qDDuGFTWXBLDNnqZfWPDp1A'],
    )
    value: Value


class V2TeamsGetResponse(BaseModel):
    pagination: Pagination
    teams: List[Union[Team, TeamLimited]]


class RemoteCaching1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Enable or disable remote caching for the team.',
        examples=[True],
    )


class Roles(Enum):
    OWNER = 'OWNER'
    MEMBER = 'MEMBER'
    VIEWER = 'VIEWER'
    DEVELOPER = 'DEVELOPER'
    BILLING = 'BILLING'


class Saml2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enforced: Optional[bool] = Field(
        None,
        description='Require that members of the team use SAML Single Sign-On.',
        examples=[True],
    )
    roles: Optional[Dict[str, Roles]] = None


class V2TeamsTeamIdPatchRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar: Optional[str] = Field(
        None, description='The hash value of an uploaded image.'
    )
    description: Optional[constr(max_length=140)] = Field(
        None,
        description='A short text that describes the team.',
        examples=['Our mission is to make cloud computing accessible to everyone'],
    )
    emailDomain: Optional[str] = Field(None, examples=['example.com'])
    enablePreviewFeedback: Optional[str] = Field(
        None,
        description='Enable preview comments: one of on, off or default.',
        examples=['on'],
    )
    migrateExistingEnvVariablesToSensitive: Optional[bool] = Field(
        None,
        description='Runs a task that migrates all existing environment variables to sensitive environment variables.',
        examples=[False],
    )
    name: Optional[constr(max_length=256)] = Field(
        None, description='The name of the team.', examples=['My Team']
    )
    previewDeploymentSuffix: Optional[
        constr(
            pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
        )
    ] = Field(
        None,
        description='Suffix that will be used for all preview deployments.',
        examples=['example.dev'],
    )
    regenerateInviteCode: Optional[bool] = Field(
        None,
        description='Create a new invite code and replace the current one.',
        examples=[True],
    )
    remoteCaching: Optional[RemoteCaching1] = Field(
        None, description='Whether or not remote caching is enabled for the team'
    )
    saml: Optional[Saml2] = None
    sensitiveEnvironmentVariablePolicy: Optional[str] = Field(
        None,
        description='Sensitive environment variable policy: one of on, off or default.',
        examples=['on'],
    )
    slug: Optional[str] = Field(
        None, description='A new slug for the team.', examples=['my-team']
    )


class Role2(Enum):
    OWNER = 'OWNER'
    MEMBER = 'MEMBER'
    DEVELOPER = 'DEVELOPER'
    VIEWER = 'VIEWER'


class Role3(Enum):
    MEMBER = 'MEMBER'
    OWNER = 'OWNER'
    VIEWER = 'VIEWER'
    DEVELOPER = 'DEVELOPER'
    BILLING = 'BILLING'


class EmailInviteCode(BaseModel):
    createdAt: Optional[float] = None
    email: Optional[str] = None
    id: str
    isDSyncUser: bool
    role: Role3


class Bitbucket2(BaseModel):
    accountId: Optional[str] = None
    email: Optional[str] = None
    login: Optional[str] = None
    userId: Optional[float] = None


class Github2(BaseModel):
    accountId: Optional[str] = None
    email: Optional[str] = None
    login: Optional[str] = None
    userId: Optional[float] = None


class Gitlab2(BaseModel):
    accountId: Optional[str] = None
    email: Optional[str] = None
    login: Optional[str] = None
    userId: Optional[float] = None


class Origin7(Enum):
    import_ = 'import'
    gitlab = 'gitlab'
    bitbucket = 'bitbucket'
    github = 'github'
    mail = 'mail'
    link = 'link'
    teams = 'teams'
    saml = 'saml'
    dsync = 'dsync'
    feedback = 'feedback'


class JoinedFrom6(BaseModel):
    commitId: Optional[str] = None
    dsyncConnectedAt: Optional[float] = None
    dsyncUserId: Optional[str] = None
    gitUserId: Optional[Union[str, float]] = None
    gitUserLogin: Optional[str] = None
    idpUserId: Optional[str] = None
    origin: Origin7
    repoId: Optional[str] = None
    repoPath: Optional[str] = None
    ssoConnectedAt: Optional[float] = None
    ssoUserId: Optional[str] = None


class Member(BaseModel):
    accessRequestedAt: Optional[float] = Field(
        None,
        description='Timestamp in milliseconds for when this team member was accepted by an owner.',
        examples=[1588820733602],
    )
    avatar: Optional[str] = Field(
        None,
        description='ID of the file for the Avatar of this member.',
        examples=['123a6c5209bc3778245d011443644c8d27dc2c50'],
    )
    bitbucket: Optional[Bitbucket2] = Field(
        None, description='Information about the Bitbucket account of this user.'
    )
    confirmed: bool = Field(
        ...,
        description='Boolean that indicates if this member was confirmed by an owner.',
        examples=[True],
    )
    createdAt: float = Field(
        ...,
        description='Timestamp in milliseconds when this member was added.',
        examples=[1588720733602],
    )
    email: str = Field(
        ..., description='The email of this member.', examples=['jane.doe@example.com']
    )
    github: Optional[Github2] = Field(
        None, description='Information about the GitHub account for this user.'
    )
    gitlab: Optional[Gitlab2] = Field(
        None, description='Information about the GitLab account of this user.'
    )
    joinedFrom: Optional[JoinedFrom6] = Field(
        None,
        description='Map with information about the members origin if they joined by requesting access.',
    )
    name: Optional[str] = Field(
        None, description='The name of this user.', examples=['Jane Doe']
    )
    role: Role3 = Field(
        ..., description='Role of this user in the team.', examples=['OWNER']
    )
    uid: str = Field(
        ..., description='The ID of this user.', examples=['zTuNVUXEAvvnNN3IaqinkyMw']
    )
    username: str = Field(
        ..., description='The unique username of this user.', examples=['jane-doe']
    )


class Pagination1(BaseModel):
    count: float = Field(
        ..., description='Amount of items in the current page.', examples=[20]
    )
    hasNext: bool
    next: Optional[float] = Field(
        ...,
        description='Timestamp that must be used to request the next page.',
        examples=[1540095775951],
    )
    prev: Optional[float] = Field(
        ...,
        description='Timestamp that must be used to request the previous page.',
        examples=[1540095775951],
    )


class V2TeamsTeamIdMembersGetResponse(BaseModel):
    emailInviteCodes: Optional[List[EmailInviteCode]] = None
    members: List[Member]
    pagination: Pagination1


class Role5(Enum):
    OWNER = 'OWNER'
    MEMBER = 'MEMBER'
    DEVELOPER = 'DEVELOPER'
    VIEWER = 'VIEWER'


class V2UserGetResponse(BaseModel):
    user: Union[AuthUser, AuthUserLimited]


class V3EventsGetResponse(BaseModel):
    events: List[UserEvent] = Field(
        ..., description='Array of events generated by the User.'
    )


class Secret(BaseModel):
    created: datetime = Field(
        ...,
        description='The date when the secret was created.',
        examples=['2021-02-10T13:11:49.180Z'],
    )
    createdAt: Optional[float] = Field(
        None,
        description='Timestamp for when the secret was created.',
        examples=[1609492210000],
    )
    decryptable: Optional[bool] = Field(
        None,
        description='Indicates whether the secret value can be decrypted after it has been created.',
        examples=[True],
    )
    name: str = Field(
        ..., description='The name of the secret.', examples=['my-api-key']
    )
    projectId: Optional[str] = Field(
        None,
        description='The unique identifier of the project which the secret belongs to.',
        examples=['prj_2WjyKQmM8ZnGcJsPWMrHRHrE'],
    )
    teamId: Optional[str] = Field(
        None,
        description='The unique identifier of the team the secret was created for.',
        examples=['team_LLHUOMOoDlqOp8wPE4kFo9pE'],
    )
    uid: str = Field(
        ...,
        description='The unique identifier of the secret.',
        examples=['sec_XCG7t7AIHuO2SBA8667zNUiM'],
    )
    userId: Optional[str] = Field(
        None,
        description='The unique identifier of the user who created the secret.',
        examples=['2qDDuGFTWXBLDNnqZfWPDp1A'],
    )
    value: Optional[str] = Field(None, description='The value of the secret.')


class V3SecretsGetResponse(BaseModel):
    pagination: Pagination
    secrets: List[Secret]


class Decrypt(Enum):
    true = 'true'
    false = 'false'


class V3SecretsIdOrNameGetResponse(BaseModel):
    created: datetime = Field(
        ...,
        description='The date when the secret was created.',
        examples=['2021-02-10T13:11:49.180Z'],
    )
    createdAt: Optional[float] = Field(
        None,
        description='Timestamp for when the secret was created.',
        examples=[1609492210000],
    )
    decryptable: Optional[bool] = Field(
        None,
        description='Indicates whether the secret value can be decrypted after it has been created.',
        examples=[True],
    )
    name: str = Field(
        ..., description='The name of the secret.', examples=['my-api-key']
    )
    projectId: Optional[str] = Field(
        None,
        description='The unique identifier of the project which the secret belongs to.',
        examples=['prj_2WjyKQmM8ZnGcJsPWMrHRHrE'],
    )
    teamId: Optional[str] = Field(
        None,
        description='The unique identifier of the team the secret was created for.',
        examples=['team_LLHUOMOoDlqOp8wPE4kFo9pE'],
    )
    uid: str = Field(
        ...,
        description='The unique identifier of the secret.',
        examples=['sec_XCG7t7AIHuO2SBA8667zNUiM'],
    )
    userId: Optional[str] = Field(
        None,
        description='The unique identifier of the user who created the secret.',
        examples=['2qDDuGFTWXBLDNnqZfWPDp1A'],
    )
    value: Optional[str] = Field(None, description='The value of the secret.')


class V3UserTokensPostRequest1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expiresAt: Optional[float] = None
    name: str


class Type137(Enum):
    oauth2_token = 'oauth2-token'


class V3UserTokensPostRequest2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clientId: Optional[str] = None
    expiresAt: Optional[float] = None
    installationId: Optional[str] = None
    name: str
    type: Type137


class V3UserTokensPostRequest(
    RootModel[Union[V3UserTokensPostRequest1, V3UserTokensPostRequest2]]
):
    root: Union[V3UserTokensPostRequest1, V3UserTokensPostRequest2]


class V3UserTokensPostResponse(BaseModel):
    bearerToken: str = Field(
        ...,
        description="The authentication token's actual value. This token is only provided in this response, and can never be retrieved again in the future. Be sure to save it somewhere safe!",
        examples=['uRKJSTt0L4RaSkiMj41QTkxM'],
    )
    token: AuthToken


class V3UserTokensTokenIdDeleteResponse(BaseModel):
    tokenId: str = Field(
        ...,
        description='The unique identifier of the token that was deleted.',
        examples=['5d9f2ebd38ddca62e5d51e9c1704c72530bdc8bfdd41e782a6687c48399e8391'],
    )


class Creator4(BaseModel):
    email: str = Field(
        ...,
        description='Email of the user who created the alias',
        examples=['john-doe@gmail.com'],
    )
    uid: str = Field(
        ...,
        description='ID of the user who created the alias',
        examples=['96SnxkFiMyVKsK3pnoHfx3Hz'],
    )
    username: str = Field(
        ...,
        description='Username of the user who created the alias',
        examples=['john-doe'],
    )


class Deployment(BaseModel):
    id: str = Field(
        ...,
        description='The deployment unique identifier',
        examples=['dpl_5m8CQaRBm3FnWRW1od3wKTpaECPx'],
    )
    meta: Optional[str] = Field(
        None, description='The deployment metadata', examples=[{}]
    )
    url: str = Field(
        ...,
        description='The deployment unique URL',
        examples=['my-instant-deployment-3ij3cxz9qr.now.sh'],
    )


class RedirectStatusCode(Enum):
    int_301 = 301
    int_302 = 302
    int_307 = 307
    int_308 = 308


class Alias1(BaseModel):
    alias: str = Field(
        ...,
        description='The alias name, it could be a `.vercel.app` subdomain or a custom domain',
        examples=['my-alias.vercel.app'],
    )
    created: datetime = Field(
        ...,
        description='The date when the alias was created',
        examples=['2017-04-26T23:00:34.232Z'],
    )
    createdAt: Optional[float] = Field(
        None,
        description='The date when the alias was created in milliseconds since the UNIX epoch',
        examples=[1540095775941],
    )
    creator: Optional[Creator4] = Field(
        None, description='Information of the user who created the alias'
    )
    deletedAt: Optional[float] = Field(
        None,
        description='The date when the alias was deleted in milliseconds since the UNIX epoch',
        examples=[1540095775941],
    )
    deployment: Optional[Deployment] = Field(
        None, description='A map with the deployment ID, URL and metadata'
    )
    deploymentId: Optional[str] = Field(
        ...,
        description='The deployment ID',
        examples=['dpl_5m8CQaRBm3FnWRW1od3wKTpaECPx'],
    )
    projectId: Optional[str] = Field(
        ...,
        description='The unique identifier of the project',
        examples=['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB'],
    )
    protectionBypass: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    redirect: Optional[str] = Field(
        None,
        description='Target destination domain for redirect when the alias is a redirect',
    )
    redirectStatusCode: Optional[RedirectStatusCode] = Field(
        None, description='Status code to be used on redirect'
    )
    uid: str = Field(..., description='The unique identifier of the alias')
    updatedAt: Optional[float] = Field(
        None,
        description='The date when the alias was updated in milliseconds since the UNIX epoch',
        examples=[1540095775941],
    )


class V4AliasesGetResponse(BaseModel):
    aliases: List[Alias1]
    pagination: Pagination


class Domain(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        description='Get only aliases of the given domain name',
        examples=['my-test-domain.com'],
        max_length=20,
    )


class V4AliasesIdOrAliasGetResponse(BaseModel):
    alias: str = Field(
        ...,
        description='The alias name, it could be a `.vercel.app` subdomain or a custom domain',
        examples=['my-alias.vercel.app'],
    )
    created: datetime = Field(
        ...,
        description='The date when the alias was created',
        examples=['2017-04-26T23:00:34.232Z'],
    )
    createdAt: Optional[float] = Field(
        None,
        description='The date when the alias was created in milliseconds since the UNIX epoch',
        examples=[1540095775941],
    )
    creator: Optional[Creator4] = Field(
        None, description='Information of the user who created the alias'
    )
    deletedAt: Optional[float] = Field(
        None,
        description='The date when the alias was deleted in milliseconds since the UNIX epoch',
        examples=[1540095775941],
    )
    deployment: Optional[Deployment] = Field(
        None, description='A map with the deployment ID, URL and metadata'
    )
    deploymentId: Optional[str] = Field(
        ...,
        description='The deployment ID',
        examples=['dpl_5m8CQaRBm3FnWRW1od3wKTpaECPx'],
    )
    projectId: Optional[str] = Field(
        ...,
        description='The unique identifier of the project',
        examples=['prj_12HKQaOmR5t5Uy6vdcQsNIiZgHGB'],
    )
    protectionBypass: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    redirect: Optional[str] = Field(
        None,
        description='Target destination domain for redirect when the alias is a redirect',
    )
    redirectStatusCode: Optional[RedirectStatusCode] = Field(
        None, description='Status code to be used on redirect'
    )
    uid: str = Field(..., description='The unique identifier of the alias')
    updatedAt: Optional[float] = Field(
        None,
        description='The date when the alias was updated in milliseconds since the UNIX epoch',
        examples=[1540095775941],
    )


class V4DomainsPostRequest1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    method: str = Field(
        ...,
        description='The domain operation to perform.',
        examples=['transfer-in', 'move-in', 'transfer-in', 'add'],
    )
    name: str = Field(
        ..., description='The domain name you want to add.', examples=['example.com']
    )
    token: Optional[str] = Field(
        None,
        description='The move-in token from Move Requested email.',
        examples=['fdhfr820ad#@FAdlj$$'],
    )


class V4DomainsPostRequest2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    method: str = Field(
        ...,
        description='The domain operation to perform.',
        examples=['transfer-in', 'move-in', 'transfer-in', 'add'],
    )
    authCode: Optional[str] = Field(
        None,
        description='The authorization code assigned to the domain.',
        examples=['fdhfr820ad#@FAdlj$$'],
    )
    expectedPrice: Optional[float] = Field(
        None,
        description='The price you expect to be charged for the required 1 year renewal.',
        examples=[8],
    )
    name: str = Field(
        ..., description='The domain name you want to add.', examples=['example.com']
    )


class V4DomainsPostRequest3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    method: Optional[str] = Field(
        None,
        description='The domain operation to perform.',
        examples=['transfer-in', 'move-in', 'transfer-in', 'add'],
    )
    cdnEnabled: Optional[bool] = Field(
        None,
        description='Whether the domain has the Vercel Edge Network enabled or not.',
        examples=[True],
    )
    name: str = Field(
        ..., description='The domain name you want to add.', examples=['example.com']
    )


class V4DomainsPostRequest(
    RootModel[
        Union[V4DomainsPostRequest1, V4DomainsPostRequest2, V4DomainsPostRequest3]
    ]
):
    root: Union[V4DomainsPostRequest1, V4DomainsPostRequest2, V4DomainsPostRequest3]


class Creator6(BaseModel):
    customerId: Optional[str] = None
    email: str
    id: str
    isDomainReseller: Optional[bool] = None
    username: str


class ServiceType(Enum):
    zeit_world = 'zeit.world'
    external = 'external'
    na = 'na'


class Domain1(BaseModel):
    boughtAt: Optional[float] = Field(
        ...,
        description='If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.',
        examples=[1613602938882],
    )
    createdAt: float = Field(
        ...,
        description='Timestamp in milliseconds when the domain was created in the registry.',
        examples=[1613602938882],
    )
    creator: Creator6 = Field(
        ...,
        description="An object containing information of the domain creator, including the user's id, username, and email.",
        examples=[
            {
                'email': 'demo@example.com',
                'id': 'ZspSRT4ljIEEmMHgoDwKWDei',
                'username': 'vercel_user',
            }
        ],
    )
    customNameservers: Optional[List[str]] = Field(
        None,
        description='A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.',
        examples=[['ns1.nameserver.net', 'ns2.nameserver.net']],
    )
    expiresAt: Optional[float] = Field(
        ...,
        description='Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.',
        examples=[1613602938882],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the domain.',
        examples=['EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1'],
    )
    intendedNameservers: List[str] = Field(
        ...,
        description='A list of the intended nameservers for the domain to point to Vercel DNS.',
        examples=[['ns1.vercel-dns.com', 'ns2.vercel-dns.com']],
    )
    name: str = Field(..., description='The domain name.', examples=['example.com'])
    nameservers: List[str] = Field(
        ...,
        description='A list of the current nameservers of the domain.',
        examples=[['ns1.nameserver.net', 'ns2.nameserver.net']],
    )
    orderedAt: Optional[float] = Field(
        None,
        description='Timestamp in milliseconds at which the domain was ordered.',
        examples=[1613602938882],
    )
    renew: Optional[bool] = Field(
        None,
        description='Indicates whether the domain is set to automatically renew.',
        examples=[True],
    )
    serviceType: ServiceType = Field(
        ...,
        description='The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.',
        examples=['zeit.world'],
    )
    transferStartedAt: Optional[float] = Field(
        None,
        description='If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.',
        examples=[1613602938882],
    )
    transferredAt: Optional[float] = Field(
        None,
        description='Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.',
        examples=[1613602938882],
    )
    verified: bool = Field(
        ..., description='If the domain has the ownership verified.', examples=[True]
    )


class V4DomainsPostResponse(BaseModel):
    domain: Domain1


class V4DomainsBuyPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expectedPrice: Optional[float] = Field(
        None,
        description='The price you expect to be charged for the purchase.',
        examples=[10],
    )
    name: str = Field(
        ..., description='The domain name to purchase.', examples=['example.com']
    )
    renew: Optional[bool] = Field(
        None,
        description='Indicates whether the domain should be automatically renewed.',
        examples=[True],
    )


class Domain2(BaseModel):
    created: float
    ns: List[str]
    pending: bool
    uid: str
    verified: bool


class V4DomainsBuyPostResponse(BaseModel):
    domain: Domain2


class Type138(Enum):
    new = 'new'
    renewal = 'renewal'


class V4DomainsPriceGetResponse(BaseModel):
    period: float = Field(
        ...,
        description='The number of years the domain could be held before paying again.',
        examples=[1],
    )
    price: float = Field(..., description='The domain price in USD.', examples=[20])


class V4DomainsStatusGetResponse(BaseModel):
    available: bool


class Type140(Enum):
    A = 'A'
    AAAA = 'AAAA'
    ALIAS = 'ALIAS'
    CAA = 'CAA'
    CNAME = 'CNAME'
    MX = 'MX'
    SRV = 'SRV'
    TXT = 'TXT'
    NS = 'NS'


class Record(BaseModel):
    created: Optional[float] = None
    createdAt: Optional[float] = None
    creator: str
    id: str
    mxPriority: Optional[float] = None
    name: str
    priority: Optional[float] = None
    slug: str
    type: Type140
    updated: Optional[float] = None
    updatedAt: Optional[float] = None
    value: str


class V4DomainsDomainRecordsGetResponse1(BaseModel):
    records: List[Record]


class Record1(BaseModel):
    created: Optional[float] = None
    createdAt: Optional[float] = None
    creator: str
    id: str
    mxPriority: Optional[float] = None
    name: str
    priority: Optional[float] = None
    slug: str
    type: Type140
    updated: Optional[float] = None
    updatedAt: Optional[float] = None
    value: str


class V4DomainsDomainRecordsGetResponse2(BaseModel):
    pagination: Pagination
    records: List[Record1]


class V4DomainsDomainRecordsGetResponse(
    RootModel[
        Union[
            str, V4DomainsDomainRecordsGetResponse1, V4DomainsDomainRecordsGetResponse2
        ]
    ]
):
    root: Union[
        str, V4DomainsDomainRecordsGetResponse1, V4DomainsDomainRecordsGetResponse2
    ]


class Domain3(BaseModel):
    boughtAt: Optional[float] = Field(
        ...,
        description='If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.',
        examples=[1613602938882],
    )
    createdAt: float = Field(
        ...,
        description='Timestamp in milliseconds when the domain was created in the registry.',
        examples=[1613602938882],
    )
    creator: Creator6 = Field(
        ...,
        description="An object containing information of the domain creator, including the user's id, username, and email.",
        examples=[
            {
                'email': 'demo@example.com',
                'id': 'ZspSRT4ljIEEmMHgoDwKWDei',
                'username': 'vercel_user',
            }
        ],
    )
    customNameservers: Optional[List[str]] = Field(
        None,
        description='A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.',
        examples=[['ns1.nameserver.net', 'ns2.nameserver.net']],
    )
    expiresAt: Optional[float] = Field(
        ...,
        description='Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.',
        examples=[1613602938882],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the domain.',
        examples=['EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1'],
    )
    intendedNameservers: List[str] = Field(
        ...,
        description='A list of the intended nameservers for the domain to point to Vercel DNS.',
        examples=[['ns1.vercel-dns.com', 'ns2.vercel-dns.com']],
    )
    name: str = Field(..., description='The domain name.', examples=['example.com'])
    nameservers: List[str] = Field(
        ...,
        description='A list of the current nameservers of the domain.',
        examples=[['ns1.nameserver.net', 'ns2.nameserver.net']],
    )
    orderedAt: Optional[float] = Field(
        None,
        description='Timestamp in milliseconds at which the domain was ordered.',
        examples=[1613602938882],
    )
    renew: Optional[bool] = Field(
        None,
        description='Indicates whether the domain is set to automatically renew.',
        examples=[True],
    )
    serviceType: ServiceType = Field(
        ...,
        description='The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.',
        examples=['zeit.world'],
    )
    transferStartedAt: Optional[float] = Field(
        None,
        description='If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.',
        examples=[1613602938882],
    )
    transferredAt: Optional[float] = Field(
        None,
        description='Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.',
        examples=[1613602938882],
    )
    verified: bool = Field(
        ..., description='If the domain has the ownership verified.', examples=[True]
    )


class V5DomainsGetResponse(BaseModel):
    domains: List[Domain3]
    pagination: Pagination


class Domain4(BaseModel):
    boughtAt: Optional[float] = Field(
        ...,
        description='If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.',
        examples=[1613602938882],
    )
    createdAt: float = Field(
        ...,
        description='Timestamp in milliseconds when the domain was created in the registry.',
        examples=[1613602938882],
    )
    creator: Creator6 = Field(
        ...,
        description="An object containing information of the domain creator, including the user's id, username, and email.",
        examples=[
            {
                'email': 'demo@example.com',
                'id': 'ZspSRT4ljIEEmMHgoDwKWDei',
                'username': 'vercel_user',
            }
        ],
    )
    customNameservers: Optional[List[str]] = Field(
        None,
        description='A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.',
        examples=[['ns1.nameserver.net', 'ns2.nameserver.net']],
    )
    expiresAt: Optional[float] = Field(
        ...,
        description='Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.',
        examples=[1613602938882],
    )
    id: str = Field(
        ...,
        description='The unique identifier of the domain.',
        examples=['EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1'],
    )
    intendedNameservers: List[str] = Field(
        ...,
        description='A list of the intended nameservers for the domain to point to Vercel DNS.',
        examples=[['ns1.vercel-dns.com', 'ns2.vercel-dns.com']],
    )
    name: str = Field(..., description='The domain name.', examples=['example.com'])
    nameservers: List[str] = Field(
        ...,
        description='A list of the current nameservers of the domain.',
        examples=[['ns1.nameserver.net', 'ns2.nameserver.net']],
    )
    orderedAt: Optional[float] = Field(
        None,
        description='Timestamp in milliseconds at which the domain was ordered.',
        examples=[1613602938882],
    )
    renew: Optional[bool] = Field(
        None,
        description='Indicates whether the domain is set to automatically renew.',
        examples=[True],
    )
    serviceType: ServiceType = Field(
        ...,
        description='The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.',
        examples=['zeit.world'],
    )
    suffix: bool
    transferStartedAt: Optional[float] = Field(
        None,
        description='If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.',
        examples=[1613602938882],
    )
    transferredAt: Optional[float] = Field(
        None,
        description='Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.',
        examples=[1613602938882],
    )
    verified: bool = Field(
        ..., description='If the domain has the ownership verified.', examples=[True]
    )


class V5DomainsDomainGetResponse(BaseModel):
    domain: Domain4


class V5UserTokensGetResponse(BaseModel):
    pagination: Pagination
    testingToken: AuthToken
    tokens: List[AuthToken]


class V5UserTokensTokenIdGetResponse(BaseModel):
    token: AuthToken


class Target11(Enum):
    production = 'production'
    preview = 'preview'


class Creator9(BaseModel):
    email: Optional[str] = Field(
        None,
        description='The email address of the user.',
        examples=['example@example.com'],
    )
    githubLogin: Optional[str] = Field(
        None, description='The GitHub login of the user.', examples=['johndoe']
    )
    gitlabLogin: Optional[str] = Field(
        None, description='The GitLab login of the user.', examples=['johndoe']
    )
    uid: str = Field(
        ...,
        description='The unique identifier of the user.',
        examples=['eLrCnEgbKhsHyfbiNR7E8496'],
    )
    username: Optional[str] = Field(
        None, description='The username of the user.', examples=['johndoe']
    )


class Source45(Enum):
    cli = 'cli'
    git = 'git'
    import_ = 'import'
    import_repo = 'import/repo'
    clone_repo = 'clone/repo'


class State1(Enum):
    BUILDING = 'BUILDING'
    ERROR = 'ERROR'
    INITIALIZING = 'INITIALIZING'
    QUEUED = 'QUEUED'
    READY = 'READY'
    CANCELED = 'CANCELED'


class Target12(Enum):
    production = 'production'
    staging = 'staging'


class Type142(Enum):
    LAMBDAS = 'LAMBDAS'


class Deployment2(BaseModel):
    aliasAssigned: Optional[Union[float, bool]] = None
    aliasError: Optional[AliasError] = Field(
        None, description='An error object in case aliasing of the deployment failed.'
    )
    buildingAt: Optional[float] = Field(
        None,
        description='Timestamp of when the deployment started building at.',
        examples=[1609492210000],
    )
    checksConclusion: Optional[ChecksConclusion] = Field(
        None, description='Conclusion for checks'
    )
    checksState: Optional[ChecksState] = Field(
        None, description='State of all registered checks'
    )
    created: float = Field(
        ...,
        description='Timestamp of when the deployment got created.',
        examples=[1609492210000],
    )
    createdAt: Optional[float] = Field(
        None,
        description='Timestamp of when the deployment got created.',
        examples=[1609492210000],
    )
    creator: Creator9 = Field(
        ..., description='Metadata information of the user who created the deployment.'
    )
    inspectorUrl: Optional[str] = Field(
        ...,
        description='Vercel URL to inspect the deployment.',
        examples=['https://vercel.com/acme/nextjs/J1hXN00qjUeoYfpEEf7dnDtpSiVq'],
    )
    isRollbackCandidate: Optional[bool] = Field(
        None, description='Deployment can be used for instant rollback'
    )
    meta: Optional[Dict[str, str]] = Field(
        None,
        description="An object containing the deployment's metadata",
        examples=[{'foo': 'bar'}],
    )
    name: str = Field(..., description='The name of the deployment.', examples=['docs'])
    ready: Optional[float] = Field(
        None,
        description='Timestamp of when the deployment got ready.',
        examples=[1609492210000],
    )
    source: Optional[Source45] = Field(
        None, description='The source of the deployment.', examples=['cli']
    )
    state: Optional[State1] = Field(
        None, description='In which state is the deployment.', examples=['READY']
    )
    target: Optional[Target12] = Field(
        None,
        description='On which environment has the deployment been deployed to.',
        examples=['production'],
    )
    type: Type142 = Field(
        ..., description='The type of the deployment.', examples=['LAMBDAS']
    )
    uid: str = Field(
        ...,
        description='The unique identifier of the deployment.',
        examples=['dpl_2euZBFqxYdDMDG1jTrHFnNZ2eUVa'],
    )
    url: str = Field(
        ...,
        description='The URL of the deployment.',
        examples=['docs-9jaeg38me.vercel.app'],
    )


class V6DeploymentsGetResponse(BaseModel):
    deployments: List[Deployment2]
    pagination: Pagination


class Target13(Enum):
    production = 'production'
    preview = 'preview'


class V6DeploymentsIdFilesGetResponse(RootModel[List[FileTree]]):
    root: List[FileTree]


class V6DomainsDomainDeleteResponse(BaseModel):
    uid: str


class AcceptedChallenge(Enum):
    dns_01 = 'dns-01'
    http_01 = 'http-01'


class ConfiguredBy(Enum):
    CNAME = 'CNAME'
    A = 'A'
    http = 'http'


class V6DomainsDomainConfigGetResponse(BaseModel):
    acceptedChallenges: Optional[List[AcceptedChallenge]] = Field(
        None, description='Which challenge types the domain can use for issuing certs.'
    )
    configuredBy: Optional[ConfiguredBy] = Field(
        None,
        description="How we see the domain's configuration. - `CNAME`: Domain has a CNAME pointing to Vercel. - `A`: Domain's A record is resolving to Vercel. - `http`: Domain is resolving to Vercel but may be behind a Proxy. - `null`: Domain is not resolving to Vercel.",
    )
    misconfigured: bool = Field(
        ...,
        description='Whether or not the domain is configured AND we can automatically generate a TLS certificate.',
    )


class V7CertsPostRequest(BaseModel):
    cns: Optional[List[str]] = Field(
        None, description='The common names the cert should be issued for'
    )


class V7CertsPostResponse(BaseModel):
    autoRenew: bool
    cns: List[str]
    createdAt: float
    expiresAt: float
    id: str


class V7CertsPutRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ca: str = Field(..., description='The certificate authority')
    cert: str = Field(..., description='The certificate')
    key: str = Field(..., description='The certificate key')
    skipValidation: Optional[bool] = Field(
        None, description='Skip validation of the certificate'
    )


class V7CertsPutResponse(BaseModel):
    autoRenew: bool
    cns: List[str]
    createdAt: float
    expiresAt: float
    id: str


class V7CertsIdDeleteResponse(BaseModel):
    pass


class V7CertsIdGetResponse(BaseModel):
    autoRenew: bool
    cns: List[str]
    createdAt: float
    expiresAt: float
    id: str


class V8ArtifactsPostRequest(BaseModel):
    hashes: List[str] = Field(..., description='artifact hashes')


class V8ArtifactsPostResponse1(BaseModel):
    size: float
    tag: Optional[str] = None
    taskDurationMs: float


class V8ArtifactsPostResponse2(BaseModel):
    message: str
    name: str
    stack: Optional[str] = None


class V8ArtifactsPostResponse(
    RootModel[
        Optional[Dict[str, Union[V8ArtifactsPostResponse1, V8ArtifactsPostResponse2]]]
    ]
):
    root: Optional[
        Dict[str, Union[V8ArtifactsPostResponse1, V8ArtifactsPostResponse2]]
    ] = None


class Event5(Enum):
    HIT = 'HIT'
    MISS = 'MISS'


class Source46(Enum):
    LOCAL = 'LOCAL'
    REMOTE = 'REMOTE'


class V8ArtifactsEventsPostRequestItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    duration: Optional[float] = Field(
        None,
        description='The time taken to generate the artifact. This should be sent as a body parameter on `HIT` events.',
        examples=[400],
    )
    event: Event5 = Field(
        ...,
        description='One of `HIT` or `MISS`. `HIT` specifies that a cached artifact for `hash` was found in the cache. `MISS` specifies that a cached artifact with `hash` was not found.',
    )
    hash: str = Field(
        ..., description='The artifact hash', examples=['12HKQaOmR5t5Uy6vdcQsNIiZgHGB']
    )
    sessionId: str = Field(
        ...,
        description='A UUID (universally unique identifer) for the session that generated this event.',
    )
    source: Source46 = Field(
        ...,
        description="One of `LOCAL` or `REMOTE`. `LOCAL` specifies that the cache event was from the user's filesystem cache. `REMOTE` specifies that the cache event is from a remote cache.",
    )


class V8ArtifactsEventsPostRequest(RootModel[List[V8ArtifactsEventsPostRequestItem]]):
    root: List[V8ArtifactsEventsPostRequestItem]


class Status8(Enum):
    disabled = 'disabled'
    enabled = 'enabled'
    over_limit = 'over_limit'
    paused = 'paused'


class V8ArtifactsStatusGetResponse(BaseModel):
    status: Status8


class V8ArtifactsHashPutResponse(BaseModel):
    urls: List[str] = Field(
        ...,
        description='Array of URLs where the artifact was updated',
        examples=[
            ['https://api.vercel.com/v2/now/artifact/12HKQaOmR5t5Uy6vdcQsNIiZgHGB']
        ],
    )


class GitForkProtection(Enum):
    field_1 = '1'
    field_0 = '0'


class Analytics1(BaseModel):
    canceledAt: Optional[float] = None
    disabledAt: float
    enabledAt: float
    id: str
    paidAt: Optional[float] = None
    sampleRatePercent: Optional[float] = None
    spendLimitInDollars: Optional[float] = None


class TargetEnum8(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'


class Target14(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'


class Type143(Enum):
    secret = 'secret'
    system = 'system'
    encrypted = 'encrypted'
    plain = 'plain'
    sensitive = 'sensitive'


class EnvItem(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: str
    target: Optional[Union[List[TargetEnum8], Target14]] = None
    type: Type143
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: str


class Framework3(Enum):
    blitzjs = 'blitzjs'
    nextjs = 'nextjs'
    gatsby = 'gatsby'
    remix = 'remix'
    astro = 'astro'
    hexo = 'hexo'
    eleventy = 'eleventy'
    docusaurus_2 = 'docusaurus-2'
    docusaurus = 'docusaurus'
    preact = 'preact'
    solidstart = 'solidstart'
    dojo = 'dojo'
    ember = 'ember'
    vue = 'vue'
    scully = 'scully'
    ionic_angular = 'ionic-angular'
    angular = 'angular'
    polymer = 'polymer'
    svelte = 'svelte'
    sveltekit = 'sveltekit'
    sveltekit_1 = 'sveltekit-1'
    ionic_react = 'ionic-react'
    create_react_app = 'create-react-app'
    gridsome = 'gridsome'
    umijs = 'umijs'
    sapper = 'sapper'
    saber = 'saber'
    stencil = 'stencil'
    nuxtjs = 'nuxtjs'
    redwoodjs = 'redwoodjs'
    hugo = 'hugo'
    jekyll = 'jekyll'
    brunch = 'brunch'
    middleman = 'middleman'
    zola = 'zola'
    hydrogen = 'hydrogen'
    vite = 'vite'
    vitepress = 'vitepress'
    vuepress = 'vuepress'
    parcel = 'parcel'
    sanity = 'sanity'


class JobStatus(Enum):
    succeeded = 'succeeded'
    failed = 'failed'
    skipped = 'skipped'
    pending = 'pending'
    in_progress = 'in-progress'


class LastRollbackTarget(BaseModel):
    fromDeploymentId: str
    jobStatus: JobStatus
    requestedAt: float
    toDeploymentId: str


class Build7(BaseModel):
    dest: Optional[str] = None
    src: Optional[str] = None
    use: str


class Creator10(BaseModel):
    email: str
    githubLogin: Optional[str] = None
    gitlabLogin: Optional[str] = None
    uid: str
    username: str


class ReadyState9(Enum):
    BUILDING = 'BUILDING'
    ERROR = 'ERROR'
    INITIALIZING = 'INITIALIZING'
    QUEUED = 'QUEUED'
    READY = 'READY'
    CANCELED = 'CANCELED'


class Type144(Enum):
    LAMBDAS = 'LAMBDAS'


class LatestDeployment(BaseModel):
    alias: Optional[List[str]] = None
    aliasAssigned: Optional[Union[float, bool]] = None
    aliasError: Optional[AliasError] = None
    aliasFinal: Optional[str] = None
    automaticAliases: Optional[List[str]] = None
    buildingAt: Optional[float] = None
    builds: Optional[List[Build7]] = None
    checksConclusion: Optional[ChecksConclusion] = None
    checksState: Optional[ChecksState] = None
    createdAt: float
    createdIn: str
    creator: Optional[Creator10] = None
    deploymentHostname: str
    forced: Optional[bool] = None
    id: str
    meta: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    monorepoManager: Optional[str] = None
    name: str
    plan: Plan1
    previewCommentsEnabled: Optional[bool] = Field(
        None,
        description='Whether or not preview comments are enabled for the deployment',
        examples=[False],
    )
    private: bool
    readyAt: Optional[float] = None
    readyState: ReadyState9
    requestedAt: Optional[float] = None
    target: Optional[str] = None
    teamId: Optional[str] = None
    type: Type144
    url: str
    userId: str
    withCache: Optional[bool] = None


class DeployHook(BaseModel):
    createdAt: Optional[float] = None
    id: str
    name: str
    ref: str
    url: str


class Type145(Enum):
    github = 'github'


class Link(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    org: Optional[str] = None
    productionBranch: Optional[str] = None
    repo: Optional[str] = None
    repoId: Optional[float] = None
    sourceless: Optional[bool] = None
    type: Optional[Type145] = None
    updatedAt: Optional[float] = None


class Type146(Enum):
    gitlab = 'gitlab'


class Link1(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    productionBranch: Optional[str] = None
    projectId: Optional[str] = None
    projectName: Optional[str] = None
    projectNameWithNamespace: Optional[str] = None
    projectNamespace: Optional[str] = None
    projectUrl: Optional[str] = None
    sourceless: Optional[bool] = None
    type: Optional[Type146] = None
    updatedAt: Optional[float] = None


class Type147(Enum):
    bitbucket = 'bitbucket'


class Link2(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    name: Optional[str] = None
    owner: Optional[str] = None
    productionBranch: Optional[str] = None
    slug: Optional[str] = None
    sourceless: Optional[bool] = None
    type: Optional[Type147] = None
    updatedAt: Optional[float] = None
    uuid: Optional[str] = None
    workspaceUuid: Optional[str] = None


class NodeVersion(Enum):
    field_18_x = '18.x'
    field_16_x = '16.x'
    field_14_x = '14.x'
    field_12_x = '12.x'
    field_10_x = '10.x'


class DeploymentType(Enum):
    preview = 'preview'
    all = 'all'


class PasswordProtection1(BaseModel):
    deploymentType: DeploymentType


class Permissions(BaseModel):
    Monitoring: Optional[List[ACLAction]] = None
    aliasGlobal: Optional[List[ACLAction]] = None
    aliasProject: Optional[List[ACLAction]] = None
    aliasProtectionBypass: Optional[List[ACLAction]] = None
    analytics: Optional[List[ACLAction]] = None
    analyticsSampling: Optional[List[ACLAction]] = None
    analyticsUsage: Optional[List[ACLAction]] = None
    auditLog: Optional[List[ACLAction]] = None
    awsBillingIntegration: Optional[List[ACLAction]] = None
    billingAddress: Optional[List[ACLAction]] = None
    billingInformation: Optional[List[ACLAction]] = None
    billingInvoice: Optional[List[ACLAction]] = None
    billingInvoiceEmailRecipient: Optional[List[ACLAction]] = None
    billingInvoiceLanguage: Optional[List[ACLAction]] = None
    billingPlan: Optional[List[ACLAction]] = None
    billingPurchaseOrder: Optional[List[ACLAction]] = None
    billingTaxId: Optional[List[ACLAction]] = None
    cacheArtifact: Optional[List[ACLAction]] = None
    cacheArtifactUsageEvent: Optional[List[ACLAction]] = None
    concurrentBuilds: Optional[List[ACLAction]] = None
    connect: Optional[List[ACLAction]] = None
    connectConfiguration: Optional[List[ACLAction]] = None
    connectConfigurationLink: Optional[List[ACLAction]] = None
    deployment: Optional[List[ACLAction]] = None
    deploymentCheck: Optional[List[ACLAction]] = None
    deploymentCheckPreview: Optional[List[ACLAction]] = None
    deploymentPreview: Optional[List[ACLAction]] = None
    deploymentPrivate: Optional[List[ACLAction]] = None
    deploymentProductionGit: Optional[List[ACLAction]] = None
    deploymentRollback: Optional[List[ACLAction]] = None
    domain: Optional[List[ACLAction]] = None
    domainAcceptDelegation: Optional[List[ACLAction]] = None
    domainAuthCodes: Optional[List[ACLAction]] = None
    domainCertificate: Optional[List[ACLAction]] = None
    domainCheckConfig: Optional[List[ACLAction]] = None
    domainMove: Optional[List[ACLAction]] = None
    domainPurchase: Optional[List[ACLAction]] = None
    domainRecord: Optional[List[ACLAction]] = None
    domainTransferIn: Optional[List[ACLAction]] = None
    edgeConfig: Optional[List[ACLAction]] = None
    edgeConfigItem: Optional[List[ACLAction]] = None
    edgeConfigToken: Optional[List[ACLAction]] = None
    endpointVerification: Optional[List[ACLAction]] = None
    event: Optional[List[ACLAction]] = None
    fileUpload: Optional[List[ACLAction]] = None
    gitRepository: Optional[List[ACLAction]] = None
    integration: Optional[List[ACLAction]] = None
    integrationConfiguration: Optional[List[ACLAction]] = None
    integrationConfigurationProjects: Optional[List[ACLAction]] = None
    integrationConfigurationTransfer: Optional[List[ACLAction]] = None
    integrationVercelConfigurationOverride: Optional[List[ACLAction]] = None
    job: Optional[List[ACLAction]] = None
    logDrain: Optional[List[ACLAction]] = None
    monitoringChart: Optional[List[ACLAction]] = None
    monitoringQuery: Optional[List[ACLAction]] = None
    notificationDomainConfiguration: Optional[List[ACLAction]] = None
    notificationDomainExpire: Optional[List[ACLAction]] = None
    notificationDomainMoved: Optional[List[ACLAction]] = None
    notificationDomainPurchase: Optional[List[ACLAction]] = None
    notificationDomainRenewal: Optional[List[ACLAction]] = None
    notificationDomainTransfer: Optional[List[ACLAction]] = None
    notificationDomainUnverified: Optional[List[ACLAction]] = None
    notificationPaymentFailed: Optional[List[ACLAction]] = None
    notificationSpendCap: Optional[List[ACLAction]] = None
    notificationUsageAlert: Optional[List[ACLAction]] = None
    openTelemetryEndpoint: Optional[List[ACLAction]] = None
    passwordProtection: Optional[List[ACLAction]] = None
    paymentMethod: Optional[List[ACLAction]] = None
    permissions: Optional[List[ACLAction]] = None
    previewDeploymentSuffix: Optional[List[ACLAction]] = None
    proTrialOnboarding: Optional[List[ACLAction]] = None
    project: Optional[List[ACLAction]] = None
    projectDeploymentHook: Optional[List[ACLAction]] = None
    projectDomain: Optional[List[ACLAction]] = None
    projectDomainMove: Optional[List[ACLAction]] = None
    projectEnvVars: Optional[List[ACLAction]] = None
    projectEnvVarsProduction: Optional[List[ACLAction]] = None
    projectEnvVarsUnownedByIntegration: Optional[List[ACLAction]] = None
    projectIntegrationConfiguration: Optional[List[ACLAction]] = None
    projectLink: Optional[List[ACLAction]] = None
    projectMember: Optional[List[ACLAction]] = None
    projectProductionBranch: Optional[List[ACLAction]] = None
    projectProtectionBypass: Optional[List[ACLAction]] = None
    projectTransfer: Optional[List[ACLAction]] = None
    rateLimit: Optional[List[ACLAction]] = None
    redis: Optional[List[ACLAction]] = None
    remoteCaching: Optional[List[ACLAction]] = None
    samlConfig: Optional[List[ACLAction]] = None
    secret: Optional[List[ACLAction]] = None
    sensitiveEnvironmentVariablePolicy: Optional[List[ACLAction]] = None
    sharedEnvVars: Optional[List[ACLAction]] = None
    sharedEnvVarsProduction: Optional[List[ACLAction]] = None
    spendCapConfiguration: Optional[List[ACLAction]] = None
    spendCapState: Optional[List[ACLAction]] = None
    supportCase: Optional[List[ACLAction]] = None
    supportCaseComment: Optional[List[ACLAction]] = None
    team: Optional[List[ACLAction]] = None
    teamAccessRequest: Optional[List[ACLAction]] = None
    teamFellowMembership: Optional[List[ACLAction]] = None
    teamInvite: Optional[List[ACLAction]] = None
    teamInviteCode: Optional[List[ACLAction]] = None
    teamJoin: Optional[List[ACLAction]] = None
    teamOwnMembership: Optional[List[ACLAction]] = None
    teamOwnMembershipDisconnectSAML: Optional[List[ACLAction]] = None
    token: Optional[List[ACLAction]] = None
    usage: Optional[List[ACLAction]] = None
    user: Optional[List[ACLAction]] = None
    userConnection: Optional[List[ACLAction]] = None
    webAnalytics: Optional[List[ACLAction]] = None
    webhook: Optional[List[ACLAction]] = None
    webhook_event: Optional[List[ACLAction]] = Field(None, alias='webhook-event')


class SsoProtection1(BaseModel):
    deploymentType: DeploymentType


class Project(BaseModel):
    accountId: str
    analytics: Optional[Analytics1] = None
    autoExposeSystemEnvs: Optional[bool] = None
    buildCommand: Optional[str] = None
    commandForIgnoringBuildStep: Optional[str] = None
    connectConfigurationId: Optional[str] = None
    createdAt: Optional[float] = None
    devCommand: Optional[str] = None
    directoryListing: bool
    enablePreviewFeedback: Optional[bool] = None
    env: Optional[List[EnvItem]] = None
    framework: Optional[Framework3] = None
    gitForkProtection: Optional[bool] = None
    hasFloatingAliases: Optional[bool] = None
    id: str
    installCommand: Optional[str] = None
    lastRollbackTarget: Optional[LastRollbackTarget] = None
    latestDeployments: Optional[List[LatestDeployment]] = None
    link: Optional[Union[Link, Link1, Link2]] = None
    live: Optional[bool] = None
    name: str
    nodeVersion: NodeVersion
    outputDirectory: Optional[str] = None
    passwordProtection: Optional[PasswordProtection1] = None
    permissions: Optional[Permissions] = None
    protectionBypass: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    publicSource: Optional[bool] = None
    rootDirectory: Optional[str] = None
    serverlessFunctionRegion: Optional[str] = None
    skipGitConnectDuringLink: Optional[bool] = None
    sourceFilesOutsideRootDirectory: Optional[bool] = None
    ssoProtection: Optional[SsoProtection1] = None
    targets: Optional[Dict[str, str]] = Field(
        None,
        description="An object containing the deployment's metadata",
        examples=[{'foo': 'bar'}],
    )
    transferCompletedAt: Optional[float] = None
    transferStartedAt: Optional[float] = None
    transferToAccountId: Optional[str] = None
    transferredFromAccountId: Optional[str] = None
    updatedAt: Optional[float] = None


class V9ProjectsGetResponse(BaseModel):
    pagination: Pagination
    projects: List[Project]


class Target15(Enum):
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Productio = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Productio'
    )
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Previe = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Previe'
    )
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Developmen = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Developmen'
    )


class TargetEnum9(Enum):
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Productio = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Productio'
    )
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Previe = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Previe'
    )
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Developmen = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Developmen'
    )


class Type148(Enum):
    system = 'system'
    secret = 'secret'
    encrypted = 'encrypted'
    plain = 'plain'


class EnvironmentVariable(BaseModel):
    gitBranch: Optional[constr(max_length=250)] = Field(
        None,
        description='The git branch of the environment variable',
        examples=['feature-1'],
    )
    key: str = Field(..., description='Name of the ENV variable')
    target: Union[Target15, List[TargetEnum9]] = Field(
        ...,
        description='Deployment Target or Targets in which the ENV variable will be used',
    )
    type: Optional[Type148] = Field(None, description='Type of the ENV variable')
    value: str = Field(..., description='Value for the ENV variable')


class Framework4(Enum):
    NoneType_None = None
    blitzjs = 'blitzjs'
    nextjs = 'nextjs'
    gatsby = 'gatsby'
    remix = 'remix'
    astro = 'astro'
    hexo = 'hexo'
    eleventy = 'eleventy'
    docusaurus_2 = 'docusaurus-2'
    docusaurus = 'docusaurus'
    preact = 'preact'
    solidstart = 'solidstart'
    dojo = 'dojo'
    ember = 'ember'
    vue = 'vue'
    scully = 'scully'
    ionic_angular = 'ionic-angular'
    angular = 'angular'
    polymer = 'polymer'
    svelte = 'svelte'
    sveltekit = 'sveltekit'
    sveltekit_1 = 'sveltekit-1'
    ionic_react = 'ionic-react'
    create_react_app = 'create-react-app'
    gridsome = 'gridsome'
    umijs = 'umijs'
    sapper = 'sapper'
    saber = 'saber'
    stencil = 'stencil'
    nuxtjs = 'nuxtjs'
    redwoodjs = 'redwoodjs'
    hugo = 'hugo'
    jekyll = 'jekyll'
    brunch = 'brunch'
    middleman = 'middleman'
    zola = 'zola'
    hydrogen = 'hydrogen'
    vite = 'vite'
    vitepress = 'vitepress'
    vuepress = 'vuepress'
    parcel = 'parcel'
    sanity = 'sanity'


class Type149(Enum):
    github = 'github'
    gitlab = 'gitlab'
    bitbucket = 'bitbucket'


class GitRepository(BaseModel):
    repo: str = Field(
        ...,
        description='The name of the git repository. For example: \\"vercel/next.js\\"',
    )
    type: Type149 = Field(..., description='The Git Provider of the repository')


class V9ProjectsPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    buildCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The build command for this project. When `null` is used this value will be automatically detected',
    )
    commandForIgnoringBuildStep: Optional[constr(max_length=256)] = None
    devCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The dev command for this project. When `null` is used this value will be automatically detected',
    )
    environmentVariables: Optional[List[EnvironmentVariable]] = Field(
        None, description='Collection of ENV Variables the Project will use'
    )
    framework: Optional[Framework4] = Field(
        None,
        description='The framework that is being used for this project. When `null` is used no framework is selected',
    )
    gitRepository: Optional[GitRepository] = Field(
        None,
        description='The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed',
    )
    installCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The install command for this project. When `null` is used this value will be automatically detected',
    )
    name: constr(pattern=r'^[a-z0-9]([a-z0-9]|-[a-z0-9])*$', max_length=100) = Field(
        ..., description='The desired name for the project', examples=['a-project-name']
    )
    outputDirectory: Optional[constr(max_length=256)] = Field(
        None,
        description='The output directory of the project. When `null` is used this value will be automatically detected',
    )
    publicSource: Optional[bool] = Field(
        None,
        description='Specifies whether the source code and logs of the deployments for this project should be public or not',
    )
    rootDirectory: Optional[constr(max_length=256)] = Field(
        None,
        description='The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root',
    )
    serverlessFunctionRegion: Optional[constr(max_length=4)] = Field(
        None, description='The region to deploy Serverless Functions in this project'
    )
    skipGitConnectDuringLink: Optional[bool] = Field(
        None,
        description='Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.',
    )


class TargetEnum10(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'


class Target16(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'


class Type150(Enum):
    secret = 'secret'
    system = 'system'
    encrypted = 'encrypted'
    plain = 'plain'
    sensitive = 'sensitive'


class EnvItem1(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: str
    target: Optional[Union[List[TargetEnum10], Target16]] = None
    type: Type150
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: str


class Framework5(Enum):
    blitzjs = 'blitzjs'
    nextjs = 'nextjs'
    gatsby = 'gatsby'
    remix = 'remix'
    astro = 'astro'
    hexo = 'hexo'
    eleventy = 'eleventy'
    docusaurus_2 = 'docusaurus-2'
    docusaurus = 'docusaurus'
    preact = 'preact'
    solidstart = 'solidstart'
    dojo = 'dojo'
    ember = 'ember'
    vue = 'vue'
    scully = 'scully'
    ionic_angular = 'ionic-angular'
    angular = 'angular'
    polymer = 'polymer'
    svelte = 'svelte'
    sveltekit = 'sveltekit'
    sveltekit_1 = 'sveltekit-1'
    ionic_react = 'ionic-react'
    create_react_app = 'create-react-app'
    gridsome = 'gridsome'
    umijs = 'umijs'
    sapper = 'sapper'
    saber = 'saber'
    stencil = 'stencil'
    nuxtjs = 'nuxtjs'
    redwoodjs = 'redwoodjs'
    hugo = 'hugo'
    jekyll = 'jekyll'
    brunch = 'brunch'
    middleman = 'middleman'
    zola = 'zola'
    hydrogen = 'hydrogen'
    vite = 'vite'
    vitepress = 'vitepress'
    vuepress = 'vuepress'
    parcel = 'parcel'
    sanity = 'sanity'


class LastRollbackTarget1(BaseModel):
    fromDeploymentId: str
    jobStatus: JobStatus
    requestedAt: float
    toDeploymentId: str


class Type151(Enum):
    LAMBDAS = 'LAMBDAS'


class LatestDeployment1(BaseModel):
    alias: Optional[List[str]] = None
    aliasAssigned: Optional[Union[float, bool]] = None
    aliasError: Optional[AliasError] = None
    aliasFinal: Optional[str] = None
    automaticAliases: Optional[List[str]] = None
    buildingAt: Optional[float] = None
    builds: Optional[List[Build7]] = None
    checksConclusion: Optional[ChecksConclusion] = None
    checksState: Optional[ChecksState] = None
    createdAt: float
    createdIn: str
    creator: Optional[Creator10] = None
    deploymentHostname: str
    forced: Optional[bool] = None
    id: str
    meta: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    monorepoManager: Optional[str] = None
    name: str
    plan: Plan1
    previewCommentsEnabled: Optional[bool] = Field(
        None,
        description='Whether or not preview comments are enabled for the deployment',
        examples=[False],
    )
    private: bool
    readyAt: Optional[float] = None
    readyState: ReadyState9
    requestedAt: Optional[float] = None
    target: Optional[str] = None
    teamId: Optional[str] = None
    type: Type151
    url: str
    userId: str
    withCache: Optional[bool] = None


class Type152(Enum):
    github = 'github'


class Link3(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    org: Optional[str] = None
    productionBranch: Optional[str] = None
    repo: Optional[str] = None
    repoId: Optional[float] = None
    sourceless: Optional[bool] = None
    type: Optional[Type152] = None
    updatedAt: Optional[float] = None


class Type153(Enum):
    gitlab = 'gitlab'


class Link4(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    productionBranch: Optional[str] = None
    projectId: Optional[str] = None
    projectName: Optional[str] = None
    projectNameWithNamespace: Optional[str] = None
    projectNamespace: Optional[str] = None
    projectUrl: Optional[str] = None
    sourceless: Optional[bool] = None
    type: Optional[Type153] = None
    updatedAt: Optional[float] = None


class Type154(Enum):
    bitbucket = 'bitbucket'


class Link5(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    name: Optional[str] = None
    owner: Optional[str] = None
    productionBranch: Optional[str] = None
    slug: Optional[str] = None
    sourceless: Optional[bool] = None
    type: Optional[Type154] = None
    updatedAt: Optional[float] = None
    uuid: Optional[str] = None
    workspaceUuid: Optional[str] = None


class PasswordProtection2(BaseModel):
    deploymentType: DeploymentType


class SsoProtection2(BaseModel):
    deploymentType: DeploymentType


class V9ProjectsPostResponse(BaseModel):
    accountId: str
    analytics: Optional[Analytics1] = None
    autoExposeSystemEnvs: Optional[bool] = None
    buildCommand: Optional[str] = None
    commandForIgnoringBuildStep: Optional[str] = None
    connectConfigurationId: Optional[str] = None
    createdAt: Optional[float] = None
    devCommand: Optional[str] = None
    directoryListing: bool
    enablePreviewFeedback: Optional[bool] = None
    env: Optional[List[EnvItem1]] = None
    framework: Optional[Framework5] = None
    gitForkProtection: Optional[bool] = None
    hasFloatingAliases: Optional[bool] = None
    id: str
    installCommand: Optional[str] = None
    lastRollbackTarget: Optional[LastRollbackTarget1] = None
    latestDeployments: Optional[List[LatestDeployment1]] = None
    link: Optional[Union[Link3, Link4, Link5]] = None
    live: Optional[bool] = None
    name: str
    nodeVersion: NodeVersion
    outputDirectory: Optional[str] = None
    passwordProtection: Optional[PasswordProtection2] = None
    permissions: Optional[Permissions] = None
    protectionBypass: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    publicSource: Optional[bool] = None
    rootDirectory: Optional[str] = None
    serverlessFunctionRegion: Optional[str] = None
    skipGitConnectDuringLink: Optional[bool] = None
    sourceFilesOutsideRootDirectory: Optional[bool] = None
    ssoProtection: Optional[SsoProtection2] = None
    targets: Optional[Dict[str, str]] = Field(
        None,
        description="An object containing the deployment's metadata",
        examples=[{'foo': 'bar'}],
    )
    transferCompletedAt: Optional[float] = None
    transferStartedAt: Optional[float] = None
    transferToAccountId: Optional[str] = None
    transferredFromAccountId: Optional[str] = None
    updatedAt: Optional[float] = None


class Type155(Enum):
    secret = 'secret'
    system = 'system'
    encrypted = 'encrypted'
    plain = 'plain'
    sensitive = 'sensitive'


class EnvItem2(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: str
    target: Optional[Union[List[TargetEnum10], Target16]] = None
    type: Type155
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: str


class LastRollbackTarget2(BaseModel):
    fromDeploymentId: str
    jobStatus: JobStatus
    requestedAt: float
    toDeploymentId: str


class Type156(Enum):
    LAMBDAS = 'LAMBDAS'


class LatestDeployment2(BaseModel):
    alias: Optional[List[str]] = None
    aliasAssigned: Optional[Union[float, bool]] = None
    aliasError: Optional[AliasError] = None
    aliasFinal: Optional[str] = None
    automaticAliases: Optional[List[str]] = None
    buildingAt: Optional[float] = None
    builds: Optional[List[Build7]] = None
    checksConclusion: Optional[ChecksConclusion] = None
    checksState: Optional[ChecksState] = None
    createdAt: float
    createdIn: str
    creator: Optional[Creator10] = None
    deploymentHostname: str
    forced: Optional[bool] = None
    id: str
    meta: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    monorepoManager: Optional[str] = None
    name: str
    plan: Plan1
    previewCommentsEnabled: Optional[bool] = Field(
        None,
        description='Whether or not preview comments are enabled for the deployment',
        examples=[False],
    )
    private: bool
    readyAt: Optional[float] = None
    readyState: ReadyState9
    requestedAt: Optional[float] = None
    target: Optional[str] = None
    teamId: Optional[str] = None
    type: Type156
    url: str
    userId: str
    withCache: Optional[bool] = None


class Type157(Enum):
    github = 'github'


class Link6(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    org: Optional[str] = None
    productionBranch: Optional[str] = None
    repo: Optional[str] = None
    repoId: Optional[float] = None
    sourceless: Optional[bool] = None
    type: Optional[Type157] = None
    updatedAt: Optional[float] = None


class Type158(Enum):
    gitlab = 'gitlab'


class Link7(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    productionBranch: Optional[str] = None
    projectId: Optional[str] = None
    projectName: Optional[str] = None
    projectNameWithNamespace: Optional[str] = None
    projectNamespace: Optional[str] = None
    projectUrl: Optional[str] = None
    sourceless: Optional[bool] = None
    type: Optional[Type158] = None
    updatedAt: Optional[float] = None


class Type159(Enum):
    bitbucket = 'bitbucket'


class Link8(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    name: Optional[str] = None
    owner: Optional[str] = None
    productionBranch: Optional[str] = None
    slug: Optional[str] = None
    sourceless: Optional[bool] = None
    type: Optional[Type159] = None
    updatedAt: Optional[float] = None
    uuid: Optional[str] = None
    workspaceUuid: Optional[str] = None


class PasswordProtection3(BaseModel):
    deploymentType: DeploymentType


class SsoProtection3(BaseModel):
    deploymentType: DeploymentType


class V9ProjectsIdOrNameGetResponse(BaseModel):
    accountId: str
    analytics: Optional[Analytics1] = None
    autoExposeSystemEnvs: Optional[bool] = None
    buildCommand: Optional[str] = None
    commandForIgnoringBuildStep: Optional[str] = None
    connectConfigurationId: Optional[str] = None
    createdAt: Optional[float] = None
    devCommand: Optional[str] = None
    directoryListing: bool
    enablePreviewFeedback: Optional[bool] = None
    env: Optional[List[EnvItem2]] = None
    framework: Optional[Framework5] = None
    gitForkProtection: Optional[bool] = None
    hasFloatingAliases: Optional[bool] = None
    id: str
    installCommand: Optional[str] = None
    lastRollbackTarget: Optional[LastRollbackTarget2] = None
    latestDeployments: Optional[List[LatestDeployment2]] = None
    link: Optional[Union[Link6, Link7, Link8]] = None
    live: Optional[bool] = None
    name: str
    nodeVersion: NodeVersion
    outputDirectory: Optional[str] = None
    passwordProtection: Optional[PasswordProtection3] = None
    permissions: Optional[Permissions] = None
    protectionBypass: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    publicSource: Optional[bool] = None
    rootDirectory: Optional[str] = None
    serverlessFunctionRegion: Optional[str] = None
    skipGitConnectDuringLink: Optional[bool] = None
    sourceFilesOutsideRootDirectory: Optional[bool] = None
    ssoProtection: Optional[SsoProtection3] = None
    targets: Optional[Dict[str, str]] = Field(
        None,
        description="An object containing the deployment's metadata",
        examples=[{'foo': 'bar'}],
    )
    transferCompletedAt: Optional[float] = None
    transferStartedAt: Optional[float] = None
    transferToAccountId: Optional[str] = None
    transferredFromAccountId: Optional[str] = None
    updatedAt: Optional[float] = None


class IdOrName(RootModel[Union[str, bool]]):
    root: Union[str, bool] = Field(
        ..., description='The unique project identifier or the project name'
    )


class Framework7(Enum):
    NoneType_None = None
    blitzjs = 'blitzjs'
    nextjs = 'nextjs'
    gatsby = 'gatsby'
    remix = 'remix'
    astro = 'astro'
    hexo = 'hexo'
    eleventy = 'eleventy'
    docusaurus_2 = 'docusaurus-2'
    docusaurus = 'docusaurus'
    preact = 'preact'
    solidstart = 'solidstart'
    dojo = 'dojo'
    ember = 'ember'
    vue = 'vue'
    scully = 'scully'
    ionic_angular = 'ionic-angular'
    angular = 'angular'
    polymer = 'polymer'
    svelte = 'svelte'
    sveltekit = 'sveltekit'
    sveltekit_1 = 'sveltekit-1'
    ionic_react = 'ionic-react'
    create_react_app = 'create-react-app'
    gridsome = 'gridsome'
    umijs = 'umijs'
    sapper = 'sapper'
    saber = 'saber'
    stencil = 'stencil'
    nuxtjs = 'nuxtjs'
    redwoodjs = 'redwoodjs'
    hugo = 'hugo'
    jekyll = 'jekyll'
    brunch = 'brunch'
    middleman = 'middleman'
    zola = 'zola'
    hydrogen = 'hydrogen'
    vite = 'vite'
    vitepress = 'vitepress'
    vuepress = 'vuepress'
    parcel = 'parcel'
    sanity = 'sanity'


class DeploymentType6(Enum):
    all = 'all'
    preview = 'preview'


class PasswordProtection4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deploymentType: DeploymentType6 = Field(
        ...,
        description='Specify if the password will apply to every Deployment Target or just Preview',
    )
    password: Optional[constr(max_length=72)] = Field(
        None,
        description='The password that will be used to protect Project Deployments',
    )


class SsoProtection4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deploymentType: DeploymentType6 = Field(
        ...,
        description='Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview',
    )


class V9ProjectsIdOrNamePatchRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoExposeSystemEnvs: Optional[bool] = None
    buildCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The build command for this project. When `null` is used this value will be automatically detected',
    )
    commandForIgnoringBuildStep: Optional[constr(max_length=256)] = None
    devCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The dev command for this project. When `null` is used this value will be automatically detected',
    )
    directoryListing: Optional[bool] = None
    enablePreviewFeedback: Optional[bool] = Field(
        None, description='Opt-in to Preview comments on the project level'
    )
    framework: Optional[Framework7] = Field(
        None,
        description='The framework that is being used for this project. When `null` is used no framework is selected',
    )
    gitForkProtection: Optional[bool] = Field(
        None,
        description="Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed",
    )
    installCommand: Optional[constr(max_length=256)] = Field(
        None,
        description='The install command for this project. When `null` is used this value will be automatically detected',
    )
    name: Optional[
        constr(pattern=r'^[a-z0-9]([a-z0-9]|-[a-z0-9])*$', max_length=100)
    ] = Field(
        None,
        description='The desired name for the project',
        examples=['a-project-name'],
    )
    nodeVersion: Optional[NodeVersion] = None
    outputDirectory: Optional[constr(max_length=256)] = Field(
        None,
        description='The output directory of the project. When `null` is used this value will be automatically detected',
    )
    passwordProtection: Optional[PasswordProtection4] = Field(
        None, description='Allows to protect project deployments with a password'
    )
    publicSource: Optional[bool] = Field(
        None,
        description='Specifies whether the source code and logs of the deployments for this project should be public or not',
    )
    rootDirectory: Optional[constr(max_length=256)] = Field(
        None,
        description='The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root',
    )
    serverlessFunctionRegion: Optional[constr(max_length=4)] = Field(
        None, description='The region to deploy Serverless Functions in this project'
    )
    skipGitConnectDuringLink: Optional[bool] = Field(
        None,
        description='Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.',
    )
    sourceFilesOutsideRootDirectory: Optional[bool] = Field(
        None,
        description='Indicates if there are source files outside of the root directory',
    )
    ssoProtection: Optional[SsoProtection4] = Field(
        None,
        description='Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team',
    )


class Type160(Enum):
    secret = 'secret'
    system = 'system'
    encrypted = 'encrypted'
    plain = 'plain'
    sensitive = 'sensitive'


class EnvItem3(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: str
    target: Optional[Union[List[TargetEnum10], Target16]] = None
    type: Type160
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: str


class Framework8(Enum):
    blitzjs = 'blitzjs'
    nextjs = 'nextjs'
    gatsby = 'gatsby'
    remix = 'remix'
    astro = 'astro'
    hexo = 'hexo'
    eleventy = 'eleventy'
    docusaurus_2 = 'docusaurus-2'
    docusaurus = 'docusaurus'
    preact = 'preact'
    solidstart = 'solidstart'
    dojo = 'dojo'
    ember = 'ember'
    vue = 'vue'
    scully = 'scully'
    ionic_angular = 'ionic-angular'
    angular = 'angular'
    polymer = 'polymer'
    svelte = 'svelte'
    sveltekit = 'sveltekit'
    sveltekit_1 = 'sveltekit-1'
    ionic_react = 'ionic-react'
    create_react_app = 'create-react-app'
    gridsome = 'gridsome'
    umijs = 'umijs'
    sapper = 'sapper'
    saber = 'saber'
    stencil = 'stencil'
    nuxtjs = 'nuxtjs'
    redwoodjs = 'redwoodjs'
    hugo = 'hugo'
    jekyll = 'jekyll'
    brunch = 'brunch'
    middleman = 'middleman'
    zola = 'zola'
    hydrogen = 'hydrogen'
    vite = 'vite'
    vitepress = 'vitepress'
    vuepress = 'vuepress'
    parcel = 'parcel'
    sanity = 'sanity'


class LastRollbackTarget3(BaseModel):
    fromDeploymentId: str
    jobStatus: JobStatus
    requestedAt: float
    toDeploymentId: str


class Type161(Enum):
    LAMBDAS = 'LAMBDAS'


class LatestDeployment3(BaseModel):
    alias: Optional[List[str]] = None
    aliasAssigned: Optional[Union[float, bool]] = None
    aliasError: Optional[AliasError] = None
    aliasFinal: Optional[str] = None
    automaticAliases: Optional[List[str]] = None
    buildingAt: Optional[float] = None
    builds: Optional[List[Build7]] = None
    checksConclusion: Optional[ChecksConclusion] = None
    checksState: Optional[ChecksState] = None
    createdAt: float
    createdIn: str
    creator: Optional[Creator10] = None
    deploymentHostname: str
    forced: Optional[bool] = None
    id: str
    meta: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    monorepoManager: Optional[str] = None
    name: str
    plan: Plan1
    previewCommentsEnabled: Optional[bool] = Field(
        None,
        description='Whether or not preview comments are enabled for the deployment',
        examples=[False],
    )
    private: bool
    readyAt: Optional[float] = None
    readyState: ReadyState9
    requestedAt: Optional[float] = None
    target: Optional[str] = None
    teamId: Optional[str] = None
    type: Type161
    url: str
    userId: str
    withCache: Optional[bool] = None


class Type162(Enum):
    github = 'github'


class Link9(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    org: Optional[str] = None
    productionBranch: Optional[str] = None
    repo: Optional[str] = None
    repoId: Optional[float] = None
    sourceless: Optional[bool] = None
    type: Optional[Type162] = None
    updatedAt: Optional[float] = None


class Type163(Enum):
    gitlab = 'gitlab'


class Link10(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    productionBranch: Optional[str] = None
    projectId: Optional[str] = None
    projectName: Optional[str] = None
    projectNameWithNamespace: Optional[str] = None
    projectNamespace: Optional[str] = None
    projectUrl: Optional[str] = None
    sourceless: Optional[bool] = None
    type: Optional[Type163] = None
    updatedAt: Optional[float] = None


class Type164(Enum):
    bitbucket = 'bitbucket'


class Link11(BaseModel):
    createdAt: Optional[float] = None
    deployHooks: List[DeployHook]
    gitCredentialId: Optional[str] = None
    name: Optional[str] = None
    owner: Optional[str] = None
    productionBranch: Optional[str] = None
    slug: Optional[str] = None
    sourceless: Optional[bool] = None
    type: Optional[Type164] = None
    updatedAt: Optional[float] = None
    uuid: Optional[str] = None
    workspaceUuid: Optional[str] = None


class PasswordProtection5(BaseModel):
    deploymentType: DeploymentType6


class SsoProtection5(BaseModel):
    deploymentType: DeploymentType6


class V9ProjectsIdOrNamePatchResponse(BaseModel):
    accountId: str
    analytics: Optional[Analytics1] = None
    autoExposeSystemEnvs: Optional[bool] = None
    buildCommand: Optional[str] = None
    commandForIgnoringBuildStep: Optional[str] = None
    connectConfigurationId: Optional[str] = None
    createdAt: Optional[float] = None
    devCommand: Optional[str] = None
    directoryListing: bool
    enablePreviewFeedback: Optional[bool] = None
    env: Optional[List[EnvItem3]] = None
    framework: Optional[Framework8] = None
    gitForkProtection: Optional[bool] = None
    hasFloatingAliases: Optional[bool] = None
    id: str
    installCommand: Optional[str] = None
    lastRollbackTarget: Optional[LastRollbackTarget3] = None
    latestDeployments: Optional[List[LatestDeployment3]] = None
    link: Optional[Union[Link9, Link10, Link11]] = None
    live: Optional[bool] = None
    name: str
    nodeVersion: NodeVersion
    outputDirectory: Optional[str] = None
    passwordProtection: Optional[PasswordProtection5] = None
    permissions: Optional[Permissions] = None
    protectionBypass: Optional[Dict[str, str]] = Field(
        None, description='Construct a type with a set of properties K of type T'
    )
    publicSource: Optional[bool] = None
    rootDirectory: Optional[str] = None
    serverlessFunctionRegion: Optional[str] = None
    skipGitConnectDuringLink: Optional[bool] = None
    sourceFilesOutsideRootDirectory: Optional[bool] = None
    ssoProtection: Optional[SsoProtection5] = None
    targets: Optional[Dict[str, str]] = Field(
        None,
        description="An object containing the deployment's metadata",
        examples=[{'foo': 'bar'}],
    )
    transferCompletedAt: Optional[float] = None
    transferStartedAt: Optional[float] = None
    transferToAccountId: Optional[str] = None
    transferredFromAccountId: Optional[str] = None
    updatedAt: Optional[float] = None


class Production(Enum):
    true = 'true'
    false = 'false'


class Redirects(Enum):
    true = 'true'
    false = 'false'


class Verified(Enum):
    true = 'true'
    false = 'false'


class Order(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class RedirectStatusCode2(Enum):
    int_307 = 307
    int_301 = 301
    int_302 = 302
    int_308 = 308


class VerificationItem(BaseModel):
    domain: str
    reason: str
    type: str
    value: str


class Domain5(BaseModel):
    apexName: str
    createdAt: Optional[float] = None
    gitBranch: Optional[str] = None
    name: str
    projectId: str
    redirect: Optional[str] = None
    redirectStatusCode: Optional[RedirectStatusCode2] = None
    updatedAt: Optional[float] = None
    verification: Optional[List[VerificationItem]] = Field(
        None,
        description='A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.',
    )
    verified: bool = Field(
        ...,
        description='`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.',
    )


class V9ProjectsIdOrNameDomainsGetResponse(BaseModel):
    domains: List[Domain5]
    pagination: Pagination


class IdOrName1(RootModel[Union[str, int]]):
    root: Union[str, int] = Field(
        ..., description='The unique project identifier or the project name'
    )


class RedirectStatusCode3(Enum):
    NoneType_None = None
    int_301 = 301
    int_302 = 302
    int_307 = 307
    int_308 = 308


class V9ProjectsIdOrNameDomainsPostRequest(BaseModel):
    gitBranch: Optional[constr(max_length=250)] = Field(
        None, description='Git branch to link the project domain', examples=[None]
    )
    name: str = Field(
        ..., description='The project domain name', examples=['www.example.com']
    )
    redirect: Optional[str] = Field(
        None,
        description='Target destination domain for redirect',
        examples=['foobar.com'],
    )
    redirectStatusCode: Optional[RedirectStatusCode3] = Field(
        None, description='Status code for domain redirect', examples=[307]
    )


class RedirectStatusCode4(Enum):
    int_307 = 307
    int_301 = 301
    int_302 = 302
    int_308 = 308


class V9ProjectsIdOrNameDomainsPostResponse(BaseModel):
    apexName: str
    createdAt: Optional[float] = None
    gitBranch: Optional[str] = None
    name: str
    projectId: str
    redirect: Optional[str] = None
    redirectStatusCode: Optional[RedirectStatusCode4] = None
    updatedAt: Optional[float] = None
    verification: Optional[List[VerificationItem]] = Field(
        None,
        description='A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.',
    )
    verified: bool = Field(
        ...,
        description='`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.',
    )


class V9ProjectsIdOrNameDomainsDomainDeleteResponse(BaseModel):
    pass


class V9ProjectsIdOrNameDomainsDomainGetResponse(BaseModel):
    apexName: str
    createdAt: Optional[float] = None
    gitBranch: Optional[str] = None
    name: str
    projectId: str
    redirect: Optional[str] = None
    redirectStatusCode: Optional[RedirectStatusCode4] = None
    updatedAt: Optional[float] = None
    verification: Optional[List[VerificationItem]] = Field(
        None,
        description='A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.',
    )
    verified: bool = Field(
        ...,
        description='`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.',
    )


class RedirectStatusCode6(Enum):
    NoneType_None = None
    int_301 = 301
    int_302 = 302
    int_307 = 307
    int_308 = 308


class V9ProjectsIdOrNameDomainsDomainPatchRequest(BaseModel):
    gitBranch: Optional[constr(max_length=250)] = Field(
        None, description='Git branch to link the project domain', examples=[None]
    )
    redirect: Optional[str] = Field(
        None,
        description='Target destination domain for redirect',
        examples=['foobar.com'],
    )
    redirectStatusCode: Optional[RedirectStatusCode6] = Field(
        None, description='Status code for domain redirect', examples=[307]
    )


class RedirectStatusCode7(Enum):
    int_307 = 307
    int_301 = 301
    int_302 = 302
    int_308 = 308


class V9ProjectsIdOrNameDomainsDomainPatchResponse(BaseModel):
    apexName: str
    createdAt: Optional[float] = None
    gitBranch: Optional[str] = None
    name: str
    projectId: str
    redirect: Optional[str] = None
    redirectStatusCode: Optional[RedirectStatusCode7] = None
    updatedAt: Optional[float] = None
    verification: Optional[List[VerificationItem]] = Field(
        None,
        description='A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.',
    )
    verified: bool = Field(
        ...,
        description='`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.',
    )


class V9ProjectsIdOrNameDomainsDomainVerifyPostResponse(BaseModel):
    apexName: str
    createdAt: Optional[float] = None
    gitBranch: Optional[str] = None
    name: str
    projectId: str
    redirect: Optional[str] = None
    redirectStatusCode: Optional[RedirectStatusCode7] = None
    updatedAt: Optional[float] = None
    verification: Optional[List[VerificationItem]] = Field(
        None,
        description='A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.',
    )
    verified: bool = Field(
        ...,
        description='`true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.',
    )


class Type165(Enum):
    secret = 'secret'
    system = 'system'
    encrypted = 'encrypted'
    plain = 'plain'
    sensitive = 'sensitive'


class V9ProjectsIdOrNameEnvGetResponse1(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: Optional[str] = None
    system: Optional[bool] = None
    target: Optional[Union[List[TargetEnum10], Target16]] = None
    type: Optional[Type165] = None
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: Optional[str] = None


class Env(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: Optional[str] = None
    system: Optional[bool] = None
    target: Optional[Union[List[TargetEnum10], Target16]] = None
    type: Optional[Type165] = None
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: Optional[str] = None


class V9ProjectsIdOrNameEnvGetResponse2(BaseModel):
    envs: List[Env]
    pagination: Pagination


class Env1(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: Optional[str] = None
    system: Optional[bool] = None
    target: Optional[Union[List[TargetEnum10], Target16]] = None
    type: Optional[Type165] = None
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: Optional[str] = None


class V9ProjectsIdOrNameEnvGetResponse3(BaseModel):
    envs: List[Env1]


class V9ProjectsIdOrNameEnvGetResponse(
    RootModel[
        Union[
            V9ProjectsIdOrNameEnvGetResponse1,
            V9ProjectsIdOrNameEnvGetResponse2,
            V9ProjectsIdOrNameEnvGetResponse3,
        ]
    ]
):
    root: Union[
        V9ProjectsIdOrNameEnvGetResponse1,
        V9ProjectsIdOrNameEnvGetResponse2,
        V9ProjectsIdOrNameEnvGetResponse3,
    ]


class TargetEnum16(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'
    preview_2 = 'preview'
    development_2 = 'development'


class Target22(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'
    preview_2 = 'preview'
    development_2 = 'development'


class V9ProjectsIdOrNameEnvIdDeleteResponseItem(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: str
    target: Optional[Union[List[TargetEnum16], Target22]] = None
    type: Type165
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: str


class V9ProjectsIdOrNameEnvIdDeleteResponse1(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: str
    system: Optional[bool] = None
    target: Optional[Union[List[TargetEnum16], Target22]] = None
    type: Type165
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: str


class V9ProjectsIdOrNameEnvIdDeleteResponse2(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: str
    target: Optional[Union[List[TargetEnum16], Target22]] = None
    type: Type165
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: str


class V9ProjectsIdOrNameEnvIdDeleteResponse(
    RootModel[
        Union[
            List[V9ProjectsIdOrNameEnvIdDeleteResponseItem],
            V9ProjectsIdOrNameEnvIdDeleteResponse1,
            V9ProjectsIdOrNameEnvIdDeleteResponse2,
        ]
    ]
):
    root: Union[
        List[V9ProjectsIdOrNameEnvIdDeleteResponseItem],
        V9ProjectsIdOrNameEnvIdDeleteResponse1,
        V9ProjectsIdOrNameEnvIdDeleteResponse2,
    ]


class TargetEnum19(Enum):
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Productio = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Productio'
    )
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Previe = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Previe'
    )
    mport___vercel_path0_utils_env_variable_util_types___EnvTarget_Developmen = (
        'mport("/vercel/path0/utils/env-variable-util/types").EnvTarget.Developmen'
    )


class Type171(Enum):
    system = 'system'
    secret = 'secret'
    encrypted = 'encrypted'
    plain = 'plain'
    sensitive = 'sensitive'


class V9ProjectsIdOrNameEnvIdPatchRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gitBranch: Optional[constr(max_length=250)] = Field(
        None,
        description='The git branch of the environment variable',
        examples=['feature-1'],
    )
    key: Optional[str] = Field(
        None,
        description='The name of the environment variable',
        examples=['GITHUB_APP_ID'],
    )
    target: Optional[List[TargetEnum19]] = Field(
        None,
        description='The target environment of the environment variable',
        examples=[['preview']],
    )
    type: Optional[Type171] = Field(
        None, description='The type of environment variable', examples=['plain']
    )
    value: Optional[str] = Field(
        None,
        description='The value of the environment variable',
        examples=['bkWIjbnxcvo78'],
    )


class TargetEnum20(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'


class Target25(Enum):
    production = 'production'
    preview = 'preview'
    development = 'development'
    preview_1 = 'preview'
    development_1 = 'development'


class Type172(Enum):
    system = 'system'
    encrypted = 'encrypted'
    plain = 'plain'
    sensitive = 'sensitive'
    secret = 'secret'


class V9ProjectsIdOrNameEnvIdPatchResponse(BaseModel):
    configurationId: Optional[str] = None
    createdAt: Optional[float] = None
    createdBy: Optional[str] = None
    decrypted: Optional[bool] = Field(None, description='Whether `value` is decrypted.')
    edgeConfigId: Optional[str] = None
    edgeConfigTokenId: Optional[str] = None
    gitBranch: Optional[str] = None
    id: Optional[str] = None
    key: str
    target: Optional[Union[List[TargetEnum20], Target25]] = None
    type: Type172
    updatedAt: Optional[float] = None
    updatedBy: Optional[str] = None
    value: str


class EdgeConfigItem(BaseModel):
    createdAt: float
    edgeConfigId: str
    key: str
    updatedAt: float
    value: EdgeConfigItemValue


EdgeConfigItemValue.model_rebuild()
FileTree.model_rebuild()
